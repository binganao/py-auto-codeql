LocalUserInputToQueryInjectionFlowConfig.*/([^/]*?)(?:\.([^.]*))?compilerxmlencodingsjarRepositoriesMaven__antlr_antlr_2_7_7Maven__ch_qos_logback_logback_classic_1_2_4Maven__ch_qos_logback_logback_core_1_2_4Maven__com_alibaba_fastjson_1_2_31Maven__com_fasterxml_classmate_1_5_1Maven__com_fasterxml_jackson_core_jackson_annotations_2_12_4Maven__com_fasterxml_jackson_core_jackson_core_2_12_4Maven__com_fasterxml_jackson_core_jackson_databind_2_12_4Maven__com_fasterxml_jackson_datatype_jackson_datatype_jdk8_2_12_4Maven__com_fasterxml_jackson_datatype_jackson_datatype_jsr310_2_12_4Maven__com_fasterxml_jackson_module_jackson_module_parameter_names_2_12_4Maven__com_google_guava_guava_18_0Maven__com_jayway_jsonpath_json_path_2_5_0Maven__com_squareup_okhttp_okhttp_2_7_5Maven__com_squareup_okio_okio_1_6_0Maven__com_sun_activation_jakarta_activation_1_2_2Maven__com_sun_istack_istack_commons_runtime_3_0_12Maven__com_vaadin_external_google_android_json_0_0_20131108_vaadin1Maven__com_zaxxer_HikariCP_4_0_3Maven__commons_codec_commons_codec_1_15Maven__commons_logging_commons_logging_1_2Maven__jakarta_activation_jakarta_activation_api_1_2_2Maven__jakarta_annotation_jakarta_annotation_api_1_3_5Maven__jakarta_persistence_jakarta_persistence_api_2_2_3Maven__jakarta_transaction_jakarta_transaction_api_1_3_3Maven__jakarta_xml_bind_jakarta_xml_bind_api_2_3_3Maven__mysql_mysql_connector_java_8_0_26Maven__net_bytebuddy_byte_buddy_1_10_22Maven__net_bytebuddy_byte_buddy_agent_1_10_22Maven__net_minidev_accessors_smart_2_4_7Maven__net_minidev_json_smart_2_4_7Maven__org_apache_commons_commons_lang3_3_8_1Maven__org_apache_httpcomponents_fluent_hc_4_5_13Maven__org_apache_httpcomponents_httpclient_4_5_13Maven__org_apache_httpcomponents_httpcore_4_4_14Maven__org_apache_logging_log4j_log4j_api_2_14_1Maven__org_apache_logging_log4j_log4j_to_slf4j_2_14_1Maven__org_apache_tomcat_embed_tomcat_embed_core_9_0_50Maven__org_apache_tomcat_embed_tomcat_embed_el_9_0_50Maven__org_apache_tomcat_embed_tomcat_embed_websocket_9_0_50Maven__org_apiguardian_apiguardian_api_1_1_0Maven__org_aspectj_aspectjweaver_1_9_7Maven__org_assertj_assertj_core_3_19_0Maven__org_dom4j_dom4j_2_1_3Maven__org_glassfish_jaxb_jaxb_runtime_2_3_4Maven__org_glassfish_jaxb_txw2_2_3_4Maven__org_hamcrest_hamcrest_2_2Maven__org_hibernate_common_hibernate_commons_annotations_5_1_2_FinalMaven__org_hibernate_hibernate_core_5_4_32_FinalMaven__org_javassist_javassist_3_27_0_GAMaven__org_jboss_jandex_2_2_3_FinalMaven__org_jboss_logging_jboss_logging_3_4_2_FinalMaven__org_junit_jupiter_junit_jupiter_5_7_2Maven__org_junit_jupiter_junit_jupiter_api_5_7_2Maven__org_junit_jupiter_junit_jupiter_engine_5_7_2Maven__org_junit_jupiter_junit_jupiter_params_5_7_2Maven__org_junit_platform_junit_platform_commons_1_7_2Maven__org_junit_platform_junit_platform_engine_1_7_2Maven__org_mockito_mockito_core_3_9_0Maven__org_mockito_mockito_junit_jupiter_3_9_0Maven__org_mybatis_mybatis_3_4_6Maven__org_mybatis_mybatis_spring_1_3_2Maven__org_mybatis_spring_boot_mybatis_spring_boot_autoconfigure_1_3_2Maven__org_mybatis_spring_boot_mybatis_spring_boot_starter_1_3_2Maven__org_objenesis_objenesis_3_2Maven__org_opentest4j_opentest4j_1_2_0Maven__org_ow2_asm_asm_9_1Maven__org_projectlombok_lombok_1_18_12Maven__org_skyscreamer_jsonassert_1_5_0Maven__org_slf4j_jul_to_slf4j_1_7_32Maven__org_slf4j_slf4j_api_1_7_32Maven__org_springframework_boot_spring_boot_2_5_3Maven__org_springframework_boot_spring_boot_autoconfigure_2_5_3Maven__org_springframework_boot_spring_boot_starter_2_5_3Maven__org_springframework_boot_spring_boot_starter_aop_2_5_3Maven__org_springframework_boot_spring_boot_starter_data_jpa_2_5_3Maven__org_springframework_boot_spring_boot_starter_jdbc_2_5_3Maven__org_springframework_boot_spring_boot_starter_json_2_5_3Maven__org_springframework_boot_spring_boot_starter_logging_2_5_3Maven__org_springframework_boot_spring_boot_starter_test_2_5_3Maven__org_springframework_boot_spring_boot_starter_tomcat_2_5_3Maven__org_springframework_boot_spring_boot_starter_web_2_5_3Maven__org_springframework_boot_spring_boot_test_2_5_3Maven__org_springframework_boot_spring_boot_test_autoconfigure_2_5_3Maven__org_springframework_data_spring_data_commons_2_5_3Maven__org_springframework_data_spring_data_jpa_2_5_3Maven__org_springframework_spring_aop_5_3_9Maven__org_springframework_spring_aspects_5_3_9Maven__org_springframework_spring_beans_5_3_9Maven__org_springframework_spring_context_5_3_9Maven__org_springframework_spring_core_5_3_9Maven__org_springframework_spring_expression_5_3_9Maven__org_springframework_spring_jcl_5_3_9Maven__org_springframework_spring_jdbc_5_3_9Maven__org_springframework_spring_orm_5_3_9Maven__org_springframework_spring_test_5_3_9Maven__org_springframework_spring_tx_5_3_9Maven__org_springframework_spring_web_5_3_9Maven__org_springframework_spring_webmvc_5_3_9Maven__org_xmlunit_xmlunit_core_2_8_2Maven__org_yaml_snakeyaml_1_28miscworkspacepomjavartjarclassspring-data-jpa-2.5.3spring-data-commons-2.5.3spring-jdbc-5.3.9mybatis-configTEST-com.l4yn3.microserviceseclab.MicroServiceSeclabApplicationTestsfastjson-1.2.31guava-18.0okhttp-2.7.5jakarta.persistence-api-2.2.3tomcat-embed-core-9.0.50okio-1.6.0commons-lang3-3.8.1spring-jcl-5.3.9httpcore-4.4.14httpclient-4.5.13fluent-hc-4.5.13mybatis-3.4.6apiguardian-api-1.1.0junit-jupiter-api-5.7.2junit-platform-commons-1.7.2spring-beans-5.3.9spring-boot-2.5.3spring-context-5.3.9spring-boot-autoconfigure-2.5.3spring-boot-test-2.5.3spring-core-5.3.9spring-tx-5.3.9spring-test-5.3.9spring-web-5.3.9float|double|int|boolean|short|byte|char|longIndexDb$Map$Entry<K,V>Map$Entry<String,Object>Map$Entry<?,?>Map$Entry<Object,Object>ClassValue$Entry<?>ClassValue$Version<?>ClassValue$Entry<>Map$Entry<Identity,Entry<?>>WeakHashMap$Entry<>Map$Entry<>WeakHashMap$Entry<K,V>WeakHashMap$Entry<Identity,Entry<?>>ClassValue$Entry<T>ClassValue$Version<T>ClassValue$Version<>MethodType$ConcurrentWeakInternSet<MethodType>WatchEvent$Kind<?>WatchEvent$Kind<>WatchEvent$Kind<T>DirectoryStream$Filter<? super Path>LinkedHashMap$Entry<K,V>HashMap$Node<K,V>HashMap$TreeNode<>LinkedHashMap$Entry<>HashMap$Node<>HashMap$TreeNode<K,V>Spliterator$OfPrimitive<Double,DoubleConsumer,OfDouble>Spliterator$OfPrimitive<>Spliterator$OfPrimitive<Integer,IntConsumer,OfInt>Spliterator$OfPrimitive<Long,LongConsumer,OfLong>ConcurrentHashMap$CollectionView<K,V,K>ConcurrentHashMap$Node<>ConcurrentHashMap$Node<K,V>ConcurrentHashMap$KeySetView<>ConcurrentHashMap$CollectionView<>ConcurrentHashMap$KeySetView<K,V>ConcurrentHashMap$KeySetView<K,Boolean>ConcurrentHashMap$CollectionView<K,Boolean,K>Stream$Builder<>Stream$Builder<T>BootstrapRegistry$InstanceSupplier<>BootstrapRegistry$InstanceSupplier<T>HashMap$Node<String,Object>HashMap$TreeNode<String,Object>LinkedHashMap$Entry<String,Object>ExampleMatcher$MatcherConfigurer<GenericPropertyMatcher>Sort$TypedSort<>Sort$TypedSort<S>Sort$TypedSort<T>MethodInvocationRecorder$Recorded<>MethodInvocationRecorder$Recorded<S>MethodInvocationRecorder$Recorded<T>ConcurrentReferenceHashMap$Reference<>ConcurrentReferenceHashMap$Entry<>ConcurrentReferenceHashMap$Entry<K,V>ConcurrentReferenceHashMap$Reference<K,V>ConcurrentReferenceHashMap<>$Task<>ConcurrentReferenceHashMap$Task<T>ConcurrentReferenceHashMap$Entries<V>ConcurrentReferenceHashMap<>$ReferenceManager<>ConcurrentReferenceHashMap<>$Segment<>Map$Entry<K,List<V>>MethodInvocationRecorder$Recorded$ToMapConverter<>MethodInvocationRecorder$Recorded$ToMapConverter<T,S>MethodInvocationRecorder$Recorded$ToCollectionConverter<>MethodInvocationRecorder$Recorded$ToCollectionConverter<T,S>android.contentContentProviderandroid.appActivityContentResolverBroadcastReceiverorg.springframework.boot.SpringApplicationorg.springframework.boot.autoconfigure.SpringBootApplicationjava.lang.Objectjava.lang.Stringorg.apache.ibatis.io.Resourcesorg.apache.ibatis.session.SqlSessionorg.apache.ibatis.session.SqlSessionFactoryorg.apache.ibatis.session.SqlSessionFactoryBuilderjava.io.InputStreamjava.io.PrintStreamcom.alibaba.fastjson.JSONcom.l4yn3.microserviceseclab.data.Teacherorg.springframework.web.bind.annotation.RequestMappingorg.springframework.web.bind.annotation.RestControllerorg.springframework.web.bind.annotation.PostMappingorg.springframework.web.bind.annotation.RequestBodycom.l4yn3.microserviceseclab.dao.PersonRepositorycom.l4yn3.microserviceseclab.logic.IndexLogicorg.springframework.beans.factory.annotation.Autowiredorg.springframework.web.bind.annotation.RequestParamjava.util.List<String>java.util.Optional<String>com.google.common.base.Joinerjava.io.BufferedReaderjava.lang.StringBufferjava.lang.FunctionalInterfacejava.lang.ProcessBuilderjava.lang.Processjava.lang.Runtimecom.squareup.okhttp.Callcom.squareup.okhttp.OkHttpClientcom.squareup.okhttp.Responseorg.apache.http.client.fluent.Requestjava.net.HttpURLConnectionjava.net.URLorg.apache.http.client.fluent.Responsecom.squareup.okhttp.Request$Builderorg.apache.http.impl.client.CloseableHttpClientjavax.xml.parsers.DocumentBuilderjavax.xml.parsers.DocumentBuilderFactoryorg.w3c.dom.Documentorg.w3c.dom.Nodeorg.springframework.data.jpa.repository.Queryorg.springframework.stereotype.Indexedorg.springframework.data.repository.NoRepositoryBeanorg.springframework.jdbc.core.JdbcTemplateorg.springframework.stereotype.Repositoryorg.springframework.util.CollectionUtilscom.l4yn3.microserviceseclab.db.IndexDbjava.sql.ResultSetorg.springframework.stereotype.Serviceorg.apache.ibatis.annotations.Mapperorg.apache.ibatis.annotations.Paramorg.apache.ibatis.annotations.Selectorg.junit.jupiter.api.Testorg.springframework.boot.test.context.SpringBootTestjava.lang.annotation.Retentionjava.lang.annotation.Targetjava.lang.Deprecatedcom.google.common.annotations.Betacom.google.common.annotations.GwtCompatiblejava.lang.annotation.Documentedjavax.persistence.Entityjavax.persistence.Tablejava.beans.ConstructorPropertiesjava.beans.Transientsun.reflect.CallerSensitivejava.lang.SafeVarargssun.misc.Contendedjava.lang.annotation.Inheritedjava.lang.annotation.Repeatablejava.lang.invoke.DontInlinejava.lang.invoke.ForceInlinejava.lang.invoke.LambdaForm$Hiddenjava.lang.invoke.Stablejava.lang.invoke.MethodHandle$PolymorphicSignatureorg.apache.http.annotation.Contractorg.apache.http.annotation.Obsoleteorg.apiguardian.api.APIorg.junit.platform.commons.annotation.Testableorg.junit.jupiter.api.extension.ExtendWithorg.springframework.lang.Nullableorg.springframework.boot.SpringBootConfigurationorg.springframework.context.annotation.Configurationorg.springframework.core.annotation.AliasFororg.springframework.boot.autoconfigure.AutoConfigurationPackageorg.springframework.context.annotation.Importorg.springframework.boot.autoconfigure.EnableAutoConfigurationorg.springframework.context.annotation.ComponentScanorg.springframework.context.annotation.ComponentScan$Filterorg.springframework.test.context.BootstrapWithorg.springframework.stereotype.Componentorg.springframework.data.annotation.QueryAnnotationorg.springframework.stereotype.Controllerorg.springframework.web.bind.annotation.Mappingorg.springframework.web.bind.annotation.ResponseBodygetIntentcom.mongodb.utilEntityManagercom.mongodbDBObjectBasicDBObjectcreateQuerycreateNativeQueryonReceiveplay.mvcjava.rmiRemoteFileInputStreamorg.kohsuke.args4j.Argumentjavax.ws.rsjakarta.ws.rsMessageBodyReaderjavax\.ws\.rs(\..*)?jakarta\.ws\.rs(\..*)?org.springframework.uiModelModelMaporg.springframework.httpHttpMethodorg.springframework.validationErrorsorg.springframework.web.utilUriComponentsBuilderorg.springframework.web.bind.supportSessionStatusorg.springframework.web.servlet.mvc.supportRedirectAttributesorg.springframework.web.context.requestWebRequestNativeWebRequestCookieValueRequestPartPathVariableRequestHeaderMatrixVariableRequestAttributeSessionAttributeRequest;true;getBody;;;ReturnValue;remoteRequest;true;getContentLength;;;ReturnValue;remoteRequest;true;getCookies;;;ReturnValue;remoteRequest;true;getHeaders;;;ReturnValue;remoteRequest;true;getPath;;;ReturnValue;remoteRequest;true;getQuery;;;ReturnValue;remoteRequest;true;getQueryParams;;;ReturnValue;remoteRequest;true;getRawUri;;;ReturnValue;remoteRequest;true;getUri;;;ReturnValue;remoteRequest;true;oneCookie;;;ReturnValue;remoteratpack.http;ratpack.core.http;ratpack.handling;Context;true;parse;(java.lang.Class);;ReturnValue;remoteandroidx.slice;SliceProvider;true;onBindSlice;;;Parameter[0];contentproviderratpack.handling;Context;true;parse;(ratpack.parse.Parse);;ReturnValue;remoteandroidx.slice;SliceProvider;true;onSlicePinned;;;Parameter[0];contentproviderratpack.core.handling;Context;true;parse;(java.lang.Class);;ReturnValue;remoteandroidx.slice;SliceProvider;true;onSliceUnpinned;;;Parameter[0];contentproviderandroidx.slice;SliceProvider;true;onMapIntentToUri;;;Parameter[0];contentproviderjavax.faces.context;ExternalContext;true;getRequestPathInfo;();;ReturnValue;remotejavax.ws.rs.container;ContainerRequestContext;true;getCookies;;;ReturnValue;remotejavax.ws.rs.container;ContainerRequestContext;true;getHeaders;;;ReturnValue;remotejavax.ws.rs.container;ContainerRequestContext;true;getUriInfo;;;ReturnValue;remoteratpack.core.handling;Context;true;parse;(ratpack.parse.Parse);;ReturnValue;remoteratpack.handling;Context;true;parse;(ratpack.core.parse.Parse);;ReturnValue;remotejavax.faces.context;ExternalContext;true;getRequestCookieMap;();;ReturnValue;remotejavax.faces.context;ExternalContext;true;getRequestHeaderMap;();;ReturnValue;remotejavax.ws.rs.container;ContainerRequestContext;true;getLanguage;;;ReturnValue;remotejakarta.faces.context;ExternalContext;true;getRequestPathInfo;();;ReturnValue;remotejakarta.ws.rs.container;ContainerRequestContext;true;getCookies;;;ReturnValue;remotejakarta.ws.rs.container;ContainerRequestContext;true;getHeaders;;;ReturnValue;remotejakarta.ws.rs.container;ContainerRequestContext;true;getUriInfo;;;ReturnValue;remotejavax.ws.rs.container;ContainerRequestContext;true;getMediaType;;;ReturnValue;remotejakarta.faces.context;ExternalContext;true;getRequestCookieMap;();;ReturnValue;remotejakarta.faces.context;ExternalContext;true;getRequestHeaderMap;();;ReturnValue;remotejakarta.ws.rs.container;ContainerRequestContext;true;getLanguage;;;ReturnValue;remotejakarta.ws.rs.container;ContainerRequestContext;true;getMediaType;;;ReturnValue;remotejavax.faces.context;ExternalContext;true;getRequestParameterMap;();;ReturnValue;remotejavax.ws.rs.container;ContainerRequestContext;true;getEntityStream;;;ReturnValue;remotejavax.ws.rs.container;ContainerRequestContext;true;getHeaderString;;;ReturnValue;remoteratpack.core.handling;Context;true;parse;(ratpack.core.parse.Parse);;ReturnValue;remotejakarta.faces.context;ExternalContext;true;getRequestParameterMap;();;ReturnValue;remotejavax.faces.context;ExternalContext;true;getRequestParameterNames;();;ReturnValue;remotejakarta.ws.rs.container;ContainerRequestContext;true;getEntityStream;;;ReturnValue;remotejakarta.ws.rs.container;ContainerRequestContext;true;getHeaderString;;;ReturnValue;remotejavax.faces.context;ExternalContext;true;getRequestHeaderValuesMap;();;ReturnValue;remoteandroidx.slice;SliceProvider;true;onCreatePermissionRequest;;;Parameter[0];contentproviderjakarta.faces.context;ExternalContext;true;getRequestParameterNames;();;ReturnValue;remoteratpack.handling;Context;true;parse;(java.lang.Class,java.lang.Object);;ReturnValue;remotejakarta.faces.context;ExternalContext;true;getRequestHeaderValuesMap;();;ReturnValue;remotejavax.faces.context;ExternalContext;true;getRequestParameterValuesMap;();;ReturnValue;remoteratpack.handling;Context;true;parse;(com.google.common.reflect.TypeToken);;ReturnValue;remotejakarta.faces.context;ExternalContext;true;getRequestParameterValuesMap;();;ReturnValue;remotejavax.ws.rs.container;ContainerRequestContext;true;getAcceptableLanguages;;;ReturnValue;remotejavax.ws.rs.container;ContainerRequestContext;true;getAcceptableMediaTypes;;;ReturnValue;remoteratpack.core.handling;Context;true;parse;(java.lang.Class,java.lang.Object);;ReturnValue;remotejakarta.ws.rs.container;ContainerRequestContext;true;getAcceptableLanguages;;;ReturnValue;remotejakarta.ws.rs.container;ContainerRequestContext;true;getAcceptableMediaTypes;;;ReturnValue;remoteratpack.core.handling;Context;true;parse;(com.google.common.reflect.TypeToken);;ReturnValue;remoteratpack.handling;Context;true;parse;(com.google.common.reflect.TypeToken,java.lang.Object);;ReturnValue;remoteorg.apache.http.protocol;HttpRequestHandler;true;handle;(HttpRequest,HttpResponse,HttpContext);;Parameter[0];remoteratpack.core.handling;Context;true;parse;(com.google.common.reflect.TypeToken,java.lang.Object);;ReturnValue;remoteorg.apache.hc.core5.http.io;HttpRequestHandler;true;handle;(ClassicHttpRequest,ClassicHttpResponse,HttpContext);;Parameter[0];remoteorg.apache.hc.core5.http.io;HttpServerRequestHandler;true;handle;(ClassicHttpRequest,ResponseTrigger,HttpContext);;Parameter[0];remoteandroid.content;ContentInterface;true;call;(String,String,String,Bundle);;Parameter[0..3];contentproviderandroid.content;ContentInterface;true;delete;(Uri,Bundle);;Parameter[0..1];contentproviderandroid.content;ContentInterface;true;getType;(Uri);;Parameter[0];contentproviderandroid.content;ContentInterface;true;insert;(Uri,ContentValues,Bundle);;Parameter[0];contentproviderandroid.content;ContentInterface;true;openAssetFile;(Uri,String,CancellationSignal);;Parameter[0];contentproviderandroid.content;ContentInterface;true;openFile;(Uri,String,CancellationSignal);;Parameter[0];contentproviderandroid.content;ContentInterface;true;openTypedAssetFile;(Uri,String,Bundle,CancellationSignal);;Parameter[0..2];contentproviderandroid.content;ContentInterface;true;query;(Uri,String[],Bundle,CancellationSignal);;Parameter[0..2];contentproviderandroid.content;ContentInterface;true;update;(Uri,ContentValues,Bundle);;Parameter[0..2];contentproviderandroid.content;ContentProvider;true;call;(String,String,Bundle);;Parameter[0..2];contentproviderandroid.content;ContentProvider;true;call;(String,String,String,Bundle);;Parameter[0..3];contentproviderandroid.content;ContentProvider;true;delete;(Uri,Bundle);;Parameter[0..1];contentproviderandroid.content;ContentProvider;true;delete;(Uri,String,String[]);;Parameter[0..2];contentproviderandroid.content;ContentProvider;true;getType;(Uri);;Parameter[0];contentproviderandroid.content;ContentProvider;true;insert;(Uri,ContentValues);;Parameter[0..1];contentproviderandroid.content;ContentProvider;true;insert;(Uri,ContentValues,Bundle);;Parameter[0..2];contentproviderandroid.content;ContentProvider;true;openAssetFile;(Uri,String);;Parameter[0];contentproviderandroid.content;ContentProvider;true;openAssetFile;(Uri,String,CancellationSignal);;Parameter[0];contentproviderandroid.content;ContentProvider;true;openFile;(Uri,String);;Parameter[0];contentproviderandroid.content;ContentProvider;true;openFile;(Uri,String,CancellationSignal);;Parameter[0];contentproviderandroid.content;ContentProvider;true;openTypedAssetFile;(Uri,String,Bundle);;Parameter[0..2];contentproviderandroid.content;ContentProvider;true;openTypedAssetFile;(Uri,String,Bundle,CancellationSignal);;Parameter[0..2];contentproviderandroid.content;ContentProvider;true;query;(Uri,String[],Bundle,CancellationSignal);;Parameter[0..2];contentproviderandroid.content;ContentProvider;true;query;(Uri,String[],String,String[],String);;Parameter[0..4];contentproviderandroid.content;ContentProvider;true;query;(Uri,String[],String,String[],String,CancellationSignal);;Parameter[0..4];contentproviderandroid.content;ContentProvider;true;update;(Uri,ContentValues,Bundle);;Parameter[0..2];contentproviderandroid.content;ContentProvider;true;update;(Uri,ContentValues,String,String[]);;Parameter[0..3];contentproviderandroid.util;AttributeSet;false;getAttributeBooleanValue;;;ReturnValue;remoteandroid.util;AttributeSet;false;getAttributeCount;;;ReturnValue;remoteandroid.util;AttributeSet;false;getAttributeFloatValue;;;ReturnValue;remoteandroid.util;AttributeSet;false;getAttributeIntValue;;;ReturnValue;remoteandroid.util;AttributeSet;false;getAttributeListValue;;;ReturnValue;remoteandroid.util;AttributeSet;false;getAttributeName;;;ReturnValue;remoteandroid.util;AttributeSet;false;getAttributeNameResource;;;ReturnValue;remoteandroid.util;AttributeSet;false;getAttributeNamespace;;;ReturnValue;remoteandroid.util;AttributeSet;false;getAttributeResourceValue;;;ReturnValue;remoteandroid.util;AttributeSet;false;getAttributeUnsignedIntValue;;;ReturnValue;remoteandroid.util;AttributeSet;false;getAttributeValue;;;ReturnValue;remoteandroid.util;AttributeSet;false;getClassAttribute;;;ReturnValue;remoteandroid.util;AttributeSet;false;getIdAttribute;;;ReturnValue;remoteandroid.util;AttributeSet;false;getIdAttributeResourceValue;;;ReturnValue;remoteandroid.util;AttributeSet;false;getPositionDescription;;;ReturnValue;remoteandroid.util;AttributeSet;false;getStyleAttribute;;;ReturnValue;remoteandroid.webkit;WebView;false;getOriginalUrl;();;ReturnValue;remoteandroid.webkit;WebView;false;getUrl;();;ReturnValue;remotejava.net.http;WebSocket$Listener;true;onText;(WebSocket,CharSequence,boolean);;Parameter[1];remotejava.net;Socket;false;getInputStream;();;ReturnValue;remotejava.net;URLConnection;false;getInputStream;();;ReturnValue;remotejavax.servlet.http;Cookie;false;getComment;();;ReturnValue;remotejavax.servlet.http;Cookie;false;getName;();;ReturnValue;remotejavax.servlet.http;Cookie;false;getValue;();;ReturnValue;remotejavax.servlet.http;HttpServletRequest;false;getHeader;(String);;ReturnValue;remotejavax.servlet.http;HttpServletRequest;false;getHeaderNames;();;ReturnValue;remotejavax.servlet.http;HttpServletRequest;false;getHeaders;(String);;ReturnValue;remotejavax.servlet.http;HttpServletRequest;false;getParameter;(String);;ReturnValue;remotejavax.servlet.http;HttpServletRequest;false;getParameterMap;();;ReturnValue;remotejavax.servlet.http;HttpServletRequest;false;getParameterNames;();;ReturnValue;remotejavax.servlet.http;HttpServletRequest;false;getParameterValues;(String);;ReturnValue;remotejavax.servlet.http;HttpServletRequest;false;getPathInfo;();;ReturnValue;remotejavax.servlet.http;HttpServletRequest;false;getQueryString;();;ReturnValue;remotejavax.servlet.http;HttpServletRequest;false;getRemoteUser;();;ReturnValue;remotejavax.servlet.http;HttpServletRequest;false;getRequestURI;();;ReturnValue;remotejavax.servlet.http;HttpServletRequest;false;getRequestURL;();;ReturnValue;remotejavax.servlet;ServletRequest;false;getInputStream;();;ReturnValue;remotejavax.servlet;ServletRequest;false;getParameter;(String);;ReturnValue;remotejavax.servlet;ServletRequest;false;getParameterMap;();;ReturnValue;remotejavax.servlet;ServletRequest;false;getParameterNames;();;ReturnValue;remotejavax.servlet;ServletRequest;false;getParameterValues;(String);;ReturnValue;remotejavax.servlet;ServletRequest;false;getReader;();;ReturnValue;remotejavax.validation;ConstraintValidator;true;isValid;;;Parameter[0];remoteorg.apache.http;HttpEntity;false;getContent;();;ReturnValue;remoteorg.apache.http;HttpMessage;false;getParams;();;ReturnValue;remoteorg.springframework.security.web.savedrequest;SavedRequest;true;getCookies;;;ReturnValue;remoteorg.springframework.security.web.savedrequest;SavedRequest;true;getHeaderNames;;;ReturnValue;remoteorg.springframework.security.web.savedrequest;SavedRequest;true;getHeaderValues;;;ReturnValue;remoteorg.springframework.security.web.savedrequest;SavedRequest;true;getParameterMap;;;ReturnValue;remoteorg.springframework.security.web.savedrequest;SavedRequest;true;getParameterValues;;;ReturnValue;remoteorg.springframework.security.web.savedrequest;SavedRequest;true;getRedirectUrl;;;ReturnValue;remoteorg.springframework.web.client;RestTemplate;false;exchange;;;ReturnValue;remoteorg.springframework.web.client;RestTemplate;false;getForEntity;;;ReturnValue;remoteorg.springframework.web.client;RestTemplate;false;postForEntity;;;ReturnValue;remoteorg.springframework.web.context.request;WebRequest;false;getDescription;;;ReturnValue;remoteorg.springframework.web.context.request;WebRequest;false;getHeader;;;ReturnValue;remoteorg.springframework.web.context.request;WebRequest;false;getHeaderNames;;;ReturnValue;remoteorg.springframework.web.context.request;WebRequest;false;getHeaderValues;;;ReturnValue;remoteorg.springframework.web.context.request;WebRequest;false;getParameter;;;ReturnValue;remoteorg.springframework.web.context.request;WebRequest;false;getParameterMap;;;ReturnValue;remoteorg.springframework.web.context.request;WebRequest;false;getParameterNames;;;ReturnValue;remoteorg.springframework.web.context.request;WebRequest;false;getParameterValues;;;ReturnValue;remoteorg.springframework.web.multipart;MultipartFile;true;getBytes;();;ReturnValue;remoteorg.springframework.web.multipart;MultipartFile;true;getContentType;();;ReturnValue;remoteorg.springframework.web.multipart;MultipartFile;true;getInputStream;();;ReturnValue;remoteorg.springframework.web.multipart;MultipartFile;true;getName;();;ReturnValue;remoteorg.springframework.web.multipart;MultipartFile;true;getOriginalFilename;();;ReturnValue;remoteorg.springframework.web.multipart;MultipartFile;true;getResource;();;ReturnValue;remoteorg.springframework.web.multipart;MultipartRequest;true;getFile;(String);;ReturnValue;remoteorg.springframework.web.multipart;MultipartRequest;true;getFileMap;();;ReturnValue;remoteorg.springframework.web.multipart;MultipartRequest;true;getFileNames;();;ReturnValue;remoteorg.springframework.web.multipart;MultipartRequest;true;getFiles;(String);;ReturnValue;remoteorg.springframework.web.multipart;MultipartRequest;true;getMultiFileMap;();;ReturnValue;remoteorg.springframework.web.multipart;MultipartRequest;true;getMultipartContentType;(String);;ReturnValue;remoteorg.xmlpull.v1;XmlPullParser;false;getName;();;ReturnValue;remoteorg.xmlpull.v1;XmlPullParser;false;getNamespace;();;ReturnValue;remoteorg.xmlpull.v1;XmlPullParser;false;getText;();;ReturnValue;remoteplay.mvc;Http$RequestHeader;false;getHeader;;;ReturnValue;remoteplay.mvc;Http$RequestHeader;false;getQueryString;;;ReturnValue;remoteplay.mvc;Http$RequestHeader;false;header;;;ReturnValue;remoteplay.mvc;Http$RequestHeader;false;queryString;;;ReturnValue;remoteratpack.http;Request;true;getBody;;;ReturnValue;remoteratpack.http;Request;true;getContentLength;;;ReturnValue;remoteratpack.http;Request;true;getCookies;;;ReturnValue;remoteratpack.http;Request;true;getHeaders;;;ReturnValue;remoteratpack.http;Request;true;getPath;;;ReturnValue;remoteratpack.http;Request;true;getQuery;;;ReturnValue;remoteratpack.http;Request;true;getQueryParams;;;ReturnValue;remoteratpack.http;Request;true;getRawUri;;;ReturnValue;remoteratpack.http;Request;true;getUri;;;ReturnValue;remoteratpack.http;Request;true;oneCookie;;;ReturnValue;remoteratpack.core.http;Request;true;getBody;;;ReturnValue;remoteratpack.core.http;Request;true;getContentLength;;;ReturnValue;remoteratpack.core.http;Request;true;getCookies;;;ReturnValue;remoteratpack.core.http;Request;true;getHeaders;;;ReturnValue;remoteratpack.core.http;Request;true;getPath;;;ReturnValue;remoteratpack.core.http;Request;true;getQuery;;;ReturnValue;remoteratpack.core.http;Request;true;getQueryParams;;;ReturnValue;remoteratpack.core.http;Request;true;getRawUri;;;ReturnValue;remoteratpack.core.http;Request;true;getUri;;;ReturnValue;remoteratpack.core.http;Request;true;oneCookie;;;ReturnValue;remote;ratpack.handlingContext(java.lang.Class)ReturnValueremoteandroidx.sliceSliceProvideronBindSliceParameter[0]contentprovider(ratpack.parse.Parse)onSlicePinnedratpack.core.handlingonSliceUnpinnedonMapIntentToUrijavax.faces.contextExternalContextgetRequestPathInfojavax.ws.rs.containerContainerRequestContextgetUriInfo(ratpack.core.parse.Parse)getRequestCookieMapgetRequestHeaderMapjakarta.faces.contextjakarta.ws.rs.containergetMediaTypegetRequestParameterMapgetEntityStreamgetHeaderStringgetRequestParameterNamesgetRequestHeaderValuesMaponCreatePermissionRequest(java.lang.Class,java.lang.Object)getRequestParameterValuesMap(com.google.common.reflect.TypeToken)getAcceptableLanguagesgetAcceptableMediaTypes(com.google.common.reflect.TypeToken,java.lang.Object)HttpRequestHandlerorg.apache.hc.core5.http.io(ClassicHttpRequest,ClassicHttpResponse,HttpContext)HttpServerRequestHandler(ClassicHttpRequest,ResponseTrigger,HttpContext)ContentInterface(String,String,String,Bundle)Parameter[0..3](Uri,Bundle)Parameter[0..1](Uri)(Uri,ContentValues,Bundle)openAssetFile(Uri,String,CancellationSignal)openFileopenTypedAssetFile(Uri,String,Bundle,CancellationSignal)Parameter[0..2](Uri,String[],Bundle,CancellationSignal)(String,String,Bundle)(Uri,String,String[])(Uri,ContentValues)(Uri,String)(Uri,String,Bundle)(Uri,String[],String,String[],String)Parameter[0..4](Uri,String[],String,String[],String,CancellationSignal)(Uri,ContentValues,String,String[])android.utilgetAttributeBooleanValuegetAttributeFloatValuegetAttributeIntValuegetAttributeListValuegetAttributeNamegetAttributeNameResourcegetAttributeNamespacegetAttributeResourceValuegetAttributeUnsignedIntValuegetAttributeValuegetClassAttributegetIdAttributegetIdAttributeResourceValuegetPositionDescriptiongetStyleAttributeandroid.webkitWebViewgetOriginalUrlgetUrljava.net.httpWebSocket$ListeneronText(WebSocket,CharSequence,boolean)Parameter[1]javax.validationConstraintValidatororg.springframework.security.web.savedrequestSavedRequestgetHeaderValuesgetRedirectUrlorg.springframework.web.clientRestTemplateexchangegetForEntitypostForEntityorg.springframework.web.multipartMultipartFilegetOriginalFilenameMultipartRequestgetFileMapgetFileNamesgetMultiFileMapgetMultipartContentTypeorg.xmlpull.v1XmlPullParsergetNamespaceHttp$RequestHeaderratpack.httpgetBodygetQueryParamsgetRawUrioneCookieratpack.core.httpjava.sql;Statement;true;execute;;;Argument[0];sqljava.sql;Statement;true;addBatch;;;Argument[0];sqlorg.jooq;PlainSQL;false;;;Annotated;Argument[0];sqljava.sql;Connection;true;prepareCall;;;Argument[0];sqljava.sql;Statement;true;executeQuery;;;Argument[0];sqlandroid.webkit;WebView;false;loadData;;;Argument[0];xssjava.sql;Statement;true;executeUpdate;;;Argument[0];sqlorg.hibernate;Session;true;createQuery;;;Argument[0];sqljava.sql;Connection;true;prepareStatement;;;Argument[0];sqlorg.hibernate;Session;true;createSQLQuery;;;Argument[0];sqljava.sql;Statement;true;executeLargeUpdate;;;Argument[0];sqljavax.ws.rs.client;Client;true;target;;;Argument[0];open-urljakarta.ws.rs.client;Client;true;target;;;Argument[0];open-urlorg.hibernate;QueryProducer;true;createQuery;;;Argument[0];sqljavax.faces.context;ResponseStream;true;write;;;Argument[0];xssjavax.faces.context;ResponseWriter;true;write;;;Argument[0];xssandroid.webkit;WebView;false;evaluateJavascript;;;Argument[0];xssjakarta.faces.context;ResponseStream;true;write;;;Argument[0];xssjakarta.faces.context;ResponseWriter;true;write;;;Argument[0];xssorg.hibernate;QueryProducer;true;createSQLQuery;;;Argument[0];sqlandroid.webkit;WebView;false;loadDataWithBaseURL;;;Argument[1];xssjavax.ws.rs.core;Response;true;seeOther;;;Argument[0];url-redirectjavax.xml.transform;Transformer;false;transform;;;Argument[-1];xsltjakarta.ws.rs.core;Response;true;seeOther;;;Argument[0];url-redirectorg.apache.ibatis.jdbc;SqlRunner;false;run;(String);;Argument[0];sqlorg.hibernate;QueryProducer;true;createNativeQuery;;;Argument[0];sqlnet.sf.saxon.s9api;XsltTransformer;false;transform;;;Argument[-1];xsltorg.hibernate;SharedSessionContract;true;createQuery;;;Argument[0];sqlnet.sf.saxon.s9api;Xslt30Transformer;false;transform;;;Argument[-1];xsltorg.apache.http;HttpResponse;true;setEntity;(HttpEntity);;Argument[0];xssorg.hibernate;SharedSessionContract;true;createSQLQuery;;;Argument[0];sqljavax.ws.rs.core;Response;true;temporaryRedirect;;;Argument[0];url-redirectnet.sf.saxon.s9api;Xslt30Transformer;false;callFunction;;;Argument[-1];xsltnet.sf.saxon.s9api;Xslt30Transformer;false;callTemplate;;;Argument[-1];xsltcom.google.common.io;Resources;false;readLines;;;Argument[0];url-open-streamjavax.ws.rs.core;ResponseBuilder;false;header;;;Argument[1];header-splittingjakarta.ws.rs.core;Response;true;temporaryRedirect;;;Argument[0];url-redirectnet.sf.saxon.s9api;Xslt30Transformer;false;applyTemplates;;;Argument[-1];xsltorg.apache.ibatis.jdbc;SqlRunner;false;delete;(String,Object[]);;Argument[0];sqlorg.apache.ibatis.jdbc;SqlRunner;false;insert;(String,Object[]);;Argument[0];sqlorg.apache.ibatis.jdbc;SqlRunner;false;update;(String,Object[]);;Argument[0];sqlcom.google.common.io;Resources;false;toByteArray;(URL);;Argument[0];url-open-streamorg.apache.ibatis.jdbc;SqlRunner;false;selectAll;(String,Object[]);;Argument[0];sqlorg.apache.ibatis.jdbc;SqlRunner;false;selectOne;(String,Object[]);;Argument[0];sqlcom.google.common.io;Resources;false;asByteSource;(URL);;Argument[0];url-open-streamjavax.servlet.http;HttpServletResponse;false;addCookie;;;Argument[0];header-splittingcom.google.common.io;Resources;false;toString;(URL,Charset);;Argument[0];url-open-streamjavax.servlet.http;HttpServletResponse;false;addHeader;;;Argument[0..1];header-splittingjavax.servlet.http;HttpServletResponse;false;setHeader;;;Argument[0..1];header-splittingcom.google.common.io;Resources;false;copy;(URL,OutputStream);;Argument[0];url-open-streamorg.apache.hc.core5.http;HttpEntityContainer;true;setEntity;(HttpEntity);;Argument[0];xsscom.google.common.io;Resources;false;asCharSource;(URL,Charset);;Argument[0];url-open-streamorg.apache.http.util;EntityUtils;true;updateEntity;(HttpResponse,HttpEntity);;Argument[1];xssjavax.servlet.http;HttpServletResponse;false;sendError;(int,String);;Argument[1];information-leakjavax.script;CompiledScript;false;eval;;;Argument[-1];mvelorg.mvel2.compiler;Accessor;false;getValue;;;Argument[-1];mvelorg.mvel2.compiler;CompiledAccExpression;false;getValue;;;Argument[-1];mvelorg.mvel2.compiler;CompiledExpression;false;getDirectValue;;;Argument[-1];mvelorg.mvel2.compiler;ExecutableStatement;false;getValue;;;Argument[-1];mvelorg.mvel2.jsr223;MvelCompiledScript;false;eval;;;Argument[-1];mvelorg.mvel2.jsr223;MvelScriptEngine;false;eval;;;Argument[0];mvelorg.mvel2.jsr223;MvelScriptEngine;false;evaluate;;;Argument[0];mvelorg.mvel2.templates;TemplateRuntime;false;eval;;;Argument[0];mvelorg.mvel2.templates;TemplateRuntime;false;execute;;;Argument[0];mvelorg.mvel2;MVEL;false;eval;;;Argument[0];mvelorg.mvel2;MVEL;false;evalToBoolean;;;Argument[0];mvelorg.mvel2;MVEL;false;evalToString;;;Argument[0];mvelorg.mvel2;MVEL;false;executeAllExpression;;;Argument[0];mvelorg.mvel2;MVEL;false;executeExpression;;;Argument[0];mvelorg.mvel2;MVEL;false;executeSetExpression;;;Argument[0];mvelorg.mvel2;MVELRuntime;false;execute;;;Argument[1];mvelcom.opensymphony.xwork2.ognl;OgnlUtil;false;callMethod;;;Argument[0];ognl-injectioncom.opensymphony.xwork2.ognl;OgnlUtil;false;getValue;;;Argument[0];ognl-injectioncom.opensymphony.xwork2.ognl;OgnlUtil;false;setValue;;;Argument[0];ognl-injectionognl.enhance;ExpressionAccessor;true;get;;;Argument[-1];ognl-injectionognl.enhance;ExpressionAccessor;true;set;;;Argument[-1];ognl-injectionognl;Node;false;getValue;;;Argument[-1];ognl-injectionognl;Node;false;setValue;;;Argument[-1];ognl-injectionognl;Ognl;false;getValue;;;Argument[0];ognl-injectionognl;Ognl;false;setValue;;;Argument[0];ognl-injectionorg.apache.commons.ognl.enhance;ExpressionAccessor;true;get;;;Argument[-1];ognl-injectionorg.apache.commons.ognl.enhance;ExpressionAccessor;true;set;;;Argument[-1];ognl-injectionorg.apache.commons.ognl;Node;true;getValue;;;Argument[-1];ognl-injectionorg.apache.commons.ognl;Node;true;setValue;;;Argument[-1];ognl-injectionorg.apache.commons.ognl;Ognl;false;getValue;;;Argument[0];ognl-injectionorg.apache.commons.ognl;Ognl;false;setValue;;;Argument[0];ognl-injectionorg.springframework.http;RequestEntity;false;RequestEntity;(HttpMethod,URI);;Argument[1];open-urlorg.springframework.http;RequestEntity;false;RequestEntity;(MultiValueMap,HttpMethod,URI);;Argument[2];open-urlorg.springframework.http;RequestEntity;false;RequestEntity;(Object,HttpMethod,URI);;Argument[2];open-urlorg.springframework.http;RequestEntity;false;RequestEntity;(Object,HttpMethod,URI,Type);;Argument[2];open-urlorg.springframework.http;RequestEntity;false;RequestEntity;(Object,MultiValueMap,HttpMethod,URI);;Argument[3];open-urlorg.springframework.http;RequestEntity;false;RequestEntity;(Object,MultiValueMap,HttpMethod,URI,Type);;Argument[3];open-urlorg.springframework.http;RequestEntity;false;delete;;;Argument[0];open-urlorg.springframework.http;RequestEntity;false;get;;;Argument[0];open-urlorg.springframework.http;RequestEntity;false;head;;;Argument[0];open-urlorg.springframework.http;RequestEntity;false;method;;;Argument[1];open-urlorg.springframework.http;RequestEntity;false;options;;;Argument[0];open-urlorg.springframework.http;RequestEntity;false;patch;;;Argument[0];open-urlorg.springframework.http;RequestEntity;false;post;;;Argument[0];open-urlorg.springframework.http;RequestEntity;false;put;;;Argument[0];open-urlorg.springframework.web.client;RestTemplate;false;delete;;;Argument[0];open-urlorg.springframework.web.client;RestTemplate;false;doExecute;;;Argument[0];open-urlorg.springframework.web.client;RestTemplate;false;exchange;;;Argument[0];open-urlorg.springframework.web.client;RestTemplate;false;execute;;;Argument[0];open-urlorg.springframework.web.client;RestTemplate;false;getForEntity;;;Argument[0];open-urlorg.springframework.web.client;RestTemplate;false;getForObject;;;Argument[0];open-urlorg.springframework.web.client;RestTemplate;false;headForHeaders;;;Argument[0];open-urlorg.springframework.web.client;RestTemplate;false;optionsForAllow;;;Argument[0];open-urlorg.springframework.web.client;RestTemplate;false;patchForObject;;;Argument[0];open-urlorg.springframework.web.client;RestTemplate;false;postForEntity;;;Argument[0];open-urlorg.springframework.web.client;RestTemplate;false;postForLocation;;;Argument[0];open-urlorg.springframework.web.client;RestTemplate;false;postForObject;;;Argument[0];open-urlorg.springframework.web.client;RestTemplate;false;put;;;Argument[0];open-urlorg.springframework.web.reactive.function.client;WebClient$Builder;false;baseUrl;;;Argument[0];open-urlorg.springframework.web.reactive.function.client;WebClient;false;create;;;Argument[0];open-urljavax.xml.xpath;XPath;true;compile;;;Argument[0];xpathjavax.xml.xpath;XPath;true;evaluate;;;Argument[0];xpathjavax.xml.xpath;XPath;true;evaluateExpression;;;Argument[0];xpathorg.dom4j.tree;AbstractNode;true;createPattern;;;Argument[0];xpathorg.dom4j.tree;AbstractNode;true;createXPathFilter;;;Argument[0];xpathorg.dom4j.util;ProxyDocumentFactory;true;createPattern;;;Argument[0];xpathorg.dom4j.util;ProxyDocumentFactory;true;createXPath;;;Argument[0];xpathorg.dom4j.util;ProxyDocumentFactory;true;createXPathFilter;;;Argument[0];xpathorg.dom4j;DocumentFactory;true;createPattern;;;Argument[0];xpathorg.dom4j;DocumentFactory;true;createXPath;;;Argument[0];xpathorg.dom4j;DocumentFactory;true;createXPathFilter;;;Argument[0];xpathorg.dom4j;DocumentHelper;false;createPattern;;;Argument[0];xpathorg.dom4j;DocumentHelper;false;createXPath;;;Argument[0];xpathorg.dom4j;DocumentHelper;false;createXPathFilter;;;Argument[0];xpathorg.dom4j;DocumentHelper;false;selectNodes;;;Argument[0];xpathorg.dom4j;DocumentHelper;false;sort;;;Argument[1];xpathorg.dom4j;Node;true;createXPath;;;Argument[0];xpathorg.dom4j;Node;true;matches;;;Argument[0];xpathorg.dom4j;Node;true;numberValueOf;;;Argument[0];xpathorg.dom4j;Node;true;selectNodes;;;Argument[0..1];xpathorg.dom4j;Node;true;selectObject;;;Argument[0];xpathorg.dom4j;Node;true;selectSingleNode;;;Argument[0];xpathorg.dom4j;Node;true;valueOf;;;Argument[0];xpathorg.springframework.jdbc.core;JdbcTemplate;false;batchUpdate;(String[]);;Argument[0];sqlorg.springframework.jdbc.core;JdbcTemplate;false;batchUpdate;;;Argument[0];sqlorg.springframework.jdbc.core;JdbcTemplate;false;execute;;;Argument[0];sqlorg.springframework.jdbc.core;JdbcTemplate;false;query;;;Argument[0];sqlorg.springframework.jdbc.core;JdbcTemplate;false;queryForList;;;Argument[0];sqlorg.springframework.jdbc.core;JdbcTemplate;false;queryForMap;;;Argument[0];sqlorg.springframework.jdbc.core;JdbcTemplate;false;queryForObject;;;Argument[0];sqlorg.springframework.jdbc.core;JdbcTemplate;false;queryForRowSet;;;Argument[0];sqlorg.springframework.jdbc.core;JdbcTemplate;false;queryForStream;;;Argument[0];sqlorg.springframework.jdbc.core;JdbcTemplate;false;update;;;Argument[0];sqlorg.springframework.jdbc.object;BatchSqlUpdate;false;BatchSqlUpdate;;;Argument[1];sqlorg.springframework.jdbc.object;MappingSqlQuery;false;BatchSqlUpdate;;;Argument[1];sqlorg.springframework.jdbc.object;MappingSqlQueryWithParameters;false;BatchSqlUpdate;;;Argument[1];sqlorg.springframework.jdbc.object;RdbmsOperation;true;setSql;;;Argument[0];sqlorg.springframework.jdbc.object;SqlCall;false;SqlCall;;;Argument[1];sqlorg.springframework.jdbc.object;SqlFunction;false;SqlFunction;;;Argument[1];sqlorg.springframework.jdbc.object;SqlQuery;false;SqlQuery;;;Argument[1];sqlorg.springframework.jdbc.object;SqlUpdate;false;SqlUpdate;;;Argument[1];sqlorg.springframework.jdbc.object;UpdatableSqlQuery;false;UpdatableSqlQuery;;;Argument[1];sqlandroid.app;Activity;true;bindService;;;Argument[0];intent-startandroid.app;Activity;true;bindServiceAsUser;;;Argument[0];intent-startandroid.app;Activity;true;startActivityAsCaller;;;Argument[0];intent-startandroid.app;Activity;true;startActivityForResult;(Intent,int);;Argument[0];intent-startandroid.app;Activity;true;startActivityForResult;(Intent,int,Bundle);;Argument[0];intent-startandroid.app;Activity;true;startActivityForResult;(String,Intent,int,Bundle);;Argument[1];intent-startandroid.app;Activity;true;startActivityForResultAsUser;;;Argument[0];intent-startandroid.content;Context;true;sendBroadcast;;;Argument[0];intent-startandroid.content;Context;true;sendBroadcastAsUser;;;Argument[0];intent-startandroid.content;Context;true;sendBroadcastWithMultiplePermissions;;;Argument[0];intent-startandroid.content;Context;true;sendStickyBroadcast;;;Argument[0];intent-startandroid.content;Context;true;sendStickyBroadcastAsUser;;;Argument[0];intent-startandroid.content;Context;true;sendStickyOrderedBroadcast;;;Argument[0];intent-startandroid.content;Context;true;sendStickyOrderedBroadcastAsUser;;;Argument[0];intent-startandroid.content;Context;true;startActivities;;;Argument[0];intent-startandroid.content;Context;true;startActivity;;;Argument[0];intent-startandroid.content;Context;true;startActivityAsUser;;;Argument[0];intent-startandroid.content;Context;true;startActivityFromChild;;;Argument[1];intent-startandroid.content;Context;true;startActivityFromFragment;;;Argument[1];intent-startandroid.content;Context;true;startActivityIfNeeded;;;Argument[0];intent-startandroid.content;Context;true;startForegroundService;;;Argument[0];intent-startandroid.content;Context;true;startService;;;Argument[0];intent-startandroid.content;Context;true;startServiceAsUser;;;Argument[0];intent-startjava.io;FileOutputStream;false;FileOutputStream;;;Argument[0];create-filejava.io;FileWriter;false;FileWriter;;;Argument[0];create-filejava.io;RandomAccessFile;false;RandomAccessFile;;;Argument[0];create-filejava.net.http;HttpRequest$Builder;false;uri;;;Argument[0];open-urljava.net.http;HttpRequest;false;newBuilder;;;Argument[0];open-urljava.net;URL;false;openConnection;;;Argument[-1];open-urljava.net;URL;false;openStream;;;Argument[-1];open-urljava.net;URLClassLoader;false;URLClassLoader;(String,URL[],ClassLoader);;Argument[1];open-urljava.net;URLClassLoader;false;URLClassLoader;(String,URL[],ClassLoader,URLStreamHandlerFactory);;Argument[1];open-urljava.net;URLClassLoader;false;URLClassLoader;(URL[]);;Argument[0];open-urljava.net;URLClassLoader;false;URLClassLoader;(URL[],ClassLoader);;Argument[0];open-urljava.net;URLClassLoader;false;URLClassLoader;(URL[],ClassLoader,URLStreamHandlerFactory);;Argument[0];open-urljava.net;URLClassLoader;false;newInstance;;;Argument[0];open-urljava.nio.file;Files;false;copy;;;Argument[1];create-filejava.nio.file;Files;false;createDirectory;;;Argument[0];create-filejava.nio.file;Files;false;createFile;;;Argument[0];create-filejava.nio.file;Files;false;createLink;;;Argument[0];create-filejava.nio.file;Files;false;createSymbolicLink;;;Argument[0];create-filejava.nio.file;Files;false;createTempDirectory;;;Argument[0];create-filejava.nio.file;Files;false;createTempFile;;;Argument[0];create-filejava.nio.file;Files;false;move;;;Argument[1];create-filejava.nio.file;Files;false;newBufferedReader;;;Argument[0];create-filejava.nio.file;Files;false;newOutputStream;;;Argument[0];create-filejavax.net.ssl;HttpsURLConnection;true;setDefaultHostnameVerifier;;;Argument[0];set-hostname-verifierjavax.net.ssl;HttpsURLConnection;true;setHostnameVerifier;;;Argument[0];set-hostname-verifierjavax.validation;ConstraintValidatorContext;true;buildConstraintViolationWithTemplate;;;Argument[0];bean-validationorg.apache.http.client.methods;HttpDelete;false;HttpDelete;;;Argument[0];open-urlorg.apache.http.client.methods;HttpGet;false;HttpGet;;;Argument[0];open-urlorg.apache.http.client.methods;HttpHead;false;HttpHead;;;Argument[0];open-urlorg.apache.http.client.methods;HttpOptions;false;HttpOptions;;;Argument[0];open-urlorg.apache.http.client.methods;HttpPatch;false;HttpPatch;;;Argument[0];open-urlorg.apache.http.client.methods;HttpPost;false;HttpPost;;;Argument[0];open-urlorg.apache.http.client.methods;HttpPut;false;HttpPut;;;Argument[0];open-urlorg.apache.http.client.methods;HttpRequestBase;true;setURI;;;Argument[0];open-urlorg.apache.http.client.methods;HttpTrace;false;HttpTrace;;;Argument[0];open-urlorg.apache.http.client.methods;RequestBuilder;false;delete;;;Argument[0];open-urlorg.apache.http.client.methods;RequestBuilder;false;get;;;Argument[0];open-urlorg.apache.http.client.methods;RequestBuilder;false;head;;;Argument[0];open-urlorg.apache.http.client.methods;RequestBuilder;false;options;;;Argument[0];open-urlorg.apache.http.client.methods;RequestBuilder;false;patch;;;Argument[0];open-urlorg.apache.http.client.methods;RequestBuilder;false;post;;;Argument[0];open-urlorg.apache.http.client.methods;RequestBuilder;false;put;;;Argument[0];open-urlorg.apache.http.client.methods;RequestBuilder;false;setUri;;;Argument[0];open-urlorg.apache.http.client.methods;RequestBuilder;false;trace;;;Argument[0];open-urlorg.apache.http.message;BasicHttpEntityEnclosingRequest;false;BasicHttpEntityEnclosingRequest;(RequestLine);;Argument[0];open-urlorg.apache.http.message;BasicHttpEntityEnclosingRequest;false;BasicHttpEntityEnclosingRequest;(String,String);;Argument[1];open-urlorg.apache.http.message;BasicHttpEntityEnclosingRequest;false;BasicHttpEntityEnclosingRequest;(String,String,ProtocolVersion);;Argument[1];open-urlorg.apache.http.message;BasicHttpRequest;false;BasicHttpRequest;(RequestLine);;Argument[0];open-urlorg.apache.http.message;BasicHttpRequest;false;BasicHttpRequest;(String,String);;Argument[1];open-urlorg.apache.http.message;BasicHttpRequest;false;BasicHttpRequest;(String,String,ProtocolVersion);;Argument[1];open-urlorg.apache.http;HttpRequest;true;setURI;;;Argument[0];open-urlgroovy.lang;GroovyClassLoader;false;parseClass;(GroovyCodeSource);;Argument[0];groovygroovy.lang;GroovyClassLoader;false;parseClass;(GroovyCodeSource,boolean);;Argument[0];groovygroovy.lang;GroovyClassLoader;false;parseClass;(InputStream,String);;Argument[0];groovygroovy.lang;GroovyClassLoader;false;parseClass;(Reader,String);;Argument[0];groovygroovy.lang;GroovyClassLoader;false;parseClass;(String);;Argument[0];groovygroovy.lang;GroovyClassLoader;false;parseClass;(String,String);;Argument[0];groovygroovy.lang;GroovyShell;false;evaluate;(GroovyCodeSource);;Argument[0];groovygroovy.lang;GroovyShell;false;evaluate;(Reader);;Argument[0];groovygroovy.lang;GroovyShell;false;evaluate;(Reader,String);;Argument[0];groovygroovy.lang;GroovyShell;false;evaluate;(String);;Argument[0];groovygroovy.lang;GroovyShell;false;evaluate;(String,String);;Argument[0];groovygroovy.lang;GroovyShell;false;evaluate;(String,String,String);;Argument[0];groovygroovy.lang;GroovyShell;false;evaluate;(URI);;Argument[0];groovygroovy.lang;GroovyShell;false;parse;(Reader);;Argument[0];groovygroovy.lang;GroovyShell;false;parse;(Reader,String);;Argument[0];groovygroovy.lang;GroovyShell;false;parse;(String);;Argument[0];groovygroovy.lang;GroovyShell;false;parse;(String,String);;Argument[0];groovygroovy.lang;GroovyShell;false;parse;(URI);;Argument[0];groovygroovy.lang;GroovyShell;false;run;(GroovyCodeSource,List);;Argument[0];groovygroovy.lang;GroovyShell;false;run;(GroovyCodeSource,String[]);;Argument[0];groovygroovy.lang;GroovyShell;false;run;(Reader,String,List);;Argument[0];groovygroovy.lang;GroovyShell;false;run;(Reader,String,String[]);;Argument[0];groovygroovy.lang;GroovyShell;false;run;(String,String,List);;Argument[0];groovygroovy.lang;GroovyShell;false;run;(String,String,String[]);;Argument[0];groovygroovy.lang;GroovyShell;false;run;(URI,List);;Argument[0];groovygroovy.lang;GroovyShell;false;run;(URI,String[]);;Argument[0];groovygroovy.util;Eval;false;me;(String);;Argument[0];groovygroovy.util;Eval;false;me;(String,Object,String);;Argument[2];groovygroovy.util;Eval;false;x;(Object,String);;Argument[1];groovygroovy.util;Eval;false;xy;(Object,Object,String);;Argument[2];groovygroovy.util;Eval;false;xyz;(Object,Object,Object,String);;Argument[3];groovyorg.codehaus.groovy.control;CompilationUnit;false;compile;;;Argument[-1];groovyorg.apache.commons.jexl2;Expression;false;callable;;;Argument[-1];jexlorg.apache.commons.jexl2;Expression;false;evaluate;;;Argument[-1];jexlorg.apache.commons.jexl2;JexlEngine;false;getProperty;(JexlContext,Object,String);;Argument[2];jexlorg.apache.commons.jexl2;JexlEngine;false;getProperty;(Object,String);;Argument[1];jexlorg.apache.commons.jexl2;JexlEngine;false;setProperty;(JexlContext,Object,String,Object);;Argument[2];jexlorg.apache.commons.jexl2;JexlEngine;false;setProperty;(Object,String,Object);;Argument[1];jexlorg.apache.commons.jexl2;JexlExpression;false;callable;;;Argument[-1];jexlorg.apache.commons.jexl2;JexlExpression;false;evaluate;;;Argument[-1];jexlorg.apache.commons.jexl2;JexlScript;false;callable;;;Argument[-1];jexlorg.apache.commons.jexl2;JexlScript;false;execute;;;Argument[-1];jexlorg.apache.commons.jexl2;Script;false;callable;;;Argument[-1];jexlorg.apache.commons.jexl2;Script;false;execute;;;Argument[-1];jexlorg.apache.commons.jexl2;UnifiedJEXL$Expression;false;evaluate;;;Argument[-1];jexlorg.apache.commons.jexl2;UnifiedJEXL$Expression;false;prepare;;;Argument[-1];jexlorg.apache.commons.jexl2;UnifiedJEXL$Template;false;evaluate;;;Argument[-1];jexlorg.apache.commons.jexl3;Expression;false;callable;;;Argument[-1];jexlorg.apache.commons.jexl3;Expression;false;evaluate;;;Argument[-1];jexlorg.apache.commons.jexl3;JexlEngine;false;getProperty;(JexlContext,Object,String);;Argument[2];jexlorg.apache.commons.jexl3;JexlEngine;false;getProperty;(Object,String);;Argument[1];jexlorg.apache.commons.jexl3;JexlEngine;false;setProperty;(JexlContext,Object,String);;Argument[2];jexlorg.apache.commons.jexl3;JexlEngine;false;setProperty;(Object,String,Object);;Argument[1];jexlorg.apache.commons.jexl3;JexlExpression;false;callable;;;Argument[-1];jexlorg.apache.commons.jexl3;JexlExpression;false;evaluate;;;Argument[-1];jexlorg.apache.commons.jexl3;JexlScript;false;callable;;;Argument[-1];jexlorg.apache.commons.jexl3;JexlScript;false;execute;;;Argument[-1];jexlorg.apache.commons.jexl3;JxltEngine$Expression;false;evaluate;;;Argument[-1];jexlorg.apache.commons.jexl3;JxltEngine$Expression;false;prepare;;;Argument[-1];jexlorg.apache.commons.jexl3;JxltEngine$Template;false;evaluate;;;Argument[-1];jexlorg.apache.commons.jexl3;Script;false;callable;;;Argument[-1];jexlorg.apache.commons.jexl3;Script;false;execute;;;Argument[-1];jexljavax.management.remote;JMXConnector;true;connect;;;Argument[-1];jndi-injectionjavax.management.remote;JMXConnectorFactory;false;connect;;;Argument[0];jndi-injectionjavax.naming;Context;true;list;;;Argument[0];jndi-injectionjavax.naming;Context;true;listBindings;;;Argument[0];jndi-injectionjavax.naming;Context;true;lookup;;;Argument[0];jndi-injectionjavax.naming;Context;true;lookupLink;;;Argument[0];jndi-injectionjavax.naming;Context;true;rename;;;Argument[0];jndi-injectionjavax.naming;InitialContext;true;doLookup;;;Argument[0];jndi-injectionorg.apache.shiro.jndi;JndiTemplate;false;lookup;;;Argument[0];jndi-injectionorg.springframework.jndi;JndiTemplate;false;lookup;;;Argument[0];jndi-injectionorg.springframework.ldap.core;LdapOperations;true;findByDn;;;Argument[0];jndi-injectionorg.springframework.ldap.core;LdapOperations;true;list;;;Argument[0];jndi-injectionorg.springframework.ldap.core;LdapOperations;true;listBindings;;;Argument[0];jndi-injectionorg.springframework.ldap.core;LdapOperations;true;lookup;;;Argument[0];jndi-injectionorg.springframework.ldap.core;LdapOperations;true;lookupContext;;;Argument[0];jndi-injectionorg.springframework.ldap.core;LdapOperations;true;rename;;;Argument[0];jndi-injectionorg.springframework.ldap.core;LdapOperations;true;search;(Name,String,ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap.core;LdapOperations;true;search;(Name,String,int,ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap.core;LdapOperations;true;search;(Name,String,int,String[],ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap.core;LdapOperations;true;search;(String,String,ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap.core;LdapOperations;true;search;(String,String,int,ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap.core;LdapOperations;true;search;(String,String,int,String[],ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap.core;LdapOperations;true;searchForObject;(Name,String,ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap.core;LdapOperations;true;searchForObject;(String,String,ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap;LdapOperations;true;findByDn;;;Argument[0];jndi-injectionorg.springframework.ldap;LdapOperations;true;list;;;Argument[0];jndi-injectionorg.springframework.ldap;LdapOperations;true;listBindings;;;Argument[0];jndi-injectionorg.springframework.ldap;LdapOperations;true;lookup;;;Argument[0];jndi-injectionorg.springframework.ldap;LdapOperations;true;lookupContext;;;Argument[0];jndi-injectionorg.springframework.ldap;LdapOperations;true;rename;;;Argument[0];jndi-injectionorg.springframework.ldap;LdapOperations;true;search;(Name,String,ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap;LdapOperations;true;search;(Name,String,int,ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap;LdapOperations;true;search;(Name,String,int,String[],ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap;LdapOperations;true;search;(String,String,ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap;LdapOperations;true;search;(String,String,int,ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap;LdapOperations;true;search;(String,String,int,String[],ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap;LdapOperations;true;searchForObject;(Name,String,ContextMapper);;Argument[0];jndi-injectionorg.springframework.ldap;LdapOperations;true;searchForObject;(String,String,ContextMapper);;Argument[0];jndi-injectioncom.unboundid.ldap.sdk;LDAPConnection;false;asyncSearch;;;Argument[0];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;search;(ReadOnlySearchRequest);;Argument[0];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;search;(SearchRequest);;Argument[0];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;search;(SearchResultListener,String,SearchScope,DereferencePolicy,int,int,boolean,Filter,String[]);;Argument[0..7];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;search;(SearchResultListener,String,SearchScope,DereferencePolicy,int,int,boolean,String,String[]);;Argument[0..7];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;search;(SearchResultListener,String,SearchScope,Filter,String[]);;Argument[0..3];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;search;(SearchResultListener,String,SearchScope,String,String[]);;Argument[0..3];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;search;(String,SearchScope,DereferencePolicy,int,int,boolean,Filter,String[]);;Argument[0..6];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;search;(String,SearchScope,DereferencePolicy,int,int,boolean,String,String[]);;Argument[0..6];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;search;(String,SearchScope,Filter,String[]);;Argument[0..2];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;search;(String,SearchScope,String,String[]);;Argument[0..2];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;searchForEntry;(ReadOnlySearchRequest);;Argument[0];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;searchForEntry;(SearchRequest);;Argument[0];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;searchForEntry;(String,SearchScope,DereferencePolicy,int,boolean,Filter,String[]);;Argument[0..5];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;searchForEntry;(String,SearchScope,DereferencePolicy,int,boolean,String,String[]);;Argument[0..5];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;searchForEntry;(String,SearchScope,Filter,String[]);;Argument[0..2];ldapcom.unboundid.ldap.sdk;LDAPConnection;false;searchForEntry;(String,SearchScope,String,String[]);;Argument[0..2];ldapjavax.naming.directory;DirContext;true;search;;;Argument[0..1];ldaporg.apache.directory.ldap.client.api;LdapConnection;true;search;;;Argument[0..2];ldaporg.springframework.ldap.core;LdapTemplate;false;authenticate;(LdapQuery,String);;Argument[0];ldaporg.springframework.ldap.core;LdapTemplate;false;authenticate;(Name,String,String);;Argument[0..1];ldaporg.springframework.ldap.core;LdapTemplate;false;authenticate;(Name,String,String,AuthenticatedLdapEntryContextCallback);;Argument[0..1];ldaporg.springframework.ldap.core;LdapTemplate;false;authenticate;(Name,String,String,AuthenticatedLdapEntryContextCallback,AuthenticationErrorCallback);;Argument[0..1];ldaporg.springframework.ldap.core;LdapTemplate;false;authenticate;(Name,String,String,AuthenticationErrorCallback);;Argument[0..1];ldaporg.springframework.ldap.core;LdapTemplate;false;authenticate;(String,String,String);;Argument[0..1];ldaporg.springframework.ldap.core;LdapTemplate;false;authenticate;(String,String,String,AuthenticatedLdapEntryContextCallback);;Argument[0..1];ldaporg.springframework.ldap.core;LdapTemplate;false;authenticate;(String,String,String,AuthenticatedLdapEntryContextCallback,AuthenticationErrorCallback);;Argument[0..1];ldaporg.springframework.ldap.core;LdapTemplate;false;authenticate;(String,String,String,AuthenticationErrorCallback);;Argument[0..1];ldaporg.springframework.ldap.core;LdapTemplate;false;find;;;Argument[0..1];ldaporg.springframework.ldap.core;LdapTemplate;false;findOne;;;Argument[0..1];ldaporg.springframework.ldap.core;LdapTemplate;false;search;;;Argument[0..1];ldaporg.springframework.ldap.core;LdapTemplate;false;searchForContext;;;Argument[0..1];ldaporg.springframework.ldap.core;LdapTemplate;false;searchForObject;;;Argument[0..1];ldapandroid.content;ContentProvider;true;delete;(Uri,String,String[]);;Argument[1];sqlandroid.content;ContentProvider;true;query;(Uri,String[],String,String[],String);;Argument[2];sqlandroid.content;ContentProvider;true;query;(Uri,String[],String,String[],String,CancellationSignal);;Argument[2];sqlandroid.content;ContentProvider;true;update;(Uri,ContentValues,String,String[]);;Argument[2];sqlandroid.content;ContentResolver;true;delete;(Uri,String,String[]);;Argument[1];sqlandroid.content;ContentResolver;true;query;(Uri,String[],String,String[],String);;Argument[2];sqlandroid.content;ContentResolver;true;query;(Uri,String[],String,String[],String,CancellationSignal);;Argument[2];sqlandroid.content;ContentResolver;true;update;(Uri,ContentValues,String,String[]);;Argument[2];sqlandroid.database.sqlite;SQLiteDatabase;false;compileStatement;(String);;Argument[0];sqlandroid.database.sqlite;SQLiteDatabase;false;delete;(String,String,String[]);;Argument[0..1];sqlandroid.database.sqlite;SQLiteDatabase;false;execPerConnectionSQL;(String,Object[]);;Argument[0];sqlandroid.database.sqlite;SQLiteDatabase;false;execSQL;(String);;Argument[0];sqlandroid.database.sqlite;SQLiteDatabase;false;execSQL;(String,Object[]);;Argument[0];sqlandroid.database.sqlite;SQLiteDatabase;false;query;(String,String[],String,String[],String,String,String);;Argument[0..2];sqlandroid.database.sqlite;SQLiteDatabase;false;query;(String,String[],String,String[],String,String,String);;Argument[4..6];sqlandroid.database.sqlite;SQLiteDatabase;false;query;(String,String[],String,String[],String,String,String,String);;Argument[0];sqlandroid.database.sqlite;SQLiteDatabase;false;query;(String,String[],String,String[],String,String,String,String);;Argument[1];sqlandroid.database.sqlite;SQLiteDatabase;false;query;(String,String[],String,String[],String,String,String,String);;Argument[2];sqlandroid.database.sqlite;SQLiteDatabase;false;query;(String,String[],String,String[],String,String,String,String);;Argument[4..7];sqlandroid.database.sqlite;SQLiteDatabase;false;query;(boolean,String,String[],String,String[],String,String,String,String);;Argument[1];sqlandroid.database.sqlite;SQLiteDatabase;false;query;(boolean,String,String[],String,String[],String,String,String,String);;Argument[2];sqlandroid.database.sqlite;SQLiteDatabase;false;query;(boolean,String,String[],String,String[],String,String,String,String);;Argument[3];sqlandroid.database.sqlite;SQLiteDatabase;false;query;(boolean,String,String[],String,String[],String,String,String,String);;Argument[5..8];sqlandroid.database.sqlite;SQLiteDatabase;false;query;(boolean,String,String[],String,String[],String,String,String,String,CancellationSignal);;Argument[1];sqlandroid.database.sqlite;SQLiteDatabase;false;query;(boolean,String,String[],String,String[],String,String,String,String,CancellationSignal);;Argument[2];sqlandroid.database.sqlite;SQLiteDatabase;false;query;(boolean,String,String[],String,String[],String,String,String,String,CancellationSignal);;Argument[3];sqlandroid.database.sqlite;SQLiteDatabase;false;query;(boolean,String,String[],String,String[],String,String,String,String,CancellationSignal);;Argument[5..8];sqlandroid.database.sqlite;SQLiteDatabase;false;queryWithFactory;(CursorFactory,boolean,String,String[],String,String[],String,String,String,String);;Argument[2];sqlandroid.database.sqlite;SQLiteDatabase;false;queryWithFactory;(CursorFactory,boolean,String,String[],String,String[],String,String,String,String);;Argument[3];sqlandroid.database.sqlite;SQLiteDatabase;false;queryWithFactory;(CursorFactory,boolean,String,String[],String,String[],String,String,String,String);;Argument[4];sqlandroid.database.sqlite;SQLiteDatabase;false;queryWithFactory;(CursorFactory,boolean,String,String[],String,String[],String,String,String,String);;Argument[6..9];sqlandroid.database.sqlite;SQLiteDatabase;false;queryWithFactory;(CursorFactory,boolean,String,String[],String,String[],String,String,String,String,CancellationSignal);;Argument[2];sqlandroid.database.sqlite;SQLiteDatabase;false;queryWithFactory;(CursorFactory,boolean,String,String[],String,String[],String,String,String,String,CancellationSignal);;Argument[3];sqlandroid.database.sqlite;SQLiteDatabase;false;queryWithFactory;(CursorFactory,boolean,String,String[],String,String[],String,String,String,String,CancellationSignal);;Argument[4];sqlandroid.database.sqlite;SQLiteDatabase;false;queryWithFactory;(CursorFactory,boolean,String,String[],String,String[],String,String,String,String,CancellationSignal);;Argument[6..9];sqlandroid.database.sqlite;SQLiteDatabase;false;rawQuery;(String,String[]);;Argument[0];sqlandroid.database.sqlite;SQLiteDatabase;false;rawQuery;(String,String[],CancellationSignal);;Argument[0];sqlandroid.database.sqlite;SQLiteDatabase;false;rawQueryWithFactory;(CursorFactory,String,String[],String);;Argument[1];sqlandroid.database.sqlite;SQLiteDatabase;false;rawQueryWithFactory;(CursorFactory,String,String[],String,CancellationSignal);;Argument[1];sqlandroid.database.sqlite;SQLiteDatabase;false;update;(String,ContentValues,String,String[]);;Argument[0];sqlandroid.database.sqlite;SQLiteDatabase;false;update;(String,ContentValues,String,String[]);;Argument[2];sqlandroid.database.sqlite;SQLiteDatabase;false;updateWithOnConflict;(String,ContentValues,String,String[],int);;Argument[0];sqlandroid.database.sqlite;SQLiteDatabase;false;updateWithOnConflict;(String,ContentValues,String,String[],int);;Argument[2];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;delete;(SQLiteDatabase,String,String[]);;Argument[-1];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;delete;(SQLiteDatabase,String,String[]);;Argument[1];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;insert;(SQLiteDatabase,ContentValues);;Argument[-1];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;query;(SQLiteDatabase,String[],String,String[],String,String,String);;Argument[-1];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;query;(SQLiteDatabase,String[],String,String[],String,String,String);;Argument[1];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;query;(SQLiteDatabase,String[],String,String[],String,String,String);;Argument[2];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;query;(SQLiteDatabase,String[],String,String[],String,String,String);;Argument[4..6];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;query;(SQLiteDatabase,String[],String,String[],String,String,String,String);;Argument[-1];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;query;(SQLiteDatabase,String[],String,String[],String,String,String,String);;Argument[1];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;query;(SQLiteDatabase,String[],String,String[],String,String,String,String);;Argument[2];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;query;(SQLiteDatabase,String[],String,String[],String,String,String,String);;Argument[4..7];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;query;(SQLiteDatabase,String[],String,String[],String,String,String,String,CancellationSignal);;Argument[-1];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;query;(SQLiteDatabase,String[],String,String[],String,String,String,String,CancellationSignal);;Argument[1];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;query;(SQLiteDatabase,String[],String,String[],String,String,String,String,CancellationSignal);;Argument[2];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;query;(SQLiteDatabase,String[],String,String[],String,String,String,String,CancellationSignal);;Argument[4..7];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;update;(SQLiteDatabase,ContentValues,String,String[]);;Argument[-1];sqlandroid.database.sqlite;SQLiteQueryBuilder;true;update;(SQLiteDatabase,ContentValues,String,String[]);;Argument[2];sqlandroid.database;DatabaseUtils;false;blobFileDescriptorForQuery;(SQLiteDatabase,String,String[]);;Argument[1];sqlandroid.database;DatabaseUtils;false;createDbFromSqlStatements;(Context,String,int,String);;Argument[3];sqlandroid.database;DatabaseUtils;false;longForQuery;(SQLiteDatabase,String,String[]);;Argument[1];sqlandroid.database;DatabaseUtils;false;queryNumEntries;(SQLiteDatabase,String);;Argument[1];sqlandroid.database;DatabaseUtils;false;queryNumEntries;(SQLiteDatabase,String,String);;Argument[1..2];sqlandroid.database;DatabaseUtils;false;queryNumEntries;(SQLiteDatabase,String,String,String[]);;Argument[1..2];sqlandroid.database;DatabaseUtils;false;stringForQuery;(SQLiteDatabase,String,String[]);;Argument[1];sqlArgument[0]org.jooqPlainSQLAnnotatedloadDataxssorg.hibernateSessioncreateSQLQueryjavax.ws.rs.clientClientjakarta.ws.rs.clientQueryProducerResponseStreamResponseWriterevaluateJavascriptloadDataWithBaseURLArgument[1]javax.ws.rs.coreseeOtherurl-redirectTransformerArgument[-1]xsltjakarta.ws.rs.coreorg.apache.ibatis.jdbcSqlRunnernet.sf.saxon.s9apiXsltTransformerSharedSessionContractXslt30TransformertemporaryRedirectcallFunctioncallTemplatecom.google.common.ioreadLinesurl-open-streamResponseBuilderheader-splittingapplyTemplatesasByteSource(URL,Charset)Argument[0..1](URL,OutputStream)org.apache.hc.core5.httpHttpEntityContainerasCharSourceorg.apache.http.utilEntityUtilsupdateEntity(HttpResponse,HttpEntity)information-leakjavax.scriptCompiledScriptevalmvelorg.mvel2.compilerAccessorCompiledAccExpressionCompiledExpressiongetDirectValueExecutableStatementorg.mvel2.jsr223MvelCompiledScriptMvelScriptEngineorg.mvel2.templatesTemplateRuntimeorg.mvel2MVELevalToBooleanevalToStringexecuteAllExpressionexecuteExpressionexecuteSetExpressionMVELRuntimecom.opensymphony.xwork2.ognlOgnlUtilcallMethodognl-injectionognl.enhanceExpressionAccessorognlOgnlorg.apache.commons.ognl.enhanceorg.apache.commons.ognlRequestEntity(HttpMethod,URI)(MultiValueMap,HttpMethod,URI)Argument[2](Object,HttpMethod,URI)(Object,HttpMethod,URI,Type)(Object,MultiValueMap,HttpMethod,URI)Argument[3](Object,MultiValueMap,HttpMethod,URI,Type)getForObjectheadForHeadersoptionsForAllowpatchForObjectpostForLocationpostForObjectorg.springframework.web.reactive.function.clientWebClient$BuilderbaseUrlWebClientjavax.xml.xpathXPathxpathevaluateExpressionorg.dom4j.treeAbstractNodecreatePatterncreateXPathFilterorg.dom4j.utilProxyDocumentFactorycreateXPathorg.dom4jDocumentFactoryDocumentHelperselectNodesnumberValueOfselectObjectselectSingleNodeorg.springframework.jdbc.objectBatchSqlUpdateMappingSqlQueryMappingSqlQueryWithParametersRdbmsOperationsetSqlSqlCallSqlFunctionSqlQuerySqlUpdateUpdatableSqlQuerybindServiceintent-startbindServiceAsUserstartActivityAsCallerstartActivityForResult(Intent,int)(Intent,int,Bundle)(String,Intent,int,Bundle)startActivityForResultAsUsersendBroadcastsendBroadcastAsUsersendBroadcastWithMultiplePermissionssendStickyBroadcastsendStickyBroadcastAsUsersendStickyOrderedBroadcastsendStickyOrderedBroadcastAsUserstartActivitiesstartActivitystartActivityAsUserstartActivityFromChildstartActivityFromFragmentstartActivityIfNeededstartForegroundServicestartServicestartServiceAsUserFileOutputStreamcreate-fileFileWriterRandomAccessFileHttpRequest$BuilderURLClassLoader(String,URL[],ClassLoader)(String,URL[],ClassLoader,URLStreamHandlerFactory)(URL[],ClassLoader)(URL[],ClassLoader,URLStreamHandlerFactory)FilescreateFilecreateTempDirectorynewBufferedReaderHttpsURLConnectionsetDefaultHostnameVerifierset-hostname-verifierConstraintValidatorContextbuildConstraintViolationWithTemplatebean-validationHttpDeleteHttpHeadHttpOptionsHttpPatchHttpPostHttpPutHttpTraceRequestBuildersetUriBasicHttpEntityEnclosingRequest(RequestLine)(String,String,ProtocolVersion)BasicHttpRequestgroovy.langGroovyClassLoaderparseClass(GroovyCodeSource)groovy(GroovyCodeSource,boolean)GroovyShell(GroovyCodeSource,List)(GroovyCodeSource,String[])(Reader,String,List)(Reader,String,String[])(String,String,List)(String,String,String[])(URI,List)(URI,String[])groovy.utilEvalmexy(Object,Object,String)xyz(Object,Object,Object,String)org.codehaus.groovy.controlCompilationUnitorg.apache.commons.jexl2ExpressioncallablejexlJexlEngine(JexlContext,Object,String)(JexlContext,Object,String,Object)JexlExpressionJexlScriptScriptUnifiedJEXL$ExpressionUnifiedJEXL$Templateorg.apache.commons.jexl3JxltEngine$ExpressionJxltEngine$Templatejavax.management.remoteJMXConnectorjndi-injectionJMXConnectorFactoryjavax.naminglistBindingslookupLinkInitialContextdoLookuporg.apache.shiro.jndiJndiTemplateorg.springframework.jndiorg.springframework.ldap.coreLdapOperationsfindByDnlookupContext(Name,String,ContextMapper)(Name,String,int,ContextMapper)(Name,String,int,String[],ContextMapper)(String,String,ContextMapper)(String,String,int,ContextMapper)(String,String,int,String[],ContextMapper)searchForObjectorg.springframework.ldapcom.unboundid.ldap.sdkLDAPConnectionasyncSearchldap(ReadOnlySearchRequest)(SearchRequest)(SearchResultListener,String,SearchScope,DereferencePolicy,int,int,boolean,Filter,String[])Argument[0..7](SearchResultListener,String,SearchScope,DereferencePolicy,int,int,boolean,String,String[])(SearchResultListener,String,SearchScope,Filter,String[])Argument[0..3](SearchResultListener,String,SearchScope,String,String[])(String,SearchScope,DereferencePolicy,int,int,boolean,Filter,String[])Argument[0..6](String,SearchScope,DereferencePolicy,int,int,boolean,String,String[])(String,SearchScope,Filter,String[])Argument[0..2](String,SearchScope,String,String[])searchForEntry(String,SearchScope,DereferencePolicy,int,boolean,Filter,String[])Argument[0..5](String,SearchScope,DereferencePolicy,int,boolean,String,String[])javax.naming.directoryDirContextorg.apache.directory.ldap.client.apiLdapConnectionLdapTemplate(LdapQuery,String)(Name,String,String)(Name,String,String,AuthenticatedLdapEntryContextCallback)(Name,String,String,AuthenticatedLdapEntryContextCallback,AuthenticationErrorCallback)(Name,String,String,AuthenticationErrorCallback)(String,String,String,AuthenticatedLdapEntryContextCallback)(String,String,String,AuthenticatedLdapEntryContextCallback,AuthenticationErrorCallback)(String,String,String,AuthenticationErrorCallback)searchForContextandroid.database.sqliteSQLiteDatabasecompileStatementexecPerConnectionSQLexecSQL(String,String[],String,String[],String,String,String)Argument[4..6](String,String[],String,String[],String,String,String,String)Argument[4..7](boolean,String,String[],String,String[],String,String,String,String)Argument[5..8](boolean,String,String[],String,String[],String,String,String,String,CancellationSignal)queryWithFactory(CursorFactory,boolean,String,String[],String,String[],String,String,String,String)Argument[4]Argument[6..9](CursorFactory,boolean,String,String[],String,String[],String,String,String,String,CancellationSignal)rawQuery(String,String[],CancellationSignal)rawQueryWithFactory(CursorFactory,String,String[],String)(CursorFactory,String,String[],String,CancellationSignal)(String,ContentValues,String,String[])updateWithOnConflict(String,ContentValues,String,String[],int)SQLiteQueryBuilder(SQLiteDatabase,String,String[])(SQLiteDatabase,ContentValues)(SQLiteDatabase,String[],String,String[],String,String,String)(SQLiteDatabase,String[],String,String[],String,String,String,String)(SQLiteDatabase,String[],String,String[],String,String,String,String,CancellationSignal)(SQLiteDatabase,ContentValues,String,String[])android.databaseDatabaseUtilsblobFileDescriptorForQuerycreateDbFromSqlStatements(Context,String,int,String)longForQueryqueryNumEntries(SQLiteDatabase,String)(SQLiteDatabase,String,String)Argument[1..2](SQLiteDatabase,String,String,String[])stringForQuery.json.stream;JsonParserFactory;false;createParser;;;Argument[0];ReturnValue;taint.json;Json;false;createArrayBuilder;(Collection);;Element of Argument[0];ReturnValue;taint.json;Json;false;createArrayBuilder;(JsonArray);;Argument[0];ReturnValue;taint.json;Json;false;createDiff;;;Argument[0..1];ReturnValue;taint.json;Json;false;createMergeDiff;;;Argument[0..1];ReturnValue;taint.json;Json;false;createMergePatch;;;Argument[0];ReturnValue;taint.json;Json;false;createObjectBuilder;(JsonObject);;Argument[0];ReturnValue;taint.json;Json;false;createObjectBuilder;(Map);;MapKey of Argument[0];ReturnValue;taint.json;Json;false;createObjectBuilder;(Map);;MapValue of Argument[0];ReturnValue;taint.json;Json;false;createPatch;;;Argument[0];ReturnValue;taint.json;Json;false;createPatchBuilder;;;Argument[0];ReturnValue;taint.json;Json;false;createPointer;;;Argument[0];ReturnValue;taint.json;Json;false;createReader;;;Argument[0];ReturnValue;taint.json;Json;false;createValue;;;Argument[0];ReturnValue;taint.json;Json;false;createWriter;;;Argument[0];ReturnValue;taint.json;Json;false;decodePointer;;;Argument[0];ReturnValue;taint.json;Json;false;encodePointer;;;Argument[0];ReturnValue;taint.json;JsonArray;false;getBoolean;;;Argument[-1];ReturnValue;taint.json;JsonArray;false;getBoolean;;;Argument[1];ReturnValue;value.json;JsonArray;false;getInt;;;Argument[-1];ReturnValue;taint.json;JsonArray;false;getInt;;;Argument[1];ReturnValue;value.json;JsonArray;false;getJsonArray;;;Argument[-1];ReturnValue;taint.json;JsonArray;false;getJsonNumber;;;Argument[-1];ReturnValue;taint.json;JsonArray;false;getJsonObject;;;Argument[-1];ReturnValue;taint.json;JsonArray;false;getJsonString;;;Argument[-1];ReturnValue;taint.json;JsonArray;false;getString;;;Argument[-1];ReturnValue;taint.json;JsonArray;false;getString;;;Argument[1];ReturnValue;value.json;JsonArray;false;getValuesAs;;;Argument[-1];ReturnValue;taint.json;JsonArrayBuilder;false;add;(BigDecimal);;Argument[0];Argument[-1];taint.json;JsonArrayBuilder;false;add;(BigInteger);;Argument[0];Argument[-1];taint.json;JsonArrayBuilder;false;add;(JsonArrayBuilder);;Argument[0];Argument[-1];taint.json;JsonArrayBuilder;false;add;(JsonObjectBuilder);;Argument[0];Argument[-1];taint.json;JsonArrayBuilder;false;add;(JsonValue);;Argument[0];Argument[-1];taint.json;JsonArrayBuilder;false;add;(String);;Argument[0];Argument[-1];taint.json;JsonArrayBuilder;false;add;(boolean);;Argument[0];Argument[-1];taint.json;JsonArrayBuilder;false;add;(double);;Argument[0];Argument[-1];taint.json;JsonArrayBuilder;false;add;(int);;Argument[0];Argument[-1];taint.json;JsonArrayBuilder;false;add;(int,BigDecimal);;Argument[1];Argument[-1];taint.json;JsonArrayBuilder;false;add;(int,BigInteger);;Argument[1];Argument[-1];taint.json;JsonArrayBuilder;false;add;(int,JsonArrayBuilder);;Argument[1];Argument[-1];taint.json;JsonArrayBuilder;false;add;(int,JsonObjectBuilder);;Argument[1];Argument[-1];taint.json;JsonArrayBuilder;false;add;(int,JsonValue);;Argument[1];Argument[-1];taint.json;JsonArrayBuilder;false;add;(int,String);;Argument[1];Argument[-1];taint.json;JsonArrayBuilder;false;add;(int,boolean);;Argument[1];Argument[-1];taint.json;JsonArrayBuilder;false;add;(int,double);;Argument[1];Argument[-1];taint.json;JsonArrayBuilder;false;add;(int,int);;Argument[1];Argument[-1];taint.json;JsonArrayBuilder;false;add;(int,long);;Argument[1];Argument[-1];taint.json;JsonArrayBuilder;false;add;(long);;Argument[0];Argument[-1];taint.json;JsonArrayBuilder;false;add;;;Argument[-1];ReturnValue;value.json;JsonArrayBuilder;false;addAll;;;Argument[-1];ReturnValue;value.json;JsonArrayBuilder;false;addAll;;;Argument[0];Argument[-1];taint.json;JsonArrayBuilder;false;addNull;;;Argument[-1];ReturnValue;value.json;JsonArrayBuilder;false;build;;;Argument[-1];ReturnValue;taint.json;JsonArrayBuilder;false;remove;;;Argument[-1];ReturnValue;value.json;JsonArrayBuilder;false;set;;;Argument[-1];ReturnValue;value.json;JsonArrayBuilder;false;set;;;Argument[1];Argument[-1];taint.json;JsonArrayBuilder;false;setNull;;;Argument[-1];ReturnValue;value.json;JsonMergePatch;false;apply;;;Argument[-1];ReturnValue;taint.json;JsonMergePatch;false;apply;;;Argument[0];ReturnValue;taint.json;JsonMergePatch;false;toJsonValue;;;Argument[-1];ReturnValue;taint.json;JsonNumber;false;bigDecimalValue;;;Argument[-1];ReturnValue;taint.json;JsonNumber;false;bigIntegerValue;;;Argument[-1];ReturnValue;taint.json;JsonNumber;false;bigIntegerValueExact;;;Argument[-1];ReturnValue;taint.json;JsonNumber;false;doubleValue;;;Argument[-1];ReturnValue;taint.json;JsonNumber;false;intValue;;;Argument[-1];ReturnValue;taint.json;JsonNumber;false;intValueExact;;;Argument[-1];ReturnValue;taint.json;JsonNumber;false;longValue;;;Argument[-1];ReturnValue;taint.json;JsonNumber;false;longValueExact;;;Argument[-1];ReturnValue;taint.json;JsonNumber;false;numberValue;;;Argument[-1];ReturnValue;taint.json;JsonObject;false;getBoolean;;;Argument[-1];ReturnValue;taint.json;JsonObject;false;getBoolean;;;Argument[1];ReturnValue;value.json;JsonObject;false;getInt;;;Argument[-1];ReturnValue;taint.json;JsonObject;false;getInt;;;Argument[1];ReturnValue;value.json;JsonObject;false;getJsonArray;;;Argument[-1];ReturnValue;taint.json;JsonObject;false;getJsonNumber;;;Argument[-1];ReturnValue;taint.json;JsonObject;false;getJsonObject;;;Argument[-1];ReturnValue;taint.json;JsonObject;false;getJsonString;;;Argument[-1];ReturnValue;taint.json;JsonObject;false;getString;;;Argument[-1];ReturnValue;taint.json;JsonObject;false;getString;;;Argument[1];ReturnValue;value.json;JsonObjectBuilder;false;add;;;Argument[-1];ReturnValue;value.json;JsonObjectBuilder;false;add;;;Argument[1];Argument[-1];taint.json;JsonObjectBuilder;false;addAll;;;Argument[-1];ReturnValue;value.json;JsonObjectBuilder;false;addAll;;;Argument[0];ReturnValue;value.json;JsonObjectBuilder;false;addNull;;;Argument[-1];ReturnValue;value.json;JsonObjectBuilder;false;build;;;Argument[-1];ReturnValue;taint.json;JsonObjectBuilder;false;remove;;;Argument[-1];ReturnValue;value.json;JsonPatch;false;apply;;;Argument[-1];ReturnValue;taint.json;JsonPatch;false;apply;;;Argument[0];ReturnValue;taint.json;JsonPatch;false;toJsonArray;;;Argument[-1];ReturnValue;taint.json;JsonPatchBuilder;false;add;;;Argument[-1];ReturnValue;value.json;JsonPatchBuilder;false;add;;;Argument[0..1];ReturnValue;taint.json;JsonPatchBuilder;false;build;;;Argument[-1];ReturnValue;taint.json;JsonPatchBuilder;false;copy;;;Argument[-1];ReturnValue;value.json;JsonPatchBuilder;false;copy;;;Argument[0..1];ReturnValue;taint.json;JsonPatchBuilder;false;move;;;Argument[-1];ReturnValue;value.json;JsonPatchBuilder;false;move;;;Argument[0..1];ReturnValue;taint.json;JsonPatchBuilder;false;remove;;;Argument[-1];ReturnValue;value.json;JsonPatchBuilder;false;remove;;;Argument[0];ReturnValue;taint.json;JsonPatchBuilder;false;replace;;;Argument[-1];ReturnValue;value.json;JsonPatchBuilder;false;replace;;;Argument[0..1];ReturnValue;taint.json;JsonPatchBuilder;false;test;;;Argument[-1];ReturnValue;value.json;JsonPatchBuilder;false;test;;;Argument[0..1];ReturnValue;taint.json;JsonPointer;false;add;;;Argument[-1];ReturnValue;taint.json;JsonPointer;false;add;;;Argument[0..1];ReturnValue;taint.json;JsonPointer;false;getValue;;;Argument[0];ReturnValue;taint.json;JsonPointer;false;remove;;;Argument[0];ReturnValue;taint.json;JsonPointer;false;replace;;;Argument[0..1];ReturnValue;taint.json;JsonPointer;false;toString;;;Argument[-1];ReturnValue;taint.json;JsonReader;false;read;;;Argument[-1];ReturnValue;taint.json;JsonReader;false;readArray;;;Argument[-1];ReturnValue;taint.json;JsonReader;false;readObject;;;Argument[-1];ReturnValue;taint.json;JsonReader;false;readValue;;;Argument[-1];ReturnValue;taint.json;JsonReaderFactory;false;createReader;;;Argument[0];ReturnValue;taint.json;JsonString;false;getChars;;;Argument[-1];ReturnValue;taint.json;JsonString;false;getString;;;Argument[-1];ReturnValue;taint.json;JsonStructure;true;getValue;;;Argument[-1];ReturnValue;taint.json;JsonValue;true;asJsonArray;;;Argument[-1];ReturnValue;taint.json;JsonValue;true;asJsonObject;;;Argument[-1];ReturnValue;taint.json;JsonValue;true;toString;;;Argument[-1];ReturnValue;taint.json;JsonWriter;false;write;;;Argument[0];Argument[-1];taint.json;JsonWriter;false;writeArray;;;Argument[0];Argument[-1];taint.json;JsonWriter;false;writeObject;;;Argument[0];Argument[-1];taint.json;JsonWriterFactory;false;createWriter;;;Argument[-1];Argument[0];taintHeaders;true;asMultiValueMap;;;Argument[-1];ReturnValue;taintHeaders;true;get;;;Argument[-1];ReturnValue;taintHeaders;true;getAll;;;Argument[-1];ReturnValue;taintHeaders;true;getNames;;;Argument[-1];ReturnValue;taintTypedData;true;getBuffer;;;Argument[-1];ReturnValue;taintTypedData;true;getBytes;;;Argument[-1];ReturnValue;taintTypedData;true;getContentType;;;Argument[-1];ReturnValue;taintTypedData;true;getInputStream;;;Argument[-1];ReturnValue;taintTypedData;true;getText;;;Argument[-1];ReturnValue;taintTypedData;true;writeTo;;;Argument[-1];Argument[0];taintfalse;fromLink;;;Argument[0];ReturnValue;taintfalse;fromPath;;;Argument[0];ReturnValue;taintfalse;fromUri;;;Argument[0];ReturnValue;tainttrue;build;;;Argument[-1];ReturnValue;tainttrue;build;;;ArrayElement of Argument[0];ReturnValue;tainttrue;buildFromEncoded;;;Argument[-1];ReturnValue;tainttrue;buildFromEncoded;;;ArrayElement of Argument[0];ReturnValue;tainttrue;buildFromEncodedMap;;;Argument[-1];ReturnValue;tainttrue;buildFromEncodedMap;;;MapKey of Argument[0];ReturnValue;tainttrue;buildFromEncodedMap;;;MapValue of Argument[0];ReturnValue;tainttrue;buildFromMap;;;Argument[-1];ReturnValue;tainttrue;buildFromMap;;;MapKey of Argument[0];ReturnValue;tainttrue;buildFromMap;;;MapValue of Argument[0];ReturnValue;tainttrue;clone;;;Argument[-1];ReturnValue;tainttrue;fragment;;;Argument[-1];ReturnValue;valuetrue;fragment;;;Argument[0];ReturnValue;tainttrue;host;;;Argument[-1];ReturnValue;valuetrue;host;;;Argument[0];ReturnValue;tainttrue;matrixParam;;;Argument[-1];ReturnValue;valuetrue;matrixParam;;;Argument[0];ReturnValue;tainttrue;matrixParam;;;ArrayElement of Argument[1];ReturnValue;tainttrue;path;;;Argument[-1];ReturnValue;valuetrue;path;;;Argument[0..1];ReturnValue;tainttrue;queryParam;;;Argument[-1];ReturnValue;valuetrue;queryParam;;;Argument[0];ReturnValue;tainttrue;queryParam;;;ArrayElement of Argument[1];ReturnValue;tainttrue;replaceMatrix;;;Argument[-1];ReturnValue;valuetrue;replaceMatrix;;;Argument[0];ReturnValue;tainttrue;replaceMatrixParam;;;Argument[-1];ReturnValue;valuetrue;replaceMatrixParam;;;Argument[0];ReturnValue;tainttrue;replaceMatrixParam;;;ArrayElement of Argument[1];ReturnValue;tainttrue;replacePath;;;Argument[-1];ReturnValue;valuetrue;replacePath;;;Argument[0];ReturnValue;tainttrue;replaceQuery;;;Argument[-1];ReturnValue;valuetrue;replaceQuery;;;Argument[0];ReturnValue;tainttrue;replaceQueryParam;;;Argument[-1];ReturnValue;valuetrue;replaceQueryParam;;;Argument[0];ReturnValue;tainttrue;replaceQueryParam;;;ArrayElement of Argument[1];ReturnValue;tainttrue;resolveTemplate;;;Argument[-1];ReturnValue;valuetrue;resolveTemplate;;;Argument[0..2];ReturnValue;tainttrue;resolveTemplateFromEncoded;;;Argument[-1];ReturnValue;valuetrue;resolveTemplateFromEncoded;;;Argument[0..1];ReturnValue;tainttrue;resolveTemplates;;;Argument[-1];ReturnValue;valuetrue;resolveTemplates;;;MapKey of Argument[0];ReturnValue;tainttrue;resolveTemplates;;;MapValue of Argument[0];ReturnValue;tainttrue;resolveTemplatesFromEncoded;;;Argument[-1];ReturnValue;valuetrue;resolveTemplatesFromEncoded;;;MapKey of Argument[0];ReturnValue;tainttrue;resolveTemplatesFromEncoded;;;MapValue of Argument[0];ReturnValue;tainttrue;scheme;;;Argument[-1];ReturnValue;valuetrue;scheme;;;Argument[0];ReturnValue;tainttrue;schemeSpecificPart;;;Argument[-1];ReturnValue;valuetrue;schemeSpecificPart;;;Argument[0];ReturnValue;tainttrue;segment;;;Argument[-1];ReturnValue;valuetrue;segment;;;ArrayElement of Argument[0];ReturnValue;tainttrue;toTemplate;;;Argument[-1];ReturnValue;tainttrue;uri;;;Argument[-1];ReturnValue;valuetrue;uri;;;Argument[0];ReturnValue;tainttrue;userInfo;;;Argument[-1];ReturnValue;valuetrue;userInfo;;;Argument[0];ReturnValue;taintgetAbsolutePath;;;Argument[-1];ReturnValue;taintgetAbsolutePathBuilder;;;Argument[-1];ReturnValue;taintgetPath;;;Argument[-1];ReturnValue;taintgetPathParameters;;;Argument[-1];ReturnValue;taintgetPathSegments;;;Argument[-1];ReturnValue;taintgetQueryParameters;;;Argument[-1];ReturnValue;taintgetRequestUri;;;Argument[-1];ReturnValue;taintgetRequestUriBuilder;;;Argument[-1];ReturnValue;taintrelativize;;;Argument[0];ReturnValue;taintresolve;;;Argument[-1];ReturnValue;taintresolve;;;Argument[0];ReturnValue;taintadd;;;Argument[0];MapKey of Argument[-1];valueadd;;;Argument[1];Element of MapValue of Argument[-1];valueaddAll;(Object,List);;Element of Argument[1];Element of MapValue of Argument[-1];valueaddAll;(Object,Object[]);;ArrayElement of Argument[1];Element of MapValue of Argument[-1];valueaddAll;;;Argument[0];MapKey of Argument[-1];valueaddFirst;;;Argument[0];MapKey of Argument[-1];valueaddFirst;;;Argument[1];Element of MapValue of Argument[-1];valuegetFirst;;;Element of MapValue of Argument[-1];ReturnValue;valueputSingle;;;Argument[0];MapKey of Argument[-1];valueputSingle;;;Argument[1];Element of MapValue of Argument[-1];value.multimap;ArrayListValuedHashMap;true;ArrayListValuedHashMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value.multimap;ArrayListValuedHashMap;true;ArrayListValuedHashMap;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];value.multimap;ArrayListValuedHashMap;true;ArrayListValuedHashMap;(MultiValuedMap);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];value.multimap;ArrayListValuedHashMap;true;ArrayListValuedHashMap;(MultiValuedMap);;MapKey of Argument[0];MapKey of Argument[-1];value.multimap;HashSetValuedHashMap;true;HashSetValuedHashMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value.multimap;HashSetValuedHashMap;true;HashSetValuedHashMap;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];value.multimap;HashSetValuedHashMap;true;HashSetValuedHashMap;(MultiValuedMap);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];value.multimap;HashSetValuedHashMap;true;HashSetValuedHashMap;(MultiValuedMap);;MapKey of Argument[0];MapKey of Argument[-1];value.multimap;TransformedMultiValuedMap;true;transformingMap;;;Element of MapValue of Argument[0];Element of MapValue of ReturnValue;value.multimap;TransformedMultiValuedMap;true;transformingMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.multimap;UnmodifiableMultiValuedMap;true;unmodifiableMultiValuedMap;(MultiValuedMap);;Element of MapValue of Argument[0];Element of MapValue of ReturnValue;value.multimap;UnmodifiableMultiValuedMap;true;unmodifiableMultiValuedMap;(MultiValuedMap);;MapKey of Argument[0];MapKey of ReturnValue;value.bag;AbstractBagDecorator;true;AbstractBagDecorator;;;Element of Argument[0];Element of Argument[-1];value.bag;AbstractMapBag;true;AbstractMapBag;;;MapKey of Argument[0];Element of Argument[-1];value.bag;AbstractMapBag;true;getMap;;;Element of Argument[-1];MapKey of ReturnValue;value.bag;AbstractSortedBagDecorator;true;AbstractSortedBagDecorator;;;Element of Argument[0];Element of Argument[-1];value.bag;CollectionBag;true;CollectionBag;;;Element of Argument[0];Element of Argument[-1];value.bag;CollectionBag;true;collectionBag;;;Element of Argument[0];Element of ReturnValue;value.bag;CollectionSortedBag;true;CollectionSortedBag;;;Element of Argument[0];Element of Argument[-1];value.bag;CollectionSortedBag;true;collectionSortedBag;;;Element of Argument[0];Element of ReturnValue;value.bag;HashBag;true;HashBag;;;Element of Argument[0];Element of Argument[-1];value.bag;PredicatedBag;true;predicatedBag;;;Element of Argument[0];Element of ReturnValue;value.bag;PredicatedSortedBag;true;predicatedSortedBag;;;Element of Argument[0];Element of ReturnValue;value.bag;SynchronizedBag;true;synchronizedBag;;;Element of Argument[0];Element of ReturnValue;value.bag;SynchronizedSortedBag;true;synchronizedSortedBag;;;Element of Argument[0];Element of ReturnValue;value.bag;TransformedBag;true;transformedBag;;;Element of Argument[0];Element of ReturnValue;value.bag;TransformedSortedBag;true;transformedSortedBag;;;Element of Argument[0];Element of ReturnValue;value.bag;TreeBag;true;TreeBag;(Collection);;Element of Argument[0];Element of Argument[-1];value.bag;UnmodifiableBag;true;unmodifiableBag;;;Element of Argument[0];Element of ReturnValue;value.bag;UnmodifiableSortedBag;true;unmodifiableSortedBag;;;Element of Argument[0];Element of ReturnValue;value.list;AbstractLinkedList;true;AbstractLinkedList;;;Element of Argument[0];Element of Argument[-1];value.list;AbstractLinkedList;true;addFirst;;;Argument[0];Element of Argument[-1];value.list;AbstractLinkedList;true;addLast;;;Argument[0];Element of Argument[-1];value.list;AbstractLinkedList;true;getFirst;;;Element of Argument[-1];ReturnValue;value.list;AbstractLinkedList;true;getLast;;;Element of Argument[-1];ReturnValue;value.list;AbstractLinkedList;true;removeFirst;;;Element of Argument[-1];ReturnValue;value.list;AbstractLinkedList;true;removeLast;;;Element of Argument[-1];ReturnValue;value.list;AbstractListDecorator;true;AbstractListDecorator;;;Element of Argument[0];Element of Argument[-1];value.list;AbstractSerializableListDecorator;true;AbstractSerializableListDecorator;;;Element of Argument[0];Element of Argument[-1];value.list;CursorableLinkedList;true;CursorableLinkedList;;;Element of Argument[0];Element of Argument[-1];value.list;CursorableLinkedList;true;cursor;;;Element of Argument[-1];Element of ReturnValue;value.list;FixedSizeList;true;fixedSizeList;;;Element of Argument[0];Element of ReturnValue;value.list;GrowthList;true;growthList;;;Element of Argument[0];Element of ReturnValue;value.list;LazyList;true;lazyList;;;Element of Argument[0];Element of ReturnValue;value.list;NodeCachingLinkedList;true;NodeCachingLinkedList;(Collection);;Element of Argument[0];Element of Argument[-1];value.list;PredicatedList;true;predicatedList;;;Element of Argument[0];Element of ReturnValue;value.list;SetUniqueList;true;asSet;;;Element of Argument[-1];Element of ReturnValue;value.list;SetUniqueList;true;setUniqueList;;;Element of Argument[0];Element of ReturnValue;value.list;TransformedList;true;transformingList;;;Element of Argument[0];Element of ReturnValue;value.list;TreeList;true;TreeList;;;Element of Argument[0];Element of Argument[-1];value.list;UnmodifiableList;true;UnmodifiableList;;;Element of Argument[0];Element of Argument[-1];value.list;UnmodifiableList;true;unmodifiableList;;;Element of Argument[0];Element of ReturnValue;value;SetUtils$SetView;true;copyInto;;;Element of Argument[-1];Element of Argument[0];value;SetUtils$SetView;true;createIterator;;;Element of Argument[-1];Element of ReturnValue;value;SetUtils$SetView;true;toSet;;;Element of Argument[-1];Element of ReturnValue;value;SetUtils;true;difference;;;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;disjunction;;;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;disjunction;;;Element of Argument[1];Element of ReturnValue;value;SetUtils;true;emptyIfNull;;;Argument[0];ReturnValue;value;SetUtils;true;hashSet;;;ArrayElement of Argument[0];Element of ReturnValue;value;SetUtils;true;intersection;;;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;intersection;;;Element of Argument[1];Element of ReturnValue;value;SetUtils;true;orderedSet;;;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;predicatedNavigableSet;;;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;predicatedSet;;;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;predicatedSortedSet;;;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;synchronizedSet;;;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;synchronizedSortedSet;;;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;transformedNavigableSet;;;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;transformedSet;;;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;transformedSortedSet;;;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;union;;;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;union;;;Element of Argument[1];Element of ReturnValue;value;SetUtils;true;unmodifiableNavigableSet;;;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;unmodifiableSet;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;value;SetUtils;true;unmodifiableSet;(Set);;Element of Argument[0];Element of ReturnValue;value;SetUtils;true;unmodifiableSortedSet;;;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;defaultIfNull;;;Argument[0];ReturnValue;value;ListUtils;true;defaultIfNull;;;Argument[1];ReturnValue;value;ListUtils;true;emptyIfNull;;;Argument[0];ReturnValue;value;ListUtils;true;fixedSizeList;;;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;intersection;;;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;intersection;;;Element of Argument[1];Element of ReturnValue;value;ListUtils;true;lazyList;;;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;longestCommonSubsequence;(CharSequence,CharSequence);;Argument[0];ReturnValue;taint;ListUtils;true;longestCommonSubsequence;(CharSequence,CharSequence);;Argument[1];ReturnValue;taint;ListUtils;true;longestCommonSubsequence;(List,List);;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;longestCommonSubsequence;(List,List);;Element of Argument[1];Element of ReturnValue;value;ListUtils;true;longestCommonSubsequence;(List,List,Equator);;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;longestCommonSubsequence;(List,List,Equator);;Element of Argument[1];Element of ReturnValue;value;ListUtils;true;partition;;;Element of Argument[0];Element of Element of ReturnValue;value;ListUtils;true;predicatedList;;;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;removeAll;;;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;retainAll;;;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;select;;;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;selectRejected;;;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;subtract;;;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;sum;;;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;sum;;;Element of Argument[1];Element of ReturnValue;value;ListUtils;true;synchronizedList;;;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;transformedList;;;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;union;;;Element of Argument[0];Element of ReturnValue;value;ListUtils;true;union;;;Element of Argument[1];Element of ReturnValue;value;ListUtils;true;unmodifiableList;;;Element of Argument[0];Element of ReturnValue;value.set;AbstractNavigableSetDecorator;true;AbstractNavigableSetDecorator;;;Element of Argument[0];Element of Argument[-1];value.set;AbstractSetDecorator;true;AbstractSetDecorator;;;Element of Argument[0];Element of Argument[-1];value.set;AbstractSortedSetDecorator;true;AbstractSortedSetDecorator;;;Element of Argument[0];Element of Argument[-1];value.set;CompositeSet$SetMutator;true;add;;;Argument[2];Element of Argument[0];value.set;CompositeSet$SetMutator;true;add;;;Argument[2];Element of Element of Argument[1];value.set;CompositeSet$SetMutator;true;addAll;;;Element of Argument[2];Element of Argument[0];value.set;CompositeSet$SetMutator;true;addAll;;;Element of Argument[2];Element of Element of Argument[1];value.set;CompositeSet;true;CompositeSet;(Set);;Element of Argument[0];Element of Argument[-1];value.set;CompositeSet;true;CompositeSet;(Set[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];value.set;CompositeSet;true;addComposited;(Set);;Element of Argument[0];Element of Argument[-1];value.set;CompositeSet;true;addComposited;(Set,Set);;Element of Argument[0];Element of Argument[-1];value.set;CompositeSet;true;addComposited;(Set,Set);;Element of Argument[1];Element of Argument[-1];value.set;CompositeSet;true;addComposited;(Set[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];value.set;CompositeSet;true;getSets;;;Element of Argument[-1];Element of Element of ReturnValue;value.set;CompositeSet;true;toSet;;;Element of Argument[-1];Element of ReturnValue;value.set;ListOrderedSet;true;add;;;Argument[1];Element of Argument[-1];value.set;ListOrderedSet;true;addAll;;;Element of Argument[1];Element of Argument[-1];value.set;ListOrderedSet;true;asList;;;Element of Argument[-1];Element of ReturnValue;value.set;ListOrderedSet;true;get;;;Element of Argument[-1];ReturnValue;value.set;ListOrderedSet;true;listOrderedSet;(List);;Element of Argument[0];Element of ReturnValue;value.set;ListOrderedSet;true;listOrderedSet;(Set);;Element of Argument[0];Element of ReturnValue;value.set;MapBackedSet;true;mapBackedSet;;;MapKey of Argument[0];Element of ReturnValue;value.set;PredicatedNavigableSet;true;predicatedNavigableSet;;;Element of Argument[0];Element of ReturnValue;value.set;PredicatedSet;true;predicatedSet;;;Element of Argument[0];Element of ReturnValue;value.set;PredicatedSortedSet;true;predicatedSortedSet;;;Element of Argument[0];Element of ReturnValue;value.set;TransformedNavigableSet;true;transformingNavigableSet;;;Element of Argument[0];Element of ReturnValue;value.set;TransformedSet;true;transformingSet;;;Element of Argument[0];Element of ReturnValue;value.set;TransformedSortedSet;true;transformingSortedSet;;;Element of Argument[0];Element of ReturnValue;value.set;UnmodifiableNavigableSet;true;unmodifiableNavigableSet;;;Element of Argument[0];Element of ReturnValue;value.set;UnmodifiableSet;true;unmodifiableSet;;;Element of Argument[0];Element of ReturnValue;value.set;UnmodifiableSortedSet;true;unmodifiableSortedSet;;;Element of Argument[0];Element of ReturnValue;value;IterableUtils;true;boundedIterable;;;Element of Argument[0];Element of ReturnValue;value;IterableUtils;true;chainedIterable;(Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;value;IterableUtils;true;chainedIterable;(Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;value;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;value;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;value;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable);;Element of Argument[2];Element of ReturnValue;value;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;value;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;value;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[2];Element of ReturnValue;value;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[3];Element of ReturnValue;value;IterableUtils;true;chainedIterable;(Iterable[]);;Element of ArrayElement of Argument[0];Element of ReturnValue;value;IterableUtils;true;collatedIterable;(Comparator,Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;value;IterableUtils;true;collatedIterable;(Comparator,Iterable,Iterable);;Element of Argument[2];Element of ReturnValue;value;IterableUtils;true;collatedIterable;(Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;value;IterableUtils;true;collatedIterable;(Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;value;IterableUtils;true;emptyIfNull;;;Argument[0];ReturnValue;value;IterableUtils;true;filteredIterable;;;Element of Argument[0];Element of ReturnValue;value;IterableUtils;true;find;;;Element of Argument[0];ReturnValue;value;IterableUtils;true;first;;;Element of Argument[0];ReturnValue;value;IterableUtils;true;forEachButLast;;;Element of Argument[0];ReturnValue;value;IterableUtils;true;get;;;Element of Argument[0];ReturnValue;value;IterableUtils;true;loopingIterable;;;Element of Argument[0];Element of ReturnValue;value;IterableUtils;true;partition;;;Element of Argument[0];Element of Element of ReturnValue;value;IterableUtils;true;reversedIterable;;;Element of Argument[0];Element of ReturnValue;value;IterableUtils;true;skippingIterable;;;Element of Argument[0];Element of ReturnValue;value;IterableUtils;true;toList;;;Element of Argument[0];Element of ReturnValue;value;IterableUtils;true;toString;;;Argument[2];ReturnValue;taint;IterableUtils;true;toString;;;Argument[3];ReturnValue;taint;IterableUtils;true;toString;;;Argument[4];ReturnValue;taint;IterableUtils;true;uniqueIterable;;;Element of Argument[0];Element of ReturnValue;value;IterableUtils;true;unmodifiableIterable;;;Element of Argument[0];Element of ReturnValue;value;IterableUtils;true;zippingIterable;(Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;value;IterableUtils;true;zippingIterable;(Iterable,Iterable[]);;Element of ArrayElement of Argument[1];Element of ReturnValue;value;IterableUtils;true;zippingIterable;;;Element of Argument[0];Element of ReturnValue;value.bidimap;AbstractBidiMapDecorator;true;AbstractBidiMapDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];value.bidimap;AbstractBidiMapDecorator;true;AbstractBidiMapDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];value.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapKey of Argument[0];MapKey of Argument[-1];value.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapKey of Argument[1];MapValue of Argument[-1];value.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapKey of Argument[2];MapValue of Argument[-1];value.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapValue of Argument[0];MapValue of Argument[-1];value.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapValue of Argument[1];MapKey of Argument[-1];value.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapValue of Argument[2];MapKey of Argument[-1];value.bidimap;AbstractOrderedBidiMapDecorator;true;AbstractOrderedBidiMapDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];value.bidimap;AbstractOrderedBidiMapDecorator;true;AbstractOrderedBidiMapDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];value.bidimap;AbstractSortedBidiMapDecorator;true;AbstractSortedBidiMapDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];value.bidimap;AbstractSortedBidiMapDecorator;true;AbstractSortedBidiMapDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];value.bidimap;DualHashBidiMap;true;DualHashBidiMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value.bidimap;DualHashBidiMap;true;DualHashBidiMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value.bidimap;DualLinkedHashBidiMap;true;DualLinkedHashBidiMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value.bidimap;DualLinkedHashBidiMap;true;DualLinkedHashBidiMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value.bidimap;DualTreeBidiMap;true;DualTreeBidiMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value.bidimap;DualTreeBidiMap;true;DualTreeBidiMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value.bidimap;DualTreeBidiMap;true;inverseOrderedBidiMap;;;MapKey of Argument[-1];MapValue of ReturnValue;value.bidimap;DualTreeBidiMap;true;inverseOrderedBidiMap;;;MapValue of Argument[-1];MapKey of ReturnValue;value.bidimap;DualTreeBidiMap;true;inverseSortedBidiMap;;;MapKey of Argument[-1];MapValue of ReturnValue;value.bidimap;DualTreeBidiMap;true;inverseSortedBidiMap;;;MapValue of Argument[-1];MapKey of ReturnValue;value.bidimap;TreeBidiMap;true;TreeBidiMap;;;MapKey of Argument[0];MapKey of Argument[-1];value.bidimap;TreeBidiMap;true;TreeBidiMap;;;MapValue of Argument[0];MapValue of Argument[-1];value.bidimap;UnmodifiableBidiMap;true;unmodifiableBidiMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.bidimap;UnmodifiableBidiMap;true;unmodifiableBidiMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.bidimap;UnmodifiableOrderedBidiMap;true;inverseOrderedBidiMap;;;MapKey of Argument[-1];MapValue of ReturnValue;value.bidimap;UnmodifiableOrderedBidiMap;true;inverseOrderedBidiMap;;;MapValue of Argument[-1];MapKey of ReturnValue;value.bidimap;UnmodifiableOrderedBidiMap;true;unmodifiableOrderedBidiMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.bidimap;UnmodifiableOrderedBidiMap;true;unmodifiableOrderedBidiMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.bidimap;UnmodifiableSortedBidiMap;true;unmodifiableSortedBidiMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.bidimap;UnmodifiableSortedBidiMap;true;unmodifiableSortedBidiMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;CollectionUtils;true;addAll;(Collection,Enumeration);;Element of Argument[1];Element of Argument[0];value;CollectionUtils;true;addAll;(Collection,Iterable);;Element of Argument[1];Element of Argument[0];value;CollectionUtils;true;addAll;(Collection,Iterator);;Element of Argument[1];Element of Argument[0];value;CollectionUtils;true;addAll;(Collection,Object[]);;ArrayElement of Argument[1];Element of Argument[0];value;CollectionUtils;true;addIgnoreNull;;;Argument[1];Element of Argument[0];value;CollectionUtils;true;collate;;;Element of Argument[0];Element of ReturnValue;value;CollectionUtils;true;collate;;;Element of Argument[1];Element of ReturnValue;value;CollectionUtils;true;disjunction;;;Element of Argument[0];Element of ReturnValue;value;CollectionUtils;true;disjunction;;;Element of Argument[1];Element of ReturnValue;value;CollectionUtils;true;emptyIfNull;;;Argument[0];ReturnValue;value;CollectionUtils;true;extractSingleton;;;Element of Argument[0];ReturnValue;value;CollectionUtils;true;find;;;Element of Argument[0];ReturnValue;value;CollectionUtils;true;get;(Iterable,int);;Element of Argument[0];ReturnValue;value;CollectionUtils;true;get;(Iterator,int);;Element of Argument[0];ReturnValue;value;CollectionUtils;true;get;(Map,int);;MapKey of Argument[0];MapKey of ReturnValue;value;CollectionUtils;true;get;(Map,int);;MapValue of Argument[0];MapValue of ReturnValue;value;CollectionUtils;true;get;(Object,int);;ArrayElement of Argument[0];ReturnValue;value;CollectionUtils;true;get;(Object,int);;Element of Argument[0];ReturnValue;value;CollectionUtils;true;get;(Object,int);;MapKey of Argument[0];MapKey of ReturnValue;value;CollectionUtils;true;get;(Object,int);;MapValue of Argument[0];MapValue of ReturnValue;value;CollectionUtils;true;getCardinalityMap;;;Element of Argument[0];MapKey of ReturnValue;value;CollectionUtils;true;intersection;;;Element of Argument[0];Element of ReturnValue;value;CollectionUtils;true;intersection;;;Element of Argument[1];Element of ReturnValue;value;CollectionUtils;true;permutations;;;Element of Argument[0];Element of Element of ReturnValue;value;CollectionUtils;true;predicatedCollection;;;Element of Argument[0];Element of ReturnValue;value;CollectionUtils;true;removeAll;;;Element of Argument[0];Element of ReturnValue;value;CollectionUtils;true;retainAll;;;Element of Argument[0];Element of ReturnValue;value;CollectionUtils;true;select;(Iterable,Predicate);;Element of Argument[0];Element of ReturnValue;value;CollectionUtils;true;select;(Iterable,Predicate,Collection);;Argument[2];ReturnValue;value;CollectionUtils;true;select;(Iterable,Predicate,Collection);;Element of Argument[0];Element of Argument[2];value;CollectionUtils;true;select;(Iterable,Predicate,Collection,Collection);;Argument[2];ReturnValue;value;CollectionUtils;true;select;(Iterable,Predicate,Collection,Collection);;Element of Argument[0];Element of Argument[2];value;CollectionUtils;true;select;(Iterable,Predicate,Collection,Collection);;Element of Argument[0];Element of Argument[3];value;CollectionUtils;true;selectRejected;(Iterable,Predicate);;Element of Argument[0];Element of ReturnValue;value;CollectionUtils;true;selectRejected;(Iterable,Predicate,Collection);;Argument[2];ReturnValue;value;CollectionUtils;true;selectRejected;(Iterable,Predicate,Collection);;Element of Argument[0];Element of Argument[2];value;CollectionUtils;true;subtract;;;Element of Argument[0];Element of ReturnValue;value;CollectionUtils;true;synchronizedCollection;;;Element of Argument[0];Element of ReturnValue;value;CollectionUtils;true;transformingCollection;;;Element of Argument[0];Element of ReturnValue;value;CollectionUtils;true;union;;;Element of Argument[0];Element of ReturnValue;value;CollectionUtils;true;union;;;Element of Argument[1];Element of ReturnValue;value;CollectionUtils;true;unmodifiableCollection;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;arrayIterator;;;ArrayElement of Argument[0];Element of ReturnValue;value;IteratorUtils;true;arrayListIterator;;;ArrayElement of Argument[0];Element of ReturnValue;value;IteratorUtils;true;asEnumeration;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;asIterable;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;asIterator;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;asMultipleUseIterable;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;boundedIterator;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;chainedIterator;(Collection);;Element of Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;chainedIterator;(Iterator,Iterator);;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;chainedIterator;(Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;value;IteratorUtils;true;chainedIterator;(Iterator[]);;Element of ArrayElement of Argument[0];Element of ReturnValue;value;IteratorUtils;true;collatedIterator;(Comparator,Collection);;Element of Element of Argument[1];Element of ReturnValue;value;IteratorUtils;true;collatedIterator;(Comparator,Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;value;IteratorUtils;true;collatedIterator;(Comparator,Iterator,Iterator);;Element of Argument[2];Element of ReturnValue;value;IteratorUtils;true;collatedIterator;(Comparator,Iterator[]);;Element of ArrayElement of Argument[1];Element of ReturnValue;value;IteratorUtils;true;filteredIterator;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;filteredListIterator;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;find;;;Element of Argument[0];ReturnValue;value;IteratorUtils;true;first;;;Element of Argument[0];ReturnValue;value;IteratorUtils;true;forEachButLast;;;Element of Argument[0];ReturnValue;value;IteratorUtils;true;get;;;Element of Argument[0];ReturnValue;value;IteratorUtils;true;getIterator;;;Argument[0];Element of ReturnValue;value;IteratorUtils;true;getIterator;;;ArrayElement of Argument[0];Element of ReturnValue;value;IteratorUtils;true;getIterator;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;getIterator;;;MapValue of Argument[0];Element of ReturnValue;value;IteratorUtils;true;loopingIterator;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;loopingListIterator;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;peekingIterator;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;pushbackIterator;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;singletonIterator;;;Argument[0];Element of ReturnValue;value;IteratorUtils;true;singletonListIterator;;;Argument[0];Element of ReturnValue;value;IteratorUtils;true;skippingIterator;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;toArray;;;Element of Argument[0];ArrayElement of ReturnValue;value;IteratorUtils;true;toList;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;toListIterator;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;toString;;;Argument[2];ReturnValue;taint;IteratorUtils;true;toString;;;Argument[3];ReturnValue;taint;IteratorUtils;true;toString;;;Argument[4];ReturnValue;taint;IteratorUtils;true;unmodifiableIterator;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;unmodifiableListIterator;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;unmodifiableMapIterator;;;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;unmodifiableMapIterator;;;MapValue of Argument[0];MapValue of ReturnValue;value;IteratorUtils;true;zippingIterator;(Iterator,Iterator);;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;zippingIterator;(Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;value;IteratorUtils;true;zippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[0];Element of ReturnValue;value;IteratorUtils;true;zippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;value;IteratorUtils;true;zippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[2];Element of ReturnValue;value;IteratorUtils;true;zippingIterator;(Iterator[]);;Element of ArrayElement of Argument[0];Element of ReturnValue;value.collection;AbstractCollectionDecorator;true;AbstractCollectionDecorator;;;Element of Argument[0];Element of Argument[-1];value.collection;AbstractCollectionDecorator;true;decorated;;;Element of Argument[-1];Element of ReturnValue;value.collection;AbstractCollectionDecorator;true;setCollection;;;Element of Argument[0];Element of Argument[-1];value.collection;CompositeCollection$CollectionMutator;true;add;;;Argument[2];Element of Argument[0];value.collection;CompositeCollection$CollectionMutator;true;add;;;Argument[2];Element of Element of Argument[1];value.collection;CompositeCollection$CollectionMutator;true;addAll;;;Element of Argument[2];Element of Argument[0];value.collection;CompositeCollection$CollectionMutator;true;addAll;;;Element of Argument[2];Element of Element of Argument[1];value.collection;CompositeCollection;true;CompositeCollection;(Collection);;Element of Argument[0];Element of Argument[-1];value.collection;CompositeCollection;true;CompositeCollection;(Collection,Collection);;Element of Argument[0];Element of Argument[-1];value.collection;CompositeCollection;true;CompositeCollection;(Collection,Collection);;Element of Argument[1];Element of Argument[-1];value.collection;CompositeCollection;true;CompositeCollection;(Collection[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];value.collection;CompositeCollection;true;addComposited;(Collection);;Element of Argument[0];Element of Argument[-1];value.collection;CompositeCollection;true;addComposited;(Collection,Collection);;Element of Argument[0];Element of Argument[-1];value.collection;CompositeCollection;true;addComposited;(Collection,Collection);;Element of Argument[1];Element of Argument[-1];value.collection;CompositeCollection;true;addComposited;(Collection[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];value.collection;CompositeCollection;true;getCollections;;;Element of Argument[-1];Element of Element of ReturnValue;value.collection;CompositeCollection;true;toCollection;;;Element of Argument[-1];Element of ReturnValue;value.collection;IndexedCollection;true;IndexedCollection;;;Element of Argument[0];Element of Argument[-1];value.collection;IndexedCollection;true;get;;;Element of Argument[-1];ReturnValue;value.collection;IndexedCollection;true;nonUniqueIndexedCollection;;;Element of Argument[0];Element of ReturnValue;value.collection;IndexedCollection;true;uniqueIndexedCollection;;;Element of Argument[0];Element of ReturnValue;value.collection;IndexedCollection;true;values;;;Element of Argument[-1];Element of ReturnValue;value.collection;PredicatedCollection$Builder;true;add;;;Argument[0];Element of Argument[-1];value.collection;PredicatedCollection$Builder;true;addAll;;;Element of Argument[0];Element of Argument[-1];value.collection;PredicatedCollection$Builder;true;createPredicatedBag;;;Element of Argument[-1];Element of ReturnValue;value.collection;PredicatedCollection$Builder;true;createPredicatedBag;;;Element of Argument[0];Element of ReturnValue;value.collection;PredicatedCollection$Builder;true;createPredicatedList;;;Element of Argument[-1];Element of ReturnValue;value.collection;PredicatedCollection$Builder;true;createPredicatedList;;;Element of Argument[0];Element of ReturnValue;value.collection;PredicatedCollection$Builder;true;createPredicatedMultiSet;;;Element of Argument[-1];Element of ReturnValue;value.collection;PredicatedCollection$Builder;true;createPredicatedMultiSet;;;Element of Argument[0];Element of ReturnValue;value.collection;PredicatedCollection$Builder;true;createPredicatedQueue;;;Element of Argument[-1];Element of ReturnValue;value.collection;PredicatedCollection$Builder;true;createPredicatedQueue;;;Element of Argument[0];Element of ReturnValue;value.collection;PredicatedCollection$Builder;true;createPredicatedSet;;;Element of Argument[-1];Element of ReturnValue;value.collection;PredicatedCollection$Builder;true;createPredicatedSet;;;Element of Argument[0];Element of ReturnValue;value.collection;PredicatedCollection$Builder;true;rejectedElements;;;Element of Argument[-1];Element of ReturnValue;value.collection;PredicatedCollection;true;predicatedCollection;;;Element of Argument[0];Element of ReturnValue;value.collection;SynchronizedCollection;true;synchronizedCollection;;;Element of Argument[0];Element of ReturnValue;value.collection;TransformedCollection;true;transformingCollection;;;Element of Argument[0];Element of ReturnValue;value.collection;UnmodifiableBoundedCollection;true;unmodifiableBoundedCollection;;;Element of Argument[0];Element of ReturnValue;value.collection;UnmodifiableCollection;true;unmodifiableCollection;;;Element of Argument[0];Element of ReturnValue;value;MapUtils;true;emptyIfNull;;;Argument[0];ReturnValue;value;MapUtils;true;fixedSizeMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;fixedSizeMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;fixedSizeSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;fixedSizeSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;getMap;;;Argument[2];ReturnValue;value;MapUtils;true;getMap;;;MapValue of Argument[0];ReturnValue;value;MapUtils;true;getObject;;;Argument[2];ReturnValue;value;MapUtils;true;getObject;;;MapValue of Argument[0];ReturnValue;value;MapUtils;true;getString;;;Argument[2];ReturnValue;value;MapUtils;true;getString;;;MapValue of Argument[0];ReturnValue;value;MapUtils;true;invertMap;;;MapKey of Argument[0];MapValue of ReturnValue;value;MapUtils;true;invertMap;;;MapValue of Argument[0];MapKey of ReturnValue;value;MapUtils;true;iterableMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;iterableMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;iterableSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;iterableSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;lazyMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;lazyMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;lazySortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;lazySortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;multiValueMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;multiValueMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;orderedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;orderedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;populateMap;(Map,Iterable,Transformer);;Element of Argument[1];MapValue of Argument[0];value;MapUtils;true;populateMap;(MultiMap,Iterable,Transformer);;Element of Argument[1];Element of MapValue of Argument[0];value;MapUtils;true;predicatedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;predicatedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;predicatedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;predicatedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapKey of Argument[0];value;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapKey of ReturnValue;value;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapValue of Argument[0];value;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapValue of ReturnValue;value;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapKey of Argument[0];value;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapKey of ReturnValue;value;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapValue of Argument[0];value;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapValue of ReturnValue;value;MapUtils;true;putAll;;;MapKey of ArrayElement of Argument[1];MapKey of Argument[0];value;MapUtils;true;putAll;;;MapKey of ArrayElement of Argument[1];MapKey of ReturnValue;value;MapUtils;true;putAll;;;MapValue of ArrayElement of Argument[1];MapValue of Argument[0];value;MapUtils;true;putAll;;;MapValue of ArrayElement of Argument[1];MapValue of ReturnValue;value;MapUtils;true;safeAddToMap;;;Argument[1];MapKey of Argument[0];value;MapUtils;true;safeAddToMap;;;Argument[2];MapValue of Argument[0];value;MapUtils;true;synchronizedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;synchronizedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;synchronizedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;synchronizedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;toMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;toMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;transformedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;transformedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;transformedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;transformedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;unmodifiableMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;unmodifiableMap;;;MapValue of Argument[0];MapValue of ReturnValue;value;MapUtils;true;unmodifiableSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value;MapUtils;true;unmodifiableSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.keyvalue;AbstractKeyValue;true;AbstractKeyValue;;;Argument[0];MapKey of Argument[-1];value.keyvalue;AbstractKeyValue;true;AbstractKeyValue;;;Argument[1];MapValue of Argument[-1];value.keyvalue;AbstractKeyValue;true;setKey;;;Argument[0];MapKey of Argument[-1];value.keyvalue;AbstractKeyValue;true;setKey;;;MapKey of Argument[-1];ReturnValue;value.keyvalue;AbstractKeyValue;true;setValue;;;Argument[0];MapValue of Argument[-1];value.keyvalue;AbstractKeyValue;true;setValue;;;MapValue of Argument[-1];ReturnValue;value.keyvalue;AbstractMapEntry;true;AbstractMapEntry;;;Argument[0];MapKey of Argument[-1];value.keyvalue;AbstractMapEntry;true;AbstractMapEntry;;;Argument[1];MapValue of Argument[-1];value.keyvalue;AbstractMapEntryDecorator;true;AbstractMapEntryDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];value.keyvalue;AbstractMapEntryDecorator;true;AbstractMapEntryDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];value.keyvalue;AbstractMapEntryDecorator;true;getMapEntry;;;MapKey of Argument[-1];MapKey of ReturnValue;value.keyvalue;AbstractMapEntryDecorator;true;getMapEntry;;;MapValue of Argument[-1];MapValue of ReturnValue;value.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];value.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];value.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];value.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];value.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Object,Object);;Argument[0];MapKey of Argument[-1];value.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Object,Object);;Argument[1];MapValue of Argument[-1];value.keyvalue;DefaultKeyValue;true;toMapEntry;;;MapKey of Argument[-1];MapKey of ReturnValue;value.keyvalue;DefaultKeyValue;true;toMapEntry;;;MapValue of Argument[-1];MapValue of ReturnValue;value.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];value.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];value.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];value.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];value.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Object,Object);;Argument[0];MapKey of Argument[-1];value.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Object,Object);;Argument[1];MapValue of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object,Object);;Argument[0];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object,Object);;Argument[1];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object);;Argument[0];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object);;Argument[1];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object);;Argument[2];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object);;Argument[0];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object);;Argument[1];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object);;Argument[2];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object);;Argument[3];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[0];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[1];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[2];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[3];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[4];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object[]);;ArrayElement of Argument[0];Element of Argument[-1];value.keyvalue;MultiKey;true;MultiKey;(Object[],boolean);;ArrayElement of Argument[0];Element of Argument[-1];value.keyvalue;MultiKey;true;getKey;;;Element of Argument[-1];ReturnValue;value.keyvalue;MultiKey;true;getKeys;;;Element of Argument[-1];ArrayElement of ReturnValue;value.keyvalue;TiedMapEntry;true;TiedMapEntry;;;Argument[1];MapKey of Argument[-1];value.keyvalue;TiedMapEntry;true;TiedMapEntry;;;MapValue of Argument[0];MapValue of Argument[-1];value.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];value.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];value.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];value.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];value.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Object,Object);;Argument[0];MapKey of Argument[-1];value.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Object,Object);;Argument[1];MapValue of Argument[-1];value;ArrayStack;true;peek;;;Element of Argument[-1];ReturnValue;value;ArrayStack;true;pop;;;Element of Argument[-1];ReturnValue;value;ArrayStack;true;push;;;Argument[0];Element of Argument[-1];value;ArrayStack;true;push;;;Argument[0];ReturnValue;value;Bag;true;add;;;Argument[0];Element of Argument[-1];value;Bag;true;uniqueSet;;;Element of Argument[-1];Element of ReturnValue;value;BidiMap;true;getKey;;;MapKey of Argument[-1];ReturnValue;value;BidiMap;true;inverseBidiMap;;;MapKey of Argument[-1];MapValue of ReturnValue;value;BidiMap;true;inverseBidiMap;;;MapValue of Argument[-1];MapKey of ReturnValue;value;BidiMap;true;removeValue;;;MapKey of Argument[-1];ReturnValue;value;FluentIterable;true;append;(Iterable);;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;append;(Iterable);;Element of Argument[0];Element of ReturnValue;value;FluentIterable;true;append;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;value;FluentIterable;true;append;(Object[]);;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;asEnumeration;;;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;collate;;;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;collate;;;Element of Argument[0];Element of ReturnValue;value;FluentIterable;true;copyInto;;;Element of Argument[-1];Element of Argument[0];value;FluentIterable;true;eval;;;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;filter;;;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;get;;;Element of Argument[-1];ReturnValue;value;FluentIterable;true;limit;;;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;loop;;;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;of;(Iterable);;Element of Argument[0];Element of ReturnValue;value;FluentIterable;true;of;(Object);;Argument[0];Element of ReturnValue;value;FluentIterable;true;of;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;value;FluentIterable;true;reverse;;;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;skip;;;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;toArray;;;Element of Argument[-1];ArrayElement of ReturnValue;value;FluentIterable;true;toList;;;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;unique;;;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;unmodifiable;;;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;zip;(Iterable);;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;zip;(Iterable);;Element of Argument[0];Element of ReturnValue;value;FluentIterable;true;zip;(Iterable[]);;Element of Argument[-1];Element of ReturnValue;value;FluentIterable;true;zip;(Iterable[]);;Element of ArrayElement of Argument[0];Element of ReturnValue;value;Get;true;entrySet;;;MapKey of Argument[-1];MapKey of Element of ReturnValue;value;Get;true;entrySet;;;MapValue of Argument[-1];MapValue of Element of ReturnValue;value;Get;true;get;;;MapValue of Argument[-1];ReturnValue;value;Get;true;keySet;();;MapKey of Argument[-1];Element of ReturnValue;value;Get;true;remove;(Object);;MapValue of Argument[-1];ReturnValue;value;Get;true;values;();;MapValue of Argument[-1];Element of ReturnValue;value;IterableGet;true;mapIterator;;;MapKey of Argument[-1];Element of ReturnValue;value;IterableGet;true;mapIterator;;;MapValue of Argument[-1];MapValue of ReturnValue;value;KeyValue;true;getKey;;;MapKey of Argument[-1];ReturnValue;value;KeyValue;true;getValue;;;MapValue of Argument[-1];ReturnValue;value;MapIterator;true;getKey;;;Element of Argument[-1];ReturnValue;value;MapIterator;true;getValue;;;MapValue of Argument[-1];ReturnValue;value;MapIterator;true;setValue;;;Argument[0];MapValue of Argument[-1];value;MapIterator;true;setValue;;;MapValue of Argument[-1];ReturnValue;value;MultiMap;true;get;;;Element of MapValue of Argument[-1];Element of ReturnValue;value;MultiMap;true;put;;;Argument[0];MapKey of Argument[-1];value;MultiMap;true;put;;;Argument[1];Element of MapValue of Argument[-1];value;MultiMap;true;values;;;Element of MapValue of Argument[-1];Element of ReturnValue;value;MultiSet$Entry;true;getElement;;;Element of Argument[-1];ReturnValue;value;MultiSet;true;add;;;Argument[0];Element of Argument[-1];value;MultiSet;true;entrySet;;;Element of Argument[-1];Element of Element of ReturnValue;value;MultiSet;true;uniqueSet;;;Element of Argument[-1];Element of ReturnValue;value;MultiValuedMap;true;asMap;;;Element of MapValue of Argument[-1];Element of MapValue of ReturnValue;value;MultiValuedMap;true;asMap;;;MapKey of Argument[-1];MapKey of ReturnValue;value;MultiValuedMap;true;entries;;;Element of MapValue of Argument[-1];MapValue of Element of ReturnValue;value;MultiValuedMap;true;entries;;;MapKey of Argument[-1];MapKey of Element of ReturnValue;value;MultiValuedMap;true;get;;;Element of MapValue of Argument[-1];Element of ReturnValue;value;MultiValuedMap;true;keySet;;;MapKey of Argument[-1];Element of ReturnValue;value;MultiValuedMap;true;keys;;;MapKey of Argument[-1];Element of ReturnValue;value;MultiValuedMap;true;mapIterator;;;Element of MapValue of Argument[-1];MapValue of ReturnValue;value;MultiValuedMap;true;mapIterator;;;MapKey of Argument[-1];Element of ReturnValue;value;MultiValuedMap;true;put;;;Argument[0];MapKey of Argument[-1];value;MultiValuedMap;true;put;;;Argument[1];Element of MapValue of Argument[-1];value;MultiValuedMap;true;putAll;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value;MultiValuedMap;true;putAll;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];value;MultiValuedMap;true;putAll;(MultiValuedMap);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];value;MultiValuedMap;true;putAll;(MultiValuedMap);;MapKey of Argument[0];MapKey of Argument[-1];value;MultiValuedMap;true;putAll;(Object,Iterable);;Argument[0];MapKey of Argument[-1];value;MultiValuedMap;true;putAll;(Object,Iterable);;Element of Argument[1];Element of MapValue of Argument[-1];value;MultiValuedMap;true;remove;;;Element of MapValue of Argument[-1];Element of ReturnValue;value;MultiValuedMap;true;values;;;Element of MapValue of Argument[-1];Element of ReturnValue;value;OrderedIterator;true;previous;;;Element of Argument[-1];ReturnValue;value;OrderedMap;true;firstKey;;;MapKey of Argument[-1];ReturnValue;value;OrderedMap;true;lastKey;;;MapKey of Argument[-1];ReturnValue;value;OrderedMap;true;nextKey;;;MapKey of Argument[-1];ReturnValue;value;OrderedMap;true;previousKey;;;MapKey of Argument[-1];ReturnValue;value;Put;true;put;;;Argument[0];MapKey of Argument[-1];value;Put;true;put;;;Argument[1];MapValue of Argument[-1];value;Put;true;put;;;MapValue of Argument[-1];ReturnValue;value;Put;true;putAll;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value;Put;true;putAll;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value;SortedBag;true;first;;;Element of Argument[-1];ReturnValue;value;SortedBag;true;last;;;Element of Argument[-1];ReturnValue;value;Trie;true;prefixMap;;;MapKey of Argument[-1];MapKey of ReturnValue;value;Trie;true;prefixMap;;;MapValue of Argument[-1];MapValue of ReturnValue;value.iterators;AbstractIteratorDecorator;true;AbstractIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];value.iterators;AbstractListIteratorDecorator;true;AbstractListIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];value.iterators;AbstractListIteratorDecorator;true;getListIterator;;;Element of Argument[-1];Element of ReturnValue;value.iterators;AbstractMapIteratorDecorator;true;AbstractMapIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];value.iterators;AbstractMapIteratorDecorator;true;AbstractMapIteratorDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];value.iterators;AbstractMapIteratorDecorator;true;getMapIterator;;;Element of Argument[-1];Element of ReturnValue;value.iterators;AbstractMapIteratorDecorator;true;getMapIterator;;;MapValue of Argument[-1];MapValue of ReturnValue;value.iterators;AbstractOrderedMapIteratorDecorator;true;AbstractOrderedMapIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];value.iterators;AbstractOrderedMapIteratorDecorator;true;AbstractOrderedMapIteratorDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];value.iterators;AbstractOrderedMapIteratorDecorator;true;getOrderedMapIterator;;;Element of Argument[-1];Element of ReturnValue;value.iterators;AbstractOrderedMapIteratorDecorator;true;getOrderedMapIterator;;;MapValue of Argument[-1];MapValue of ReturnValue;value.iterators;AbstractUntypedIteratorDecorator;true;AbstractUntypedIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];value.iterators;AbstractUntypedIteratorDecorator;true;getIterator;;;Element of Argument[-1];Element of ReturnValue;value.iterators;ArrayIterator;true;ArrayIterator;;;ArrayElement of Argument[0];Element of Argument[-1];value.iterators;ArrayIterator;true;getArray;;;Element of Argument[-1];ArrayElement of ReturnValue;value.iterators;ArrayListIterator;true;ArrayListIterator;;;ArrayElement of Argument[0];Element of Argument[-1];value.iterators;BoundedIterator;true;BoundedIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;CollatingIterator;true;CollatingIterator;(Comparator,Collection);;Element of Element of Argument[1];Element of Argument[-1];value.iterators;CollatingIterator;true;CollatingIterator;(Comparator,Iterator,Iterator);;Element of Argument[1];Element of Argument[-1];value.iterators;CollatingIterator;true;CollatingIterator;(Comparator,Iterator,Iterator);;Element of Argument[2];Element of Argument[-1];value.iterators;CollatingIterator;true;CollatingIterator;(Comparator,Iterator[]);;Element of ArrayElement of Argument[1];Element of Argument[-1];value.iterators;CollatingIterator;true;addIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;CollatingIterator;true;getIterators;;;Element of Argument[-1];Element of Element of ReturnValue;value.iterators;CollatingIterator;true;setIterator;;;Element of Argument[1];Element of Argument[-1];value.iterators;EnumerationIterator;true;EnumerationIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;EnumerationIterator;true;getEnumeration;;;Element of Argument[-1];Element of ReturnValue;value.iterators;EnumerationIterator;true;setEnumeration;;;Element of Argument[0];Element of Argument[-1];value.iterators;FilterIterator;true;FilterIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;FilterIterator;true;getIterator;;;Element of Argument[-1];Element of ReturnValue;value.iterators;FilterIterator;true;setIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;FilterListIterator;true;FilterListIterator;(ListIterator);;Element of Argument[0];Element of Argument[-1];value.iterators;FilterListIterator;true;FilterListIterator;(ListIterator,Predicate);;Element of Argument[0];Element of Argument[-1];value.iterators;FilterListIterator;true;getListIterator;;;Element of Argument[-1];Element of ReturnValue;value.iterators;FilterListIterator;true;setListIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;IteratorChain;true;IteratorChain;(Collection);;Element of Element of Argument[0];Element of Argument[-1];value.iterators;IteratorChain;true;IteratorChain;(Iterator);;Element of Argument[0];Element of Argument[-1];value.iterators;IteratorChain;true;IteratorChain;(Iterator,Iterator);;Element of Argument[0];Element of Argument[-1];value.iterators;IteratorChain;true;IteratorChain;(Iterator,Iterator);;Element of Argument[1];Element of Argument[-1];value.iterators;IteratorChain;true;IteratorChain;(Iterator[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];value.iterators;IteratorChain;true;addIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;IteratorEnumeration;true;IteratorEnumeration;;;Element of Argument[0];Element of Argument[-1];value.iterators;IteratorEnumeration;true;getIterator;;;Element of Argument[-1];Element of ReturnValue;value.iterators;IteratorEnumeration;true;setIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;IteratorIterable;true;IteratorIterable;;;Element of Argument[0];Element of Argument[-1];value.iterators;ListIteratorWrapper;true;ListIteratorWrapper;;;Element of Argument[0];Element of Argument[-1];value.iterators;LoopingIterator;true;LoopingIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;LoopingListIterator;true;LoopingListIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;ObjectArrayIterator;true;ObjectArrayIterator;;;ArrayElement of Argument[0];Element of Argument[-1];value.iterators;ObjectArrayIterator;true;getArray;;;Element of Argument[-1];ArrayElement of ReturnValue;value.iterators;ObjectArrayListIterator;true;ObjectArrayListIterator;;;ArrayElement of Argument[0];Element of Argument[-1];value.iterators;PeekingIterator;true;PeekingIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;PeekingIterator;true;element;;;Element of Argument[-1];ReturnValue;value.iterators;PeekingIterator;true;peek;;;Element of Argument[-1];ReturnValue;value.iterators;PeekingIterator;true;peekingIterator;;;Element of Argument[0];Element of ReturnValue;value.iterators;PermutationIterator;true;PermutationIterator;;;Element of Argument[0];Element of Element of Argument[-1];value.iterators;PushbackIterator;true;PushbackIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;PushbackIterator;true;pushback;;;Argument[0];Element of Argument[-1];value.iterators;PushbackIterator;true;pushbackIterator;;;Element of Argument[0];Element of ReturnValue;value.iterators;ReverseListIterator;true;ReverseListIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;SingletonIterator;true;SingletonIterator;;;Argument[0];Element of Argument[-1];value.iterators;SingletonListIterator;true;SingletonListIterator;;;Argument[0];Element of Argument[-1];value.iterators;SkippingIterator;true;SkippingIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;UniqueFilterIterator;true;UniqueFilterIterator;;;Element of Argument[0];Element of Argument[-1];value.iterators;UnmodifiableIterator;true;unmodifiableIterator;;;Element of Argument[0];Element of ReturnValue;value.iterators;UnmodifiableListIterator;true;umodifiableListIterator;;;Element of Argument[0];Element of ReturnValue;value.iterators;UnmodifiableMapIterator;true;unmodifiableMapIterator;;;Element of Argument[0];Element of ReturnValue;value.iterators;UnmodifiableMapIterator;true;unmodifiableMapIterator;;;MapValue of Argument[0];MapValue of ReturnValue;value.iterators;UnmodifiableOrderedMapIterator;true;unmodifiableOrderedMapIterator;;;Element of Argument[0];Element of ReturnValue;value.iterators;UnmodifiableOrderedMapIterator;true;unmodifiableOrderedMapIterator;;;MapValue of Argument[0];MapValue of ReturnValue;value.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator);;Element of Argument[0];Element of Argument[-1];value.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator);;Element of Argument[1];Element of Argument[-1];value.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[0];Element of Argument[-1];value.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[1];Element of Argument[-1];value.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[2];Element of Argument[-1];value.iterators;ZippingIterator;true;ZippingIterator;(Iterator[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];value.map;AbstractHashedMap;true;AbstractHashedMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value.map;AbstractHashedMap;true;AbstractHashedMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value.map;AbstractLinkedMap;true;AbstractLinkedMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value.map;AbstractLinkedMap;true;AbstractLinkedMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value.map;AbstractMapDecorator;true;AbstractMapDecorator;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value.map;AbstractMapDecorator;true;AbstractMapDecorator;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value.map;AbstractMapDecorator;true;decorated;;;MapKey of Argument[-1];MapKey of ReturnValue;value.map;AbstractMapDecorator;true;decorated;;;MapValue of Argument[-1];MapValue of ReturnValue;value.map;AbstractOrderedMapDecorator;true;AbstractOrderedMapDecorator;(OrderedMap);;MapKey of Argument[0];MapKey of Argument[-1];value.map;AbstractOrderedMapDecorator;true;AbstractOrderedMapDecorator;(OrderedMap);;MapValue of Argument[0];MapValue of Argument[-1];value.map;AbstractSortedMapDecorator;true;AbstractSortedMapDecorator;(SortedMap);;MapKey of Argument[0];MapKey of Argument[-1];value.map;AbstractSortedMapDecorator;true;AbstractSortedMapDecorator;(SortedMap);;MapValue of Argument[0];MapValue of Argument[-1];value.map;CaseInsensitiveMap;true;CaseInsensitiveMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value.map;CaseInsensitiveMap;true;CaseInsensitiveMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value.map;CompositeMap;true;CompositeMap;(Map,Map);;MapKey of Argument[0];MapKey of Argument[-1];value.map;CompositeMap;true;CompositeMap;(Map,Map);;MapKey of Argument[1];MapKey of Argument[-1];value.map;CompositeMap;true;CompositeMap;(Map,Map);;MapValue of Argument[0];MapValue of Argument[-1];value.map;CompositeMap;true;CompositeMap;(Map,Map);;MapValue of Argument[1];MapValue of Argument[-1];value.map;CompositeMap;true;CompositeMap;(Map,Map,MapMutator);;MapKey of Argument[0];MapKey of Argument[-1];value.map;CompositeMap;true;CompositeMap;(Map,Map,MapMutator);;MapKey of Argument[1];MapKey of Argument[-1];value.map;CompositeMap;true;CompositeMap;(Map,Map,MapMutator);;MapValue of Argument[0];MapValue of Argument[-1];value.map;CompositeMap;true;CompositeMap;(Map,Map,MapMutator);;MapValue of Argument[1];MapValue of Argument[-1];value.map;CompositeMap;true;CompositeMap;(Map[]);;MapKey of ArrayElement of Argument[0];MapKey of Argument[-1];value.map;CompositeMap;true;CompositeMap;(Map[]);;MapValue of ArrayElement of Argument[0];MapValue of Argument[-1];value.map;CompositeMap;true;CompositeMap;(Map[],MapMutator);;MapKey of ArrayElement of Argument[0];MapKey of Argument[-1];value.map;CompositeMap;true;CompositeMap;(Map[],MapMutator);;MapValue of ArrayElement of Argument[0];MapValue of Argument[-1];value.map;CompositeMap;true;addComposited;;;MapKey of Argument[0];MapKey of Argument[-1];value.map;CompositeMap;true;addComposited;;;MapValue of Argument[0];MapValue of Argument[-1];value.map;CompositeMap;true;removeComposited;;;Argument[0];ReturnValue;value.map;CompositeMap;true;removeComposited;;;MapKey of Argument[-1];MapKey of ReturnValue;value.map;CompositeMap;true;removeComposited;;;MapValue of Argument[-1];MapValue of ReturnValue;value.map;DefaultedMap;true;DefaultedMap;(Object);;Argument[0];MapValue of Argument[-1];value.map;DefaultedMap;true;defaultedMap;(Map,Object);;Argument[1];MapValue of ReturnValue;value.map;DefaultedMap;true;defaultedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.map;DefaultedMap;true;defaultedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.map;EntrySetToMapIteratorAdapter;true;EntrySetToMapIteratorAdapter;;;MapKey of Element of Argument[0];Element of Argument[-1];value.map;EntrySetToMapIteratorAdapter;true;EntrySetToMapIteratorAdapter;;;MapValue of Element of Argument[0];MapValue of Argument[-1];value.map;FixedSizeMap;true;fixedSizeMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.map;FixedSizeMap;true;fixedSizeMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.map;FixedSizeSortedMap;true;fixedSizeSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.map;FixedSizeSortedMap;true;fixedSizeSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.map;Flat3Map;true;Flat3Map;;;MapKey of Argument[0];MapKey of Argument[-1];value.map;Flat3Map;true;Flat3Map;;;MapValue of Argument[0];MapValue of Argument[-1];value.map;HashedMap;true;HashedMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value.map;HashedMap;true;HashedMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value.map;LRUMap;true;LRUMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value.map;LRUMap;true;LRUMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value.map;LRUMap;true;LRUMap;(Map,boolean);;MapKey of Argument[0];MapKey of Argument[-1];value.map;LRUMap;true;LRUMap;(Map,boolean);;MapValue of Argument[0];MapValue of Argument[-1];value.map;LRUMap;true;get;(Object,boolean);;MapValue of Argument[0];ReturnValue;value.map;LazyMap;true;lazyMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.map;LazyMap;true;lazyMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.map;LazySortedMap;true;lazySortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.map;LazySortedMap;true;lazySortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.map;LinkedMap;true;LinkedMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value.map;LinkedMap;true;LinkedMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value.map;LinkedMap;true;asList;;;MapKey of Argument[-1];Element of ReturnValue;value.map;LinkedMap;true;get;(int);;MapKey of Argument[-1];ReturnValue;value.map;LinkedMap;true;getValue;(int);;MapValue of Argument[-1];ReturnValue;value.map;LinkedMap;true;remove;(int);;MapValue of Argument[-1];ReturnValue;value.map;ListOrderedMap;true;asList;;;MapKey of Argument[-1];Element of ReturnValue;value.map;ListOrderedMap;true;get;(int);;MapKey of Argument[-1];ReturnValue;value.map;ListOrderedMap;true;getValue;(int);;MapValue of Argument[-1];ReturnValue;value.map;ListOrderedMap;true;keyList;;;MapKey of Argument[-1];Element of ReturnValue;value.map;ListOrderedMap;true;listOrderedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.map;ListOrderedMap;true;listOrderedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.map;ListOrderedMap;true;put;;;Argument[1];MapKey of Argument[-1];value.map;ListOrderedMap;true;put;;;Argument[2];MapValue of Argument[-1];value.map;ListOrderedMap;true;putAll;;;MapKey of Argument[1];MapKey of Argument[-1];value.map;ListOrderedMap;true;putAll;;;MapValue of Argument[1];MapValue of Argument[-1];value.map;ListOrderedMap;true;remove;(int);;MapValue of Argument[-1];ReturnValue;value.map;ListOrderedMap;true;setValue;;;Argument[1];MapValue of Argument[-1];value.map;ListOrderedMap;true;valueList;;;MapValue of Argument[-1];Element of ReturnValue;value.map;MultiKeyMap;true;get;;;MapValue of Argument[-1];ReturnValue;value.map;MultiKeyMap;true;put;(Object,Object,Object);;Argument[0..1];Element of MapKey of Argument[-1];value.map;MultiKeyMap;true;put;(Object,Object,Object);;Argument[2];MapValue of Argument[-1];value.map;MultiKeyMap;true;put;(Object,Object,Object,Object);;Argument[0..2];Element of MapKey of Argument[-1];value.map;MultiKeyMap;true;put;(Object,Object,Object,Object);;Argument[3];MapValue of Argument[-1];value.map;MultiKeyMap;true;put;(Object,Object,Object,Object,Object);;Argument[0..3];Element of MapKey of Argument[-1];value.map;MultiKeyMap;true;put;(Object,Object,Object,Object,Object);;Argument[4];MapValue of Argument[-1];value.map;MultiKeyMap;true;put;(Object,Object,Object,Object,Object,Object);;Argument[0..4];Element of MapKey of Argument[-1];value.map;MultiKeyMap;true;put;(Object,Object,Object,Object,Object,Object);;Argument[5];MapValue of Argument[-1];value.map;MultiKeyMap;true;put;;;MapValue of Argument[-1];ReturnValue;value.map;MultiKeyMap;true;removeMultiKey;;;MapValue of Argument[-1];ReturnValue;value.map;MultiValueMap;true;getCollection;;;Element of MapValue of Argument[-1];Element of ReturnValue;value.map;MultiValueMap;true;iterator;();;Element of MapValue of Argument[-1];MapValue of Element of ReturnValue;value.map;MultiValueMap;true;iterator;();;MapKey of Argument[-1];MapKey of Element of ReturnValue;value.map;MultiValueMap;true;iterator;(Object);;Element of MapValue of Argument[-1];Element of ReturnValue;value.map;MultiValueMap;true;multiValueMap;;;Element of MapValue of Argument[0];Element of MapValue of ReturnValue;value.map;MultiValueMap;true;multiValueMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.map;MultiValueMap;true;putAll;(Map);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];value.map;MultiValueMap;true;putAll;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];value.map;MultiValueMap;true;putAll;(Object,Collection);;Argument[0];MapKey of Argument[-1];value.map;MultiValueMap;true;putAll;(Object,Collection);;Element of Argument[1];Element of MapValue of Argument[-1];value.map;MultiValueMap;true;values;;;Element of MapValue of Argument[-1];Element of ReturnValue;value.map;PassiveExpiringMap;true;PassiveExpiringMap;(ExpirationPolicy,Map);;MapKey of Argument[1];MapKey of Argument[-1];value.map;PassiveExpiringMap;true;PassiveExpiringMap;(ExpirationPolicy,Map);;MapValue of Argument[1];MapValue of Argument[-1];value.map;PassiveExpiringMap;true;PassiveExpiringMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value.map;PassiveExpiringMap;true;PassiveExpiringMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value.map;PassiveExpiringMap;true;PassiveExpiringMap;(long,Map);;MapKey of Argument[1];MapKey of Argument[-1];value.map;PassiveExpiringMap;true;PassiveExpiringMap;(long,Map);;MapValue of Argument[1];MapValue of Argument[-1];value.map;PassiveExpiringMap;true;PassiveExpiringMap;(long,TimeUnit,Map);;MapKey of Argument[2];MapKey of Argument[-1];value.map;PassiveExpiringMap;true;PassiveExpiringMap;(long,TimeUnit,Map);;MapValue of Argument[2];MapValue of Argument[-1];value.map;PredicatedMap;true;predicatedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.map;PredicatedMap;true;predicatedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.map;PredicatedSortedMap;true;predicatedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.map;PredicatedSortedMap;true;predicatedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.map;SingletonMap;true;SingletonMap;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];value.map;SingletonMap;true;SingletonMap;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];value.map;SingletonMap;true;SingletonMap;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];value.map;SingletonMap;true;SingletonMap;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];value.map;SingletonMap;true;SingletonMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];value.map;SingletonMap;true;SingletonMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];value.map;SingletonMap;true;SingletonMap;(Object,Object);;Argument[0];MapKey of Argument[-1];value.map;SingletonMap;true;SingletonMap;(Object,Object);;Argument[1];MapValue of Argument[-1];value.map;SingletonMap;true;setValue;;;Argument[0];MapValue of Argument[-1];value.map;TransformedMap;true;transformingMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.map;TransformedMap;true;transformingMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.map;TransformedSortedMap;true;transformingSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.map;TransformedSortedMap;true;transformingSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.map;UnmodifiableEntrySet;true;unmodifiableEntrySet;;;MapKey of Element of Argument[0];MapKey of Element of ReturnValue;value.map;UnmodifiableEntrySet;true;unmodifiableEntrySet;;;MapValue of Element of Argument[0];MapValue of Element of ReturnValue;value.map;UnmodifiableMap;true;unmodifiableMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.map;UnmodifiableMap;true;unmodifiableMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.map;UnmodifiableOrderedMap;true;unmodifiableOrderedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.map;UnmodifiableOrderedMap;true;unmodifiableOrderedMap;;;MapValue of Argument[0];MapValue of ReturnValue;value.map;UnmodifiableSortedMap;true;unmodifiableSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;value.map;UnmodifiableSortedMap;true;unmodifiableSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueallowcontentLocationcookieencodingentityexpireslanguagelinklinksvariantsratpack.form;Form;true;file;;;Argument[-1];ReturnValue;taintratpack.form;Form;true;files;;;Argument[-1];ReturnValue;taintjava.util;Objects;false;toString;;;Argument[1];ReturnValue;valuejavax.ws.rs.core;Form;true;asMap;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;Form;true;param;;;Argument[-1];ReturnValue;valueratpack.core.form;Form;true;file;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;Response;false;ok;;;Argument[0];ReturnValue;taintratpack.core.form;Form;true;files;;;Argument[-1];ReturnValue;taintflexjson;JSONDeserializer;true;use;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Form;true;asMap;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;Form;true;param;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response;false;ok;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;Form;false;Form;;;Argument[0..1];Argument[-1];taintjavax.ws.rs.core;Form;true;param;;;Argument[0..1];Argument[-1];taintjavax.ws.rs.core;Cookie;false;valueOf;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;Cookie;true;getName;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;Cookie;true;getPath;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;Form;false;Form;;;Argument[0..1];Argument[-1];taintjakarta.ws.rs.core;Form;true;param;;;Argument[0..1];Argument[-1];taintjava.util;Objects;false;requireNonNull;;;Argument[0];ReturnValue;valuejavax.ws.rs.core;Cookie;true;getValue;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;Cookie;true;toString;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;Cookie;false;valueOf;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;Cookie;true;getName;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;Cookie;true;getPath;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;Cookie;true;getDomain;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;Cookie;true;getValue;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;Cookie;true;toString;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;Cookie;false;Cookie;;;Argument[0..4];Argument[-1];taintjavax.ws.rs.core;Cookie;true;getVersion;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;MediaType;false;valueOf;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;MediaType;true;getType;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;NewCookie;false;valueOf;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;Response;false;accepted;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;Cookie;true;getDomain;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;NewCookie;true;toCookie;;;Argument[-1];ReturnValue;taintratpack.func;Pair;true;map;;;ReturnValue of Argument[0];ReturnValue;valueratpack.util;Pair;true;map;;;ReturnValue of Argument[0];ReturnValue;valueandroid.os;Parcel;false;readParcelableList;;;Argument[0];ReturnValue;valuejakarta.ws.rs.core;Cookie;false;Cookie;;;Argument[0..4];Argument[-1];taintjakarta.ws.rs.core;Cookie;true;getVersion;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;MediaType;false;valueOf;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;MediaType;true;getType;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;NewCookie;false;valueOf;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;Response;false;accepted;;;Argument[0];ReturnValue;taintjava.util;Objects;false;requireNonNullElse;;;Argument[0];ReturnValue;valuejava.util;Objects;false;requireNonNullElse;;;Argument[1];ReturnValue;valuejavax.ws.rs.core;NewCookie;true;getExpiry;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;NewCookie;true;getMaxAge;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;PathSegment;true;getPath;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;NewCookie;true;toCookie;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;Form;false;Form;;;MapKey of Argument[0];Argument[-1];taintjavax.ws.rs.core;MediaType;true;getSubtype;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;NewCookie;true;getComment;;;Argument[-1];ReturnValue;taintratpack.exec;Result;true;success;;;Argument[0];Element of ReturnValue;valueratpack.form;UploadedFile;true;getFileName;;;Argument[-1];ReturnValue;taintratpack.func;Pair;true;map;;;Argument[-1];Parameter[0] of Argument[0];valueratpack.util;Pair;true;map;;;Argument[-1];Parameter[0] of Argument[0];valueandroid.app;Notification$Builder;true;build;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;NewCookie;true;getExpiry;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;NewCookie;true;getMaxAge;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;PathSegment;true;getPath;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;MediaType;true;withCharset;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;Response;false;fromResponse;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;Form;false;Form;;;MapKey of Argument[0];Argument[-1];taintjakarta.ws.rs.core;MediaType;true;getSubtype;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;NewCookie;true;getComment;;;Argument[-1];ReturnValue;taintjava.util;Objects;false;requireNonNullElseGet;;;Argument[0];ReturnValue;valuejavax.ws.rs.core;HttpHeaders;true;getCookies;;;Argument[-1];ReturnValue;taintratpack.exec;Result;true;getValue;;;Element of Argument[-1];ReturnValue;valuejakarta.ws.rs.core;MediaType;true;withCharset;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;Response;false;fromResponse;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;GenericEntity;true;getEntity;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;HttpHeaders;true;getLanguage;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;MediaType;false;MediaType;;;Argument[0..2];Argument[-1];taintjavax.ws.rs.core;MediaType;true;getParameters;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;NewCookie;false;NewCookie;;;Argument[0..9];Argument[-1];taintjakarta.ws.rs.core;HttpHeaders;true;getCookies;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;HttpHeaders;true;getMediaType;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;GenericEntity;true;getEntity;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;HttpHeaders;true;getLanguage;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;MediaType;false;MediaType;;;Argument[0..2];Argument[-1];taintjakarta.ws.rs.core;MediaType;true;getParameters;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;NewCookie;false;NewCookie;;;Argument[0..9];Argument[-1];taintratpack.core.form;UploadedFile;true;getFileName;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;HttpHeaders;true;getMediaType;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;HttpHeaders;true;getHeaderString;;;Argument[-1];ReturnValue;taintandroid.app;Notification$Action$Builder;true;build;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;GenericEntity;false;GenericEntity;;;Argument[0];Argument[-1];taintjavax.ws.rs.core;HttpHeaders;true;getRequestHeader;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3;RegExUtils;false;removeAll;;;Argument[0];ReturnValue;taintandroid.app;Notification$Action$Builder;true;extend;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;recoverBuilder;;;Argument[1];ReturnValue;taintandroidx.slice.builders;SliceAction;true;setChecked;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;HttpHeaders;true;getHeaderString;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;HttpHeaders;true;getRequestHeaders;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3;RegExUtils;false;replaceAll;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;RegExUtils;false;replaceAll;;;Argument[2];ReturnValue;taintratpack.exec;Result;true;getValueOrThrow;;;Element of Argument[-1];ReturnValue;valueandroidx.slice.builders;SliceAction;true;setPriority;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;GenericEntity;false;GenericEntity;;;Argument[0];Argument[-1];taintjakarta.ws.rs.core;HttpHeaders;true;getRequestHeader;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;Response$ResponseBuilder;true;build;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;Response$ResponseBuilder;true;clone;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrLookup;false;lookup;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3;RegExUtils;false;removeFirst;;;Argument[0];ReturnValue;taintorg.apache.commons.collectionsorg.apache.commons.collections4android.app;Notification$Builder;true;setDeleteIntent;;;Argument[0];Argument[-1];taintjakarta.ws.rs.core;HttpHeaders;true;getRequestHeaders;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;PathSegment;true;getMatrixParameters;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;Response$ResponseBuilder;true;entity;;;Argument[0];Argument[-1];taintorg.apache.commons.lang3;RegExUtils;false;replaceFirst;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;RegExUtils;false;replaceFirst;;;Argument[2];ReturnValue;taintandroid.app;Notification$Action$Builder;true;addExtras;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setContentIntent;;;Argument[0];Argument[-1];taintandroid.app;Notification$Builder;true;setPublicVersion;;;Argument[0];Argument[-1];taintjakarta.ws.rs.core;Response$ResponseBuilder;true;build;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;Response$ResponseBuilder;true;clone;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3;RegExUtils;false;removePattern;;;Argument[0];ReturnValue;taintandroid.app;Notification$Builder;true;addAction;(Action);;Argument[0];Argument[-1];taintjakarta.ws.rs.core;PathSegment;true;getMatrixParameters;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;Response$ResponseBuilder;true;entity;;;Argument[0];Argument[-1];taintjavax.ws.rs.core;Form;false;Form;;;Element of MapValue of Argument[0];Argument[-1];taintorg.apache.commons.lang3;RegExUtils;false;replacePattern;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;RegExUtils;false;replacePattern;;;Argument[2];ReturnValue;taintorg.apache.commons.text.lookup;StringLookup;true;lookup;;;Argument[-1];ReturnValue;taintcom.fasterxml.jackson.core;JsonFactory;false;createParser;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;HttpHeaders;true;getAcceptableLanguages;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;Form;false;Form;;;Element of MapValue of Argument[0];Argument[-1];taintjavax.ws.rs.core;HttpHeaders;true;getAcceptableMediaTypes;;;Argument[-1];ReturnValue;taintratpack.func;Pair;true;of;;;Argument[0];Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.util;Pair;true;of;;;Argument[0];Field[ratpack.func.Pair.left] of ReturnValue;valueandroid.app;Notification$Action$Builder;true;setContextual;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;HttpHeaders;true;getAcceptableLanguages;;;Argument[-1];ReturnValue;taintratpack.func;MultiValueMap;true;getAll;;;MapKey of Argument[-1];MapKey of ReturnValue;valueratpack.func;Pair;true;of;;;Argument[1];Field[ratpack.func.Pair.right] of ReturnValue;valueratpack.util;MultiValueMap;true;getAll;;;MapKey of Argument[-1];MapKey of ReturnValue;valueratpack.util;Pair;true;of;;;Argument[1];Field[ratpack.func.Pair.right] of ReturnValue;valueandroid.app;Notification$Action$Builder;true;addRemoteInput;;;Argument[-1];ReturnValue;valuecom.fasterxml.jackson.databind;ObjectMapper;true;valueToTree;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;HttpHeaders;true;getAcceptableMediaTypes;;;Argument[-1];ReturnValue;taintratpack.func;Pair;true;pair;;;Argument[0];Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.util;Pair;true;pair;;;Argument[0];Field[ratpack.func.Pair.left] of ReturnValue;valueandroid.app;Notification$Action$Builder;true;Builder;(Action);;Argument[0];Argument[-1];taintandroidx.slice.builders;ListBuilder$RangeBuilder;true;setMax;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RowBuilder;true;setTitle;;;Argument[-1];ReturnValue;valuecom.fasterxml.jackson.databind;ObjectMapper;true;convertValue;;;Argument[0];ReturnValue;taintorg.apache.commons.collections;MultiMapUtils;true;emptyIfNull;;;Argument[0];ReturnValue;valueratpack.func;Pair;true;pair;;;Argument[1];Field[ratpack.func.Pair.right] of ReturnValue;valueratpack.util;Pair;true;pair;;;Argument[1];Field[ratpack.func.Pair.right] of ReturnValue;valueandroidx.slice.builders;ListBuilder$RangeBuilder;true;setMode;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RatingBuilder;true;setMax;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RatingBuilder;true;setMin;;;Argument[-1];ReturnValue;valuecom.fasterxml.jackson.databind;ObjectMapper;false;createParser;;;Argument[0];ReturnValue;taintcom.fasterxml.jackson.databind;ObjectReader;false;createParser;;;Argument[0];ReturnValue;taintorg.apache.commons.collections4;MultiMapUtils;true;emptyIfNull;;;Argument[0];ReturnValue;valueandroid.app;Notification$Action$Builder;true;setSemanticAction;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RangeBuilder;true;setTitle;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RangeBuilder;true;setValue;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RowBuilder;true;addEndItem;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;SliceAction;true;setContentDescription;;;Argument[-1];ReturnValue;valueratpack.func;MultiValueMap;true;asMultimap;;;MapKey of Argument[-1];MapKey of ReturnValue;valueratpack.func;Pair;true;left;();;Field[ratpack.func.Pair.left] of Argument[-1];ReturnValue;valueratpack.util;MultiValueMap;true;asMultimap;;;MapKey of Argument[-1];MapKey of ReturnValue;valueratpack.util;Pair;true;left;();;Field[ratpack.func.Pair.left] of Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$HeaderBuilder;true;setTitle;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RatingBuilder;true;setTitle;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RatingBuilder;true;setValue;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RowBuilder;true;setSubtitle;;;Argument[-1];ReturnValue;valueratpack.func;Pair;true;getLeft;;;Field[ratpack.func.Pair.left] of Argument[-1];ReturnValue;valueratpack.util;Pair;true;getLeft;;;Field[ratpack.func.Pair.left] of Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setActions;;;ArrayElement of Argument[0];Argument[-1];taintandroidx.slice.builders;ListBuilder$RowBuilder;true;setTitleItem;;;Argument[-1];ReturnValue;valueratpack.func;Pair;true;right;();;Field[ratpack.func.Pair.right] of Argument[-1];ReturnValue;valueratpack.util;Pair;true;right;();;Field[ratpack.func.Pair.right] of Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$HeaderBuilder;true;setSummary;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RangeBuilder;true;setSubtitle;;;Argument[-1];ReturnValue;valueratpack.func;Pair;true;getRight;;;Field[ratpack.func.Pair.right] of Argument[-1];ReturnValue;valueratpack.util;Pair;true;getRight;;;Field[ratpack.func.Pair.right] of Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$HeaderBuilder;true;setSubtitle;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RangeBuilder;true;setTitleItem;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RatingBuilder;true;setSubtitle;;;Argument[-1];ReturnValue;valueorg.apache.commons.collections;EnumerationUtils;true;get;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.lang3.text;StrLookup;false;mapLookup;;;MapValue of Argument[0];ReturnValue;taintratpack.func;MultiValueMap;true;asMultimap;;;MapValue of Argument[-1];MapValue of ReturnValue;valueratpack.util;MultiValueMap;true;asMultimap;;;MapValue of Argument[-1];MapValue of ReturnValue;valueandroidx.slice.builders;ListBuilder$RatingBuilder;true;setTitleItem;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RowBuilder;true;setEndOfSection;;;Argument[-1];ReturnValue;valueorg.apache.commons.collections4;EnumerationUtils;true;get;;;Element of Argument[0];ReturnValue;valueratpack.exec;Promise;true;left;(Function);;Element of Argument[-1];Parameter[0] of Argument[0];valueratpack.func;Pair;true;left;(Object);;Argument[0];Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.util;Pair;true;left;(Object);;Argument[0];Field[ratpack.func.Pair.left] of ReturnValue;valueandroidx.slice.builders;ListBuilder$RowBuilder;true;setPrimaryAction;;;Argument[-1];ReturnValue;valueratpack.exec;Promise;true;right;(Function);;Element of Argument[-1];Parameter[0] of Argument[0];valueandroid.app;Notification$Action$Builder;true;setAllowGeneratedReplies;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RatingBuilder;true;setInputAction;;;Argument[-1];ReturnValue;valueratpack.func;MultiValueMap;true;getAll;(Object);;MapValue of Argument[-1];Element of ReturnValue;valueratpack.func;Pair;true;right;(Object);;Argument[0];Field[ratpack.func.Pair.right] of ReturnValue;valueratpack.util;MultiValueMap;true;getAll;(Object);;MapValue of Argument[-1];Element of ReturnValue;valueratpack.util;Pair;true;right;(Object);;Argument[0];Field[ratpack.func.Pair.right] of ReturnValue;valueandroid.app;Notification$Action$Builder;true;setAuthenticationRequired;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RangeBuilder;true;setPrimaryAction;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RowBuilder;true;setLayoutDirection;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$HeaderBuilder;true;setPrimaryAction;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RatingBuilder;true;setPrimaryAction;;;Argument[-1];ReturnValue;valuecom.fasterxml.jackson.databind;ObjectMapper;true;valueToTree;;;MapValue of Argument[0];ReturnValue;taintratpack.exec;Promise;true;flatLeft;(Function);;Element of Argument[-1];Parameter[0] of Argument[0];valueratpack.func;Pair;true;pushLeft;(Object);;Argument[0];Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.util;Pair;true;pushLeft;(Object);;Argument[0];Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.exec;Promise;true;flatRight;(Function);;Element of Argument[-1];Parameter[0] of Argument[0];valueandroidx.slice.builders;ListBuilder$HeaderBuilder;true;setLayoutDirection;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RowBuilder;true;setContentDescription;;;Argument[-1];ReturnValue;valueratpack.func;Pair;true;pushLeft;(Object);;Argument[-1];Field[ratpack.func.Pair.right] of ReturnValue;valueratpack.func;Pair;true;pushRight;(Object);;Argument[-1];Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.func;Pair;true;pushRight;(Object);;Argument[0];Field[ratpack.func.Pair.right] of ReturnValue;valueratpack.util;Pair;true;pushLeft;(Object);;Argument[-1];Field[ratpack.func.Pair.right] of ReturnValue;valueratpack.util;Pair;true;pushRight;(Object);;Argument[-1];Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.util;Pair;true;pushRight;(Object);;Argument[0];Field[ratpack.func.Pair.right] of ReturnValue;valueorg.apache.commons.collections.queue;CircularFifoQueue;true;get;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections;MultiMapUtils;true;getCollection;;;MapValue of Argument[0];ReturnValue;valueandroid.app;Notification$Action;true;Action;(int,CharSequence,PendingIntent);;Argument[2];Argument[-1];taintandroidx.slice.builders;ListBuilder$RangeBuilder;true;setContentDescription;;;Argument[-1];ReturnValue;valueorg.apache.commons.collections4.queue;CircularFifoQueue;true;get;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;MultiMapUtils;true;getCollection;;;MapValue of Argument[0];ReturnValue;valueratpack.func;MultiValueMap;true;getAll;();;MapValue of Argument[-1];Element of MapValue of ReturnValue;valueratpack.util;MultiValueMap;true;getAll;();;MapValue of Argument[-1];Element of MapValue of ReturnValue;valueandroidx.slice.builders;ListBuilder$HeaderBuilder;true;setContentDescription;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$RatingBuilder;true;setContentDescription;;;Argument[-1];ReturnValue;valueratpack.func;Pair;true;mapLeft;;;ReturnValue of Argument[0];Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.util;Pair;true;mapLeft;;;ReturnValue of Argument[0];Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.handling;Context;true;parse;(ratpack.http.TypedData,ratpack.parse.Parse);;Argument[0];ReturnValue;taintandroid.app;Notification$Builder;true;addAction;(int,CharSequence,PendingIntent);;Argument[2];Argument[-1];taintorg.apache.commons.collections;BagUtils;true;collectionBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;BagUtils;true;predicatedBag;;;Element of Argument[0];Element of ReturnValue;valueratpack.func;Pair;true;mapLeft;;;Field[ratpack.func.Pair.left] of Argument[-1];Parameter[0] of Argument[0];valueratpack.func;Pair;true;mapRight;;;ReturnValue of Argument[0];Field[ratpack.func.Pair.right] of ReturnValue;valueratpack.util;Pair;true;mapLeft;;;Field[ratpack.func.Pair.left] of Argument[-1];Parameter[0] of Argument[0];valueratpack.util;Pair;true;mapRight;;;ReturnValue of Argument[0];Field[ratpack.func.Pair.right] of ReturnValue;valueorg.apache.commons.collections4;BagUtils;true;collectionBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;BagUtils;true;predicatedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SplitMapUtils;true;readableMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;SplitMapUtils;true;writableMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.properties;AbstractPropertiesFactory;true;load;(URI);;Argument[0];ReturnValue;taintorg.apache.commons.collections.properties;AbstractPropertiesFactory;true;load;(URL);;Argument[0];ReturnValue;taintorg.apache.commons.collections.trie;AbstractPatriciaTrie;true;selectKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;SplitMapUtils;true;readableMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;SplitMapUtils;true;writableMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;BagUtils;true;synchronizedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;BagUtils;true;transformingBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;BagUtils;true;unmodifiableBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;TrieUtils;true;unmodifiableTrie;;;MapKey of Argument[0];MapKey of ReturnValue;valueratpack.func;Pair;true;mapRight;;;Field[ratpack.func.Pair.right] of Argument[-1];Parameter[0] of Argument[0];valueratpack.util;Pair;true;mapRight;;;Field[ratpack.func.Pair.right] of Argument[-1];Parameter[0] of Argument[0];valuecom.fasterxml.jackson.databind;ObjectMapper;true;valueToTree;;;Element of MapValue of Argument[0];ReturnValue;taintorg.apache.commons.collections.properties;AbstractPropertiesFactory;true;load;(File);;Argument[0];ReturnValue;taintorg.apache.commons.collections.properties;AbstractPropertiesFactory;true;load;(Path);;Argument[0];ReturnValue;taintorg.apache.commons.collections4.properties;AbstractPropertiesFactory;true;load;(URI);;Argument[0];ReturnValue;taintorg.apache.commons.collections4.properties;AbstractPropertiesFactory;true;load;(URL);;Argument[0];ReturnValue;taintorg.apache.commons.collections4.trie;AbstractPatriciaTrie;true;selectKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;BagUtils;true;synchronizedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;BagUtils;true;transformingBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;BagUtils;true;unmodifiableBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;TrieUtils;true;unmodifiableTrie;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.properties;AbstractPropertiesFactory;true;load;(File);;Argument[0];ReturnValue;taintorg.apache.commons.collections4.properties;AbstractPropertiesFactory;true;load;(Path);;Argument[0];ReturnValue;taintorg.apache.commons.collections;QueueUtils;true;predicatedQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.text.lookup;StringLookupFactory;false;mapStringLookup;;;MapValue of Argument[0];ReturnValue;taintratpack.core.handling;Context;true;parse;(ratpack.http.TypedData,ratpack.parse.Parse);;Argument[0];ReturnValue;taintandroid.app;Notification$Action$Builder;true;Builder;(int,CharSequence,PendingIntent);;Argument[2];Argument[-1];taintorg.apache.commons.collections.properties;AbstractPropertiesFactory;true;load;(Reader);;Argument[0];ReturnValue;taintorg.apache.commons.collections.properties;AbstractPropertiesFactory;true;load;(String);;Argument[0];ReturnValue;taintorg.apache.commons.collections4;QueueUtils;true;predicatedQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SplitMapUtils;true;readableMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;SplitMapUtils;true;writableMap;;;MapValue of Argument[0];MapValue of ReturnValue;valuejavaxjakartaandroid.app;Notification$Action$Builder;true;Builder;(Icon,CharSequence,PendingIntent);;Argument[2];Argument[-1];taintjavax.ws.rs.core;MultivaluedHashMap;false;MultivaluedHashMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.trie;AbstractPatriciaTrie;true;selectValue;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.properties;AbstractPropertiesFactory;true;load;(Reader);;Argument[0];ReturnValue;taintorg.apache.commons.collections4.properties;AbstractPropertiesFactory;true;load;(String);;Argument[0];ReturnValue;taintorg.apache.commons.collections4;SplitMapUtils;true;readableMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;SplitMapUtils;true;writableMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;BagUtils;true;predicatedSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;QueueUtils;true;synchronizedQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;QueueUtils;true;transformingQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;QueueUtils;true;unmodifiableQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;TrieUtils;true;unmodifiableTrie;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.trie;PatriciaTrie;true;PatriciaTrie;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.trie;AbstractPatriciaTrie;true;selectValue;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;BagUtils;true;predicatedSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;QueueUtils;true;synchronizedQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;QueueUtils;true;transformingQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;QueueUtils;true;unmodifiableQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;TrieUtils;true;unmodifiableTrie;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;EnumerationUtils;true;toList;(StringTokenizer);;Argument[0];Element of ReturnValue;taintratpack.exec;Promise;true;left;;;Element of Argument[-1];Field[ratpack.func.Pair.right] of Element of ReturnValue;valueratpack.exec;Promise;true;right;;;Element of Argument[-1];Field[ratpack.func.Pair.left] of Element of ReturnValue;valuejakarta.ws.rs.core;MultivaluedHashMap;false;MultivaluedHashMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.trie;PatriciaTrie;true;PatriciaTrie;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4;EnumerationUtils;true;toList;(StringTokenizer);;Argument[0];Element of ReturnValue;taintorg.apache.commons.collections;BagUtils;true;synchronizedSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;BagUtils;true;transformingSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;BagUtils;true;unmodifiableSortedBag;;;Element of Argument[0];Element of ReturnValue;valuejavax.ws.rs.core;AbstractMultivaluedMap;false;AbstractMultivaluedMap;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.trie;AbstractPatriciaTrie;true;select;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections4;BagUtils;true;synchronizedSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;BagUtils;true;transformingSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;BagUtils;true;unmodifiableSortedBag;;;Element of Argument[0];Element of ReturnValue;valueratpack.handling;Context;true;parse;(ratpack.core.http.TypedData,ratpack.core.parse.Parse);;Argument[0];ReturnValue;taintorg.apache.commons.collections.properties;AbstractPropertiesFactory;true;load;(InputStream);;Argument[0];ReturnValue;taintorg.apache.commons.collections4.trie;AbstractPatriciaTrie;true;select;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections;MultiSetUtils;true;predicatedMultiSet;;;Element of Argument[0];Element of ReturnValue;valuejakarta.ws.rs.core;AbstractMultivaluedMap;false;AbstractMultivaluedMap;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.trie;PatriciaTrie;true;PatriciaTrie;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.properties;AbstractPropertiesFactory;true;load;(InputStream);;Argument[0];ReturnValue;taintorg.apache.commons.collections4;MultiSetUtils;true;predicatedMultiSet;;;Element of Argument[0];Element of ReturnValue;valueratpack.exec;Promise;true;flatLeft;;;Element of Argument[-1];Field[ratpack.func.Pair.right] of Element of ReturnValue;valueratpack.exec;Promise;true;flatRight;;;Element of Argument[-1];Field[ratpack.func.Pair.left] of Element of ReturnValue;valueorg.apache.commons.collections4.trie;PatriciaTrie;true;PatriciaTrie;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections;MultiSetUtils;true;synchronizedMultiSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;MultiSetUtils;true;unmodifiableMultiSet;;;Element of Argument[0];Element of ReturnValue;valuejavax.ws.rs.core;AbstractMultivaluedMap;false;AbstractMultivaluedMap;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.multiset;HashMultiSet;true;HashMultiSet;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.trie;AbstractPatriciaTrie;true;select;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections4;MultiSetUtils;true;synchronizedMultiSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;MultiSetUtils;true;unmodifiableMultiSet;;;Element of Argument[0];Element of ReturnValue;valueandroidx.slice.builders;ListBuilder;true;build;;;SyntheticField[androidx.slice.Slice.action] of Argument[-1];ReturnValue;taintorg.apache.commons.collections.trie;UnmodifiableTrie;true;unmodifiableTrie;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.multiset;HashMultiSet;true;HashMultiSet;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.trie;AbstractPatriciaTrie;true;select;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections;EnumerationUtils;true;toList;(Enumeration);;Element of Argument[0];Element of ReturnValue;valueratpack.core.handling;Context;true;parse;(ratpack.core.http.TypedData,ratpack.core.parse.Parse);;Argument[0];ReturnValue;taintratpack.exec;Promise;true;left;(Promise);;Element of Argument[0];Field[ratpack.func.Pair.left] of Element of ReturnValue;valuejakarta.ws.rs.core;AbstractMultivaluedMap;false;AbstractMultivaluedMap;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.queue;PredicatedQueue;true;predicatedQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.trie;UnmodifiableTrie;true;unmodifiableTrie;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;EnumerationUtils;true;toList;(Enumeration);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;MultiMapUtils;true;transformedMultiValuedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueandroid.app;Notification$Action;true;getExtras;;;SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.queue;PredicatedQueue;true;predicatedQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;MultiMapUtils;true;transformedMultiValuedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MultiMapUtils;true;unmodifiableMultiValuedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueratpack.exec;Promise;true;right;(Promise);;Element of Argument[0];Field[ratpack.func.Pair.right] of Element of ReturnValue;valueandroid.app;Notification$Builder;true;getExtras;;;SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setExtras;;;Argument[0];SyntheticField[android.content.Intent.extras] of Argument[-1];valuejavax.ws.rs.core;MultivaluedHashMap;false;MultivaluedHashMap;(MultivaluedMap);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.properties;AbstractPropertiesFactory;true;load;(ClassLoader,String);;Argument[1];ReturnValue;taintorg.apache.commons.collections4;MultiMapUtils;true;unmodifiableMultiValuedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueandroidx.slice.builders;SliceAction;true;getAction;;;SyntheticField[androidx.slice.Slice.action] of Argument[-1];ReturnValue;taintorg.apache.commons.collections.queue;TransformedQueue;true;transformingQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.trie;UnmodifiableTrie;true;unmodifiableTrie;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.properties;AbstractPropertiesFactory;true;load;(ClassLoader,String);;Argument[1];ReturnValue;taintorg.apache.commons.collections;MultiMapUtils;true;getValuesAsBag;;;Element of MapValue of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;MultiMapUtils;true;getValuesAsSet;;;Element of MapValue of Argument[0];Element of ReturnValue;valueratpack.func;Pair;true;mapRight;;;Field[ratpack.func.Pair.left] of Argument[-1];Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.util;Pair;true;mapRight;;;Field[ratpack.func.Pair.left] of Argument[-1];Field[ratpack.func.Pair.left] of ReturnValue;valuejakarta.ws.rs.core;MultivaluedHashMap;false;MultivaluedHashMap;(MultivaluedMap);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.queue;SynchronizedQueue;true;synchronizedQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.queue;UnmodifiableQueue;true;unmodifiableQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.queue;TransformedQueue;true;transformingQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.trie;UnmodifiableTrie;true;unmodifiableTrie;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MultiMapUtils;true;getValuesAsBag;;;Element of MapValue of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;MultiMapUtils;true;getValuesAsSet;;;Element of MapValue of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;MultiMapUtils;true;getValuesAsList;;;Element of MapValue of Argument[0];Element of ReturnValue;valueratpack.exec;Promise;true;left;(Function);;ReturnValue of Argument[0];Field[ratpack.func.Pair.left] of Element of ReturnValue;valueratpack.func;Pair;true;mapLeft;;;Field[ratpack.func.Pair.right] of Argument[-1];Field[ratpack.func.Pair.right] of ReturnValue;valueratpack.handling;Context;true;parse;(ratpack.core.http.TypedData,ratpack.core.parse.Parse);;Argument[0];MapKey of ReturnValue;taintratpack.util;Pair;true;mapLeft;;;Field[ratpack.func.Pair.right] of Argument[-1];Field[ratpack.func.Pair.right] of ReturnValue;valueorg.apache.commons.collections.splitmap;TransformedSplitMap;true;transformingMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.queue;SynchronizedQueue;true;synchronizedQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.queue;UnmodifiableQueue;true;unmodifiableQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;MultiMapUtils;true;getValuesAsList;;;Element of MapValue of Argument[0];Element of ReturnValue;valuejavax.ws.rs.core;MultivaluedHashMap;false;MultivaluedHashMap;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];valuejavax.ws.rs.core;MultivaluedHashMap;false;MultivaluedHashMap;(MultivaluedMap);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.splitmap;TransformedSplitMap;true;transformingMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueratpack.exec;Promise;true;right;(Function);;ReturnValue of Argument[0];Field[ratpack.func.Pair.right] of Element of ReturnValue;valueratpack.handling;Context;true;parse;(ratpack.core.http.TypedData,ratpack.core.parse.Parse);;Argument[0];MapValue of ReturnValue;taintjakarta.ws.rs.core;MultivaluedHashMap;false;MultivaluedHashMap;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];valuejakarta.ws.rs.core;MultivaluedHashMap;false;MultivaluedHashMap;(MultivaluedMap);;MapValue of Argument[0];MapValue of Argument[-1];valueratpack.func;Pair;true;right;(Object);;Field[ratpack.func.Pair.left] of Argument[-1];Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.util;Pair;true;right;(Object);;Field[ratpack.func.Pair.left] of Argument[-1];Field[ratpack.func.Pair.left] of ReturnValue;valueandroid.app;Notification$Action$Builder;true;getExtras;;;SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueorg.apache.commons.collections.multiset;PredicatedMultiSet;true;predicatedMultiSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.splitmap;TransformedSplitMap;true;transformingMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueratpack.core.handling;Context;true;parse;(ratpack.core.http.TypedData,ratpack.core.parse.Parse);;Argument[0];MapKey of ReturnValue;taintratpack.func;Pair;true;left;(Object);;Field[ratpack.func.Pair.right] of Argument[-1];Field[ratpack.func.Pair.right] of ReturnValue;valueratpack.util;Pair;true;left;(Object);;Field[ratpack.func.Pair.right] of Argument[-1];Field[ratpack.func.Pair.right] of ReturnValue;valueorg.apache.commons.collections4.multiset;PredicatedMultiSet;true;predicatedMultiSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.splitmap;TransformedSplitMap;true;transformingMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueratpack.func;Pair;true;nestLeft;(Object);;Argument[0];Field[ratpack.func.Pair.left] of Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.util;Pair;true;nestLeft;(Object);;Argument[0];Field[ratpack.func.Pair.left] of Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.core.handling;Context;true;parse;(ratpack.core.http.TypedData,ratpack.core.parse.Parse);;Argument[0];MapValue of ReturnValue;taintratpack.func;Pair;true;nestRight;(Object);;Argument[0];Field[ratpack.func.Pair.left] of Field[ratpack.func.Pair.right] of ReturnValue;valueratpack.func;Pair;true;nestRight;(Object);;Field[ratpack.func.Pair.left] of Argument[-1];Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.util;Pair;true;nestRight;(Object);;Argument[0];Field[ratpack.func.Pair.left] of Field[ratpack.func.Pair.right] of ReturnValue;valueratpack.util;Pair;true;nestRight;(Object);;Field[ratpack.func.Pair.left] of Argument[-1];Field[ratpack.func.Pair.left] of ReturnValue;valueorg.apache.commons.collections.multiset;SynchronizedMultiSet;true;synchronizedMultiSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.multiset;UnmodifiableMultiSet;true;unmodifiableMultiSet;;;Element of Argument[0];Element of ReturnValue;valueratpack.func;Pair;true;nestLeft;(Object);;Field[ratpack.func.Pair.right] of Argument[-1];Field[ratpack.func.Pair.right] of ReturnValue;valueratpack.util;Pair;true;nestLeft;(Object);;Field[ratpack.func.Pair.right] of Argument[-1];Field[ratpack.func.Pair.right] of ReturnValue;valueorg.apache.commons.collections4.multiset;SynchronizedMultiSet;true;synchronizedMultiSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.multiset;UnmodifiableMultiSet;true;unmodifiableMultiSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.queue;CircularFifoQueue;true;CircularFifoQueue;(Collection);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.queue;CircularFifoQueue;true;CircularFifoQueue;(Collection);;Element of Argument[0];Element of Argument[-1];valueratpack.exec;Promise;true;flatLeft;(Function);;Element of ReturnValue of Argument[0];Field[ratpack.func.Pair.left] of Element of ReturnValue;valueratpack.exec;Promise;true;flatRight;(Function);;Element of ReturnValue of Argument[0];Field[ratpack.func.Pair.right] of Element of ReturnValue;valueandroid.app;Notification$Builder;true;addExtras;;;MapKey of Argument[0];MapKey of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroidx.slice.builders;ListBuilder;true;setSeeMoreAction;(PendingIntent);;Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroid.app;Notification$Builder;true;addExtras;;;MapValue of Argument[0];MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];valueorg.apache.commons.collections;MultiMapUtils;true;transformedMultiValuedMap;;;Element of MapValue of Argument[0];Element of MapValue of ReturnValue;valueorg.apache.commons.collections4;MultiMapUtils;true;transformedMultiValuedMap;;;Element of MapValue of Argument[0];Element of MapValue of ReturnValue;valueorg.apache.commons.collections;MultiMapUtils;true;unmodifiableMultiValuedMap;;;Element of MapValue of Argument[0];Element of MapValue of ReturnValue;valueorg.apache.commons.collections4;MultiMapUtils;true;unmodifiableMultiValuedMap;;;Element of MapValue of Argument[0];Element of MapValue of ReturnValue;valueandroid.app;Notification$Action$Builder;true;addExtras;;;MapKey of Argument[0];MapKey of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.app;Notification$Action$Builder;true;addExtras;;;MapValue of Argument[0];MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];valueorg.apache.commons.collections.splitmap;AbstractIterableGetMapDecorator;true;AbstractIterableGetMapDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.splitmap;AbstractIterableGetMapDecorator;true;AbstractIterableGetMapDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];valueandroidx.slice.builders;ListBuilder$RatingBuilder;true;setInputAction;(PendingIntent);;Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintorg.apache.commons.collections.splitmap;AbstractIterableGetMapDecorator;true;AbstractIterableGetMapDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.splitmap;AbstractIterableGetMapDecorator;true;AbstractIterableGetMapDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.lang3.mutable;MutableObject;false;getValue;;;SyntheticField[org.apache.commons.lang3.mutable.MutableObject.value] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.mutable;MutableObject;false;setValue;;;Argument[0];SyntheticField[org.apache.commons.lang3.mutable.MutableObject.value] of Argument[-1];valueandroid.app;Notification$Builder;true;build;;;SyntheticField[android.content.Intent.extras] of Argument[-1];Field[android.app.Notification.extras] of ReturnValue;valueandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;setInputAction;(PendingIntent);;Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;SliceAction;true;createToggle;(PendingIntent,CharSequence,boolean);;Argument[0];SyntheticField[androidx.slice.Slice.action] of ReturnValue;taintandroidx.slice.builders;SliceAction;true;create;(PendingIntent,IconCompat,int,CharSequence);;Argument[0];SyntheticField[androidx.slice.Slice.action] of ReturnValue;taintorg.apache.commons.lang3.mutable;MutableObject;false;MutableObject;;;Argument[0];SyntheticField[org.apache.commons.lang3.mutable.MutableObject.value] of Argument[-1];valueratpack.func;Pair;true;nestLeft;(Object);;Field[ratpack.func.Pair.left] of Argument[-1];Field[ratpack.func.Pair.right] of Field[ratpack.func.Pair.left] of ReturnValue;valueratpack.util;Pair;true;nestLeft;(Object);;Field[ratpack.func.Pair.left] of Argument[-1];Field[ratpack.func.Pair.right] of Field[ratpack.func.Pair.left] of ReturnValue;valueandroidx.slice.builders;ListBuilder;true;addRow;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintratpack.func;Pair;true;nestRight;(Object);;Field[ratpack.func.Pair.right] of Argument[-1];Field[ratpack.func.Pair.right] of Field[ratpack.func.Pair.right] of ReturnValue;valueratpack.util;Pair;true;nestRight;(Object);;Field[ratpack.func.Pair.right] of Argument[-1];Field[ratpack.func.Pair.right] of Field[ratpack.func.Pair.right] of ReturnValue;valueandroidx.slice.builders;ListBuilder;true;addRange;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder;true;addAction;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder;true;addRating;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder;true;setHeader;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;SliceAction;true;createDeeplink;(PendingIntent,IconCompat,int,CharSequence);;Argument[0];SyntheticField[androidx.slice.Slice.action] of ReturnValue;taintandroidx.slice.builders;ListBuilder;true;addGridRow;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder;true;addSelection;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroid.app;Notification$Action$Builder;true;build;;;SyntheticField[android.content.Intent.extras] of Argument[-1];SyntheticField[android.content.Intent.extras] of ReturnValue;valueandroidx.slice.builders;ListBuilder;true;addInputRange;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder;true;setSeeMoreRow;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder$RowBuilder;true;setPrimaryAction;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;addEndItem;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder$RangeBuilder;true;setPrimaryAction;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder$HeaderBuilder;true;setPrimaryAction;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder$RatingBuilder;true;setPrimaryAction;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;setPrimaryAction;;;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder$RowBuilder;true;addEndItem;(SliceAction);;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder$RowBuilder;true;setTitleItem;(SliceAction);;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder$RowBuilder;true;addEndItem;(SliceAction,boolean);;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintandroidx.slice.builders;ListBuilder$RowBuilder;true;setTitleItem;(SliceAction,boolean);;SyntheticField[androidx.slice.Slice.action] of Argument[0];SyntheticField[androidx.slice.Slice.action] of Argument[-1];taintBinderArrayBinderListBooleanArrayByteArrayCharArrayDoubleArrayFloatArrayIntArrayLongArrayParcelableListStringArrayStringListTypedArrayTypedListaddEndItemsetContentDescriptionsetInputActionsetLayoutDirectionsetMaxsetMinsetPrimaryActionsetSubtitlesetThumbsetTitleItemaddActionaddGridRowaddInputRangeaddRatingaddRowaddSelectionsetAccentColorsetHostExtrassetIsErrorsetKeywordssetSeeMoreActionsetSeeMoreRowBundleIntParcelableParcelableArrayPersistableBundleSizeSizeFSparseArraySparseBooleanArrayStrongBinderTypedObjectValuejodd.json;JsonParser;false;allowAllClasses;;;Argument[-1];ReturnValue;valuejodd.json;JsonParser;false;allowClass;;;Argument[-1];ReturnValue;valuejodd.json;JsonParser;false;lazy;;;Argument[-1];ReturnValue;valuejodd.json;JsonParser;false;looseMode;;;Argument[-1];ReturnValue;valuejodd.json;JsonParser;false;map;;;Argument[-1];ReturnValue;valuejodd.json;JsonParser;false;setClassMetadataName;;;Argument[-1];ReturnValue;valuejodd.json;JsonParser;false;strictTypes;;;Argument[-1];ReturnValue;valuejodd.json;JsonParser;false;useAltPaths;;;Argument[-1];ReturnValue;valuejodd.json;JsonParser;false;withClassMetadata;;;Argument[-1];ReturnValue;valuejodd.json;JsonParser;false;withValueConverter;;;Argument[-1];ReturnValue;valueaddExtrasaddPersonextendsetActionssetAutoCancelsetBadgeIconTypesetBubbleMetadatasetCategorysetChannelIdsetChronometerCountDownsetColorizedsetContentsetContentInfosetContentIntentsetContentTextsetContentTitlesetCustomBigContentViewsetCustomHeadsUpContentViewsetDefaultssetDeleteIntentsetExtrassetFlagsetForegroundServiceBehaviorsetFullScreenIntentsetGroupsetGroupAlertBehaviorsetGroupSummarysetLargeIconsetLightssetLocalOnlysetLocusIdsetNumbersetOngoingsetOnlyAlertOncesetProgresssetPublicVersionsetRemoteInputHistorysetSettingsTextsetShortcutIdsetShowWhensetSmallIconsetSortKeysetSoundsetSubTextsetTickersetTimeoutAftersetUsesChronometersetVibratesetVisibilitysetWhenorg.apache.commons.lang3;ObjectUtils;false;CONST;;;Argument[0];ReturnValue;valueorg.apache.commons.lang3;ObjectUtils;false;CONST_BYTE;;;Argument[0];ReturnValue;valueorg.apache.commons.lang3;ObjectUtils;false;CONST_SHORT;;;Argument[0];ReturnValue;valueorg.apache.commons.lang3;ObjectUtils;false;clone;;;Argument[0];ReturnValue;valueorg.apache.commons.lang3;ObjectUtils;false;cloneIfPossible;;;Argument[0];ReturnValue;valueorg.apache.commons.lang3;ObjectUtils;false;defaultIfNull;;;Argument[0..1];ReturnValue;valueorg.apache.commons.lang3;ObjectUtils;false;firstNonNull;;;ArrayElement of Argument[0];ReturnValue;valueorg.apache.commons.lang3;ObjectUtils;false;getIfNull;;;Argument[0];ReturnValue;valueorg.apache.commons.lang3;ObjectUtils;false;max;;;ArrayElement of Argument[0];ReturnValue;valueorg.apache.commons.lang3;ObjectUtils;false;median;;;ArrayElement of Argument[0];ReturnValue;valueorg.apache.commons.lang3;ObjectUtils;false;min;;;ArrayElement of Argument[0];ReturnValue;valueorg.apache.commons.lang3;ObjectUtils;false;mode;;;ArrayElement of Argument[0];ReturnValue;valueorg.apache.commons.lang3;ObjectUtils;false;requireNonEmpty;;;Argument[0];ReturnValue;valueorg.apache.commons.lang3;ObjectUtils;false;toString;(Object,String);;Argument[1];ReturnValue;valueorg.springframework.validation;Errors;true;addAllErrors;;;Argument[0];Argument[-1];taintorg.springframework.validation;Errors;true;getAllErrors;;;Argument[-1];ReturnValue;taintorg.springframework.validation;Errors;true;getFieldError;;;Argument[-1];ReturnValue;taintorg.springframework.validation;Errors;true;getFieldErrors;;;Argument[-1];ReturnValue;taintorg.springframework.validation;Errors;true;getGlobalError;;;Argument[-1];ReturnValue;taintorg.springframework.validation;Errors;true;getGlobalErrors;;;Argument[-1];ReturnValue;taintorg.springframework.validation;Errors;true;reject;;;Argument[0];Argument[-1];taintorg.springframework.validation;Errors;true;reject;;;Argument[2];Argument[-1];taintorg.springframework.validation;Errors;true;reject;;;ArrayElement of Argument[1];Argument[-1];taintorg.springframework.validation;Errors;true;rejectValue;(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String);;ArrayElement of Argument[2];Argument[-1];taintorg.springframework.validation;Errors;true;rejectValue;(java.lang.String,java.lang.String,java.lang.String);;Argument[2];Argument[-1];taintorg.springframework.validation;Errors;true;rejectValue;;;Argument[1];Argument[-1];taintorg.springframework.validation;Errors;true;rejectValue;;;Argument[3];Argument[-1];taintorg.springframework.cache;Cache$ValueRetrievalException;false;ValueRetrievalException;;;Argument[0];MapKey of Argument[-1];valueorg.springframework.cache;Cache$ValueRetrievalException;false;getKey;;;MapKey of Argument[-1];ReturnValue;valueorg.springframework.cache;Cache$ValueWrapper;true;get;;;MapValue of Argument[-1];ReturnValue;valueorg.springframework.cache;Cache;true;get;(Object);;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.springframework.cache;Cache;true;get;(Object,Callable);;MapValue of Argument[-1];ReturnValue;valueorg.springframework.cache;Cache;true;get;(Object,Class);;MapValue of Argument[-1];ReturnValue;valueorg.springframework.cache;Cache;true;getNativeCache;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.springframework.cache;Cache;true;getNativeCache;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.springframework.cache;Cache;true;put;;;Argument[0];MapKey of Argument[-1];valueorg.springframework.cache;Cache;true;put;;;Argument[1];MapValue of Argument[-1];valueorg.springframework.cache;Cache;true;putIfAbsent;;;Argument[0];MapKey of Argument[-1];valueorg.springframework.cache;Cache;true;putIfAbsent;;;Argument[1];MapValue of Argument[-1];valueorg.springframework.cache;Cache;true;putIfAbsent;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.springframework.web.multipart;MultipartFile;true;getBytes;;;Argument[-1];ReturnValue;taintorg.springframework.web.multipart;MultipartFile;true;getInputStream;;;Argument[-1];ReturnValue;taintorg.springframework.web.multipart;MultipartFile;true;getName;;;Argument[-1];ReturnValue;taintorg.springframework.web.multipart;MultipartFile;true;getOriginalFilename;;;Argument[-1];ReturnValue;taintorg.springframework.web.multipart;MultipartFile;true;getResource;;;Argument[-1];ReturnValue;taintorg.springframework.web.multipart;MultipartHttpServletRequest;true;getMultipartHeaders;;;Argument[-1];ReturnValue;taintorg.springframework.web.multipart;MultipartHttpServletRequest;true;getRequestHeaders;;;Argument[-1];ReturnValue;taintorg.springframework.web.multipart;MultipartRequest;true;getFile;;;Argument[-1];ReturnValue;taintorg.springframework.web.multipart;MultipartRequest;true;getFileMap;;;Argument[-1];MapValue of ReturnValue;taintorg.springframework.web.multipart;MultipartRequest;true;getFileNames;;;Argument[-1];Element of ReturnValue;taintorg.springframework.web.multipart;MultipartRequest;true;getFiles;;;Argument[-1];Element of ReturnValue;taintorg.springframework.web.multipart;MultipartRequest;true;getMultiFileMap;;;Argument[-1];MapValue of ReturnValue;taintorg.springframework.web.multipart;MultipartResolver;true;resolveMultipart;;;Argument[0];ReturnValue;taintjava.util;Optional;false;filter;;;Element of Argument[-1];Element of ReturnValue;valuejava.util;Optional;false;filter;;;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util;Optional;false;flatMap;;;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util;Optional;false;flatMap;;;ReturnValue of Argument[0];ReturnValue;valuejava.util;Optional;false;get;;;Element of Argument[-1];ReturnValue;valuejava.util;Optional;false;ifPresent;;;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util;Optional;false;ifPresentOrElse;;;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util;Optional;false;map;;;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util;Optional;false;map;;;ReturnValue of Argument[0];Element of ReturnValue;valuejava.util;Optional;false;of;;;Argument[0];Element of ReturnValue;valuejava.util;Optional;false;ofNullable;;;Argument[0];Element of ReturnValue;valuejava.util;Optional;false;or;;;Element of Argument[-1];Element of ReturnValue;valuejava.util;Optional;false;or;;;ReturnValue of Argument[0];ReturnValue;valuejava.util;Optional;false;orElse;;;Argument[0];ReturnValue;valuejava.util;Optional;false;orElse;;;Element of Argument[-1];ReturnValue;valuejava.util;Optional;false;orElseGet;;;Element of Argument[-1];ReturnValue;valuejava.util;Optional;false;orElseGet;;;ReturnValue of Argument[0];ReturnValue;valuejava.util;Optional;false;orElseThrow;;;Element of Argument[-1];ReturnValue;valuejava.util;Optional;false;stream;;;Element of Argument[-1];Element of ReturnValue;valuecom.google.common.cache;Cache;true;asMap;();;MapKey of Argument[-1];MapKey of ReturnValue;valuecom.google.common.cache;Cache;true;asMap;();;MapValue of Argument[-1];MapValue of ReturnValue;valuecom.google.common.cache;Cache;true;get;(Object,Callable);;MapValue of Argument[-1];ReturnValue;valuecom.google.common.cache;Cache;true;getAllPresent;(Iterable);;Element of Argument[0];MapKey of ReturnValue;valuecom.google.common.cache;Cache;true;getAllPresent;(Iterable);;MapKey of Argument[-1];MapKey of ReturnValue;valuecom.google.common.cache;Cache;true;getAllPresent;(Iterable);;MapValue of Argument[-1];MapValue of ReturnValue;valuecom.google.common.cache;Cache;true;getIfPresent;(Object);;MapValue of Argument[-1];ReturnValue;valuecom.google.common.cache;Cache;true;put;(Object,Object);;Argument[0];MapKey of Argument[-1];valuecom.google.common.cache;Cache;true;put;(Object,Object);;Argument[1];MapValue of Argument[-1];valuecom.google.common.cache;Cache;true;putAll;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valuecom.google.common.cache;Cache;true;putAll;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valuecom.google.common.cache;LoadingCache;true;apply;(Object);;MapValue of Argument[-1];ReturnValue;valuecom.google.common.cache;LoadingCache;true;get;(Object);;MapValue of Argument[-1];ReturnValue;valuecom.google.common.cache;LoadingCache;true;getAll;(Iterable);;Element of Argument[0];MapKey of Argument[-1];valuecom.google.common.cache;LoadingCache;true;getAll;(Iterable);;Element of Argument[0];MapKey of ReturnValue;valuecom.google.common.cache;LoadingCache;true;getAll;(Iterable);;MapValue of Argument[-1];MapValue of ReturnValue;valuecom.google.common.cache;LoadingCache;true;getUnchecked;(Object);;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.io;IOUtils;false;buffer;;;Argument[0];ReturnValue;taintorg.apache.commons.io;IOUtils;false;copy;;;Argument[0];Argument[1];taintorg.apache.commons.io;IOUtils;false;copyLarge;;;Argument[0];Argument[1];taintorg.apache.commons.io;IOUtils;false;read;;;Argument[0];Argument[1];taintorg.apache.commons.io;IOUtils;false;readFully;(InputStream,ByteBuffer);;Argument[0];Argument[1];taintorg.apache.commons.io;IOUtils;false;readFully;(InputStream,byte[]);;Argument[0];Argument[1];taintorg.apache.commons.io;IOUtils;false;readFully;(InputStream,byte[],int,int);;Argument[0];Argument[1];taintorg.apache.commons.io;IOUtils;false;readFully;(InputStream,int);;Argument[0];ReturnValue;taintorg.apache.commons.io;IOUtils;false;readFully;(ReadableByteChannel,ByteBuffer);;Argument[0];Argument[1];taintorg.apache.commons.io;IOUtils;false;readFully;(Reader,char[]);;Argument[0];Argument[1];taintorg.apache.commons.io;IOUtils;false;readFully;(Reader,char[],int,int);;Argument[0];Argument[1];taintorg.apache.commons.io;IOUtils;false;readLines;;;Argument[0];ReturnValue;taintorg.apache.commons.io;IOUtils;false;toBufferedInputStream;;;Argument[0];ReturnValue;taintorg.apache.commons.io;IOUtils;false;toBufferedReader;;;Argument[0];ReturnValue;taintorg.apache.commons.io;IOUtils;false;toByteArray;;;Argument[0];ReturnValue;taintorg.apache.commons.io;IOUtils;false;toCharArray;;;Argument[0];ReturnValue;taintorg.apache.commons.io;IOUtils;false;toInputStream;;;Argument[0];ReturnValue;taintorg.apache.commons.io;IOUtils;false;toString;;;Argument[0];ReturnValue;taintorg.apache.commons.io;IOUtils;false;write;;;Argument[0];Argument[1];taintorg.apache.commons.io;IOUtils;false;writeChunked;;;Argument[0];Argument[1];taintorg.apache.commons.io;IOUtils;false;writeLines;;;Argument[0];Argument[2];taintorg.apache.commons.io;IOUtils;false;writeLines;;;Argument[1];Argument[2];taintorg.apache.commons.lang3.builder;ToStringBuilder;false;append;(java.lang.Object);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.builder;ToStringBuilder;false;append;(java.lang.Object[]);;ArrayElement of Argument[0];Argument[-1];taintorg.apache.commons.lang3.builder;ToStringBuilder;false;append;(java.lang.String,boolean);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.builder;ToStringBuilder;false;append;(java.lang.String,java.lang.Object);;Argument[0..1];Argument[-1];taintorg.apache.commons.lang3.builder;ToStringBuilder;false;append;(java.lang.String,java.lang.Object[]);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.builder;ToStringBuilder;false;append;(java.lang.String,java.lang.Object[]);;ArrayElement of Argument[1];Argument[-1];taintorg.apache.commons.lang3.builder;ToStringBuilder;false;append;(java.lang.String,java.lang.Object[],boolean);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.builder;ToStringBuilder;false;append;(java.lang.String,java.lang.Object[],boolean);;ArrayElement of Argument[1];Argument[-1];taintorg.apache.commons.lang3.builder;ToStringBuilder;false;append;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.builder;ToStringBuilder;false;appendAsObjectToString;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.builder;ToStringBuilder;false;appendSuper;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.builder;ToStringBuilder;false;appendSuper;;;Argument[0];Argument[-1];taintorg.apache.commons.lang3.builder;ToStringBuilder;false;appendToString;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.builder;ToStringBuilder;false;appendToString;;;Argument[0];Argument[-1];taintorg.apache.commons.lang3.builder;ToStringBuilder;false;build;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.builder;ToStringBuilder;false;getStringBuffer;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.builder;ToStringBuilder;false;toString;;;Argument[-1];ReturnValue;taintandroid.content;ComponentName;false;ComponentName;(Context,Class);;Argument[1];Argument[-1];taintandroid.content;ComponentName;false;ComponentName;(Context,String);;Argument[1];Argument[-1];taintandroid.content;ComponentName;false;ComponentName;(Parcel);;Argument[0];Argument[-1];taintandroid.content;ComponentName;false;ComponentName;(String,String);;Argument[0..1];Argument[-1];taintandroid.content;ComponentName;false;createRelative;(Context,String);;Argument[1];ReturnValue;taintandroid.content;ComponentName;false;createRelative;(String,String);;Argument[0..1];ReturnValue;taintandroid.content;ComponentName;false;flattenToShortString;;;Argument[-1];ReturnValue;taintandroid.content;ComponentName;false;flattenToString;;;Argument[-1];ReturnValue;taintandroid.content;ComponentName;false;getClassName;;;Argument[-1];ReturnValue;taintandroid.content;ComponentName;false;getPackageName;;;Argument[-1];ReturnValue;taintandroid.content;ComponentName;false;getShortClassName;;;Argument[-1];ReturnValue;taintandroid.content;ComponentName;false;unflattenFromString;;;Argument[0];ReturnValue;taintandroid.content;Intent;true;Intent;(Context,Class);;Argument[1];Argument[-1];taintandroid.content;Intent;true;Intent;(Intent);;Argument[0];Argument[-1];taintandroid.content;Intent;true;Intent;(String,Uri,Context,Class);;Argument[3];Argument[-1];taintandroid.content;Intent;true;getIntent;(String);;Argument[0];ReturnValue;taintandroid.content;Intent;true;getIntentOld;(String);;Argument[0];ReturnValue;taintandroid.content;Intent;true;parseUri;(String,int);;Argument[0];ReturnValue;taintandroid.content;Intent;true;setClass;;;Argument[1];Argument[-1];taintandroid.content;Intent;true;setClassName;(Context,String);;Argument[1];Argument[-1];taintandroid.content;Intent;true;setClassName;(String,String);;Argument[0..1];Argument[-1];taintandroid.content;Intent;true;setComponent;;;Argument[0];Argument[-1];taintandroid.content;Intent;true;setPackage;;;Argument[0];Argument[-1];taintapply;;;Element of Argument[-1];Element of Parameter[0] of Argument[0];valueapply;;;Element of ReturnValue of Argument[0];Element of ReturnValue;valueblockingMap;;;Element of Argument[-1];Parameter[0] of Argument[0];valueblockingMap;;;ReturnValue of Argument[0];Element of ReturnValue;valueblockingOp;;;Element of Argument[-1];Parameter[0] of Argument[0];valuecacheIf;;;Element of Argument[-1];Parameter[0] of Argument[0];valueflatMap;;;Element of Argument[-1];Parameter[0] of Argument[0];valueflatMap;;;Element of ReturnValue of Argument[0];Element of ReturnValue;valueflatMapError;;;Element of ReturnValue of Argument[1];Element of ReturnValue;valueflatOp;;;Element of Argument[-1];Parameter[0] of Argument[0];valueflatten;;;Element of ReturnValue of Argument[0];Element of ReturnValue;valuemap;;;Element of Argument[-1];Parameter[0] of Argument[0];valuemap;;;ReturnValue of Argument[0];Element of ReturnValue;valuemapError;;;ReturnValue of Argument[1];Element of ReturnValue;valuemapIf;;;Element of Argument[-1];Parameter[0] of Argument[0];valuemapIf;;;Element of Argument[-1];Parameter[0] of Argument[1];valuemapIf;;;Element of Argument[-1];Parameter[0] of Argument[2];valuemapIf;;;ReturnValue of Argument[1];Element of ReturnValue;valuemapIf;;;ReturnValue of Argument[2];Element of ReturnValue;valuenext;;;Element of Argument[-1];Parameter[0] of Argument[0];valuenextOp;;;Element of Argument[-1];Parameter[0] of Argument[0];valuenextOpIf;;;Element of Argument[-1];Parameter[0] of Argument[0];valuenextOpIf;;;Element of Argument[-1];Parameter[0] of Argument[1];valuereplace;;;Element of Argument[0];Element of ReturnValue;valueroute;;;Argument[-1];ReturnValue;valueroute;;;Element of Argument[-1];Parameter[0] of Argument[0];valueroute;;;Element of Argument[-1];Parameter[0] of Argument[1];valuesync;;;ReturnValue of Argument[0];Element of ReturnValue;valuethen;;;Element of Argument[-1];Parameter[0] of Argument[0];valuevalue;;;Argument[0];Element of ReturnValue;valuewiretap;;;Element of Argument[-1];Element of Parameter[0] of Argument[0];valueorg.apache.commons.lang3.text;WordUtils;false;capitalize;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;WordUtils;false;capitalize;(java.lang.String,char[]);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;WordUtils;false;capitalizeFully;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;WordUtils;false;capitalizeFully;(java.lang.String,char[]);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;WordUtils;false;initials;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;WordUtils;false;initials;(java.lang.String,char[]);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;WordUtils;false;swapCase;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;WordUtils;false;uncapitalize;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;WordUtils;false;uncapitalize;(java.lang.String,char[]);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;WordUtils;false;wrap;(java.lang.String,int,java.lang.String,boolean);;Argument[2];ReturnValue;taintorg.apache.commons.lang3.text;WordUtils;false;wrap;(java.lang.String,int,java.lang.String,boolean,java.lang.String);;Argument[2];ReturnValue;taintorg.apache.commons.lang3.text;WordUtils;false;wrap;;;Argument[0];ReturnValue;taintorg.apache.commons.text;WordUtils;false;abbreviate;;;Argument[0];ReturnValue;taintorg.apache.commons.text;WordUtils;false;abbreviate;;;Argument[3];ReturnValue;taintorg.apache.commons.text;WordUtils;false;capitalize;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.text;WordUtils;false;capitalize;(java.lang.String,char[]);;Argument[0];ReturnValue;taintorg.apache.commons.text;WordUtils;false;capitalizeFully;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.text;WordUtils;false;capitalizeFully;(java.lang.String,char[]);;Argument[0];ReturnValue;taintorg.apache.commons.text;WordUtils;false;initials;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.text;WordUtils;false;initials;(java.lang.String,char[]);;Argument[0];ReturnValue;taintorg.apache.commons.text;WordUtils;false;swapCase;;;Argument[0];ReturnValue;taintorg.apache.commons.text;WordUtils;false;uncapitalize;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.text;WordUtils;false;uncapitalize;(java.lang.String,char[]);;Argument[0];ReturnValue;taintorg.apache.commons.text;WordUtils;false;wrap;(java.lang.String,int,java.lang.String,boolean);;Argument[2];ReturnValue;taintorg.apache.commons.text;WordUtils;false;wrap;(java.lang.String,int,java.lang.String,boolean,java.lang.String);;Argument[2];ReturnValue;taintorg.apache.commons.text;WordUtils;false;wrap;;;Argument[0];ReturnValue;taintorg.springframework.beans;MutablePropertyValues;true;add;(String,Object);;Argument[-1];ReturnValue;valueorg.springframework.beans;MutablePropertyValues;true;add;(String,Object);;Argument[0];MapKey of Element of Argument[-1];valueorg.springframework.beans;MutablePropertyValues;true;add;(String,Object);;Argument[1];MapValue of Element of Argument[-1];valueorg.springframework.beans;MutablePropertyValues;true;addPropertyValue;(PropertyValue);;Argument[-1];ReturnValue;valueorg.springframework.beans;MutablePropertyValues;true;addPropertyValue;(PropertyValue);;Argument[0];Element of Argument[-1];valueorg.springframework.beans;MutablePropertyValues;true;addPropertyValue;(String,Object);;Argument[0];MapKey of Element of Argument[-1];valueorg.springframework.beans;MutablePropertyValues;true;addPropertyValue;(String,Object);;Argument[1];MapValue of Element of Argument[-1];valueorg.springframework.beans;MutablePropertyValues;true;addPropertyValues;(Map);;Argument[-1];ReturnValue;valueorg.springframework.beans;MutablePropertyValues;true;addPropertyValues;(Map);;MapKey of Argument[0];MapKey of Element of Argument[-1];valueorg.springframework.beans;MutablePropertyValues;true;addPropertyValues;(Map);;MapValue of Argument[0];MapValue of Element of Argument[-1];valueorg.springframework.beans;MutablePropertyValues;true;addPropertyValues;(PropertyValues);;Argument[-1];ReturnValue;valueorg.springframework.beans;MutablePropertyValues;true;addPropertyValues;(PropertyValues);;Element of Argument[0];Element of Argument[-1];valueorg.springframework.beans;MutablePropertyValues;true;get;;;MapValue of Element of Argument[-1];ReturnValue;valueorg.springframework.beans;MutablePropertyValues;true;getPropertyValue;;;Element of Argument[-1];ReturnValue;valueorg.springframework.beans;MutablePropertyValues;true;getPropertyValueList;;;Element of Argument[-1];Element of ReturnValue;valueorg.springframework.beans;MutablePropertyValues;true;getPropertyValues;;;Element of Argument[-1];ArrayElement of ReturnValue;valueorg.springframework.beans;MutablePropertyValues;true;setPropertyValueAt;;;Argument[0];Element of Argument[-1];valueorg.springframework.beans;PropertyValue;false;PropertyValue;(PropertyValue);;Argument[0];Argument[-1];valueorg.springframework.beans;PropertyValue;false;PropertyValue;(PropertyValue,Object);;Argument[1];MapValue of Argument[-1];valueorg.springframework.beans;PropertyValue;false;PropertyValue;(PropertyValue,Object);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.springframework.beans;PropertyValue;false;PropertyValue;(String,Object);;Argument[0];MapKey of Argument[-1];valueorg.springframework.beans;PropertyValue;false;PropertyValue;(String,Object);;Argument[1];MapValue of Argument[-1];valueorg.springframework.beans;PropertyValue;false;getName;;;MapKey of Argument[-1];ReturnValue;valueorg.springframework.beans;PropertyValue;false;getValue;;;MapValue of Argument[-1];ReturnValue;valueorg.springframework.beans;PropertyValues;true;getPropertyValue;;;Element of Argument[-1];ReturnValue;valueorg.springframework.beans;PropertyValues;true;getPropertyValues;;;Element of Argument[-1];ArrayElement of ReturnValue;valueorg.springframework.ui;ConcurrentModel;false;ConcurrentModel;(Object);;Argument[0];MapValue of Argument[-1];valueorg.springframework.ui;ConcurrentModel;false;ConcurrentModel;(String,Object);;Argument[0];MapKey of Argument[-1];valueorg.springframework.ui;ConcurrentModel;false;ConcurrentModel;(String,Object);;Argument[1];MapValue of Argument[-1];valueorg.springframework.ui;Model;true;addAllAttributes;(Collection);;Element of Argument[0];MapValue of Argument[-1];valueorg.springframework.ui;Model;true;addAllAttributes;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.springframework.ui;Model;true;addAllAttributes;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.springframework.ui;Model;true;addAllAttributes;;;Argument[-1];ReturnValue;valueorg.springframework.ui;Model;true;addAttribute;(Object);;Argument[0];MapValue of Argument[-1];valueorg.springframework.ui;Model;true;addAttribute;(String,Object);;Argument[0];MapKey of Argument[-1];valueorg.springframework.ui;Model;true;addAttribute;(String,Object);;Argument[1];MapValue of Argument[-1];valueorg.springframework.ui;Model;true;addAttribute;;;Argument[-1];ReturnValue;valueorg.springframework.ui;Model;true;asMap;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.springframework.ui;Model;true;asMap;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.springframework.ui;Model;true;getAttribute;;;MapValue of Argument[-1];ReturnValue;valueorg.springframework.ui;Model;true;mergeAttributes;;;Argument[-1];ReturnValue;valueorg.springframework.ui;Model;true;mergeAttributes;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.springframework.ui;Model;true;mergeAttributes;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.springframework.ui;ModelMap;false;ModelMap;(Object);;Argument[0];MapValue of Argument[-1];valueorg.springframework.ui;ModelMap;false;ModelMap;(String,Object);;Argument[0];MapKey of Argument[-1];valueorg.springframework.ui;ModelMap;false;ModelMap;(String,Object);;Argument[1];MapValue of Argument[-1];valueorg.springframework.ui;ModelMap;false;addAllAttributes;(Collection);;Element of Argument[0];MapValue of Argument[-1];valueorg.springframework.ui;ModelMap;false;addAllAttributes;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.springframework.ui;ModelMap;false;addAllAttributes;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.springframework.ui;ModelMap;false;addAllAttributes;;;Argument[-1];ReturnValue;valueorg.springframework.ui;ModelMap;false;addAttribute;(Object);;Argument[0];MapValue of Argument[-1];valueorg.springframework.ui;ModelMap;false;addAttribute;(String,Object);;Argument[0];MapKey of Argument[-1];valueorg.springframework.ui;ModelMap;false;addAttribute;(String,Object);;Argument[1];MapValue of Argument[-1];valueorg.springframework.ui;ModelMap;false;addAttribute;;;Argument[-1];ReturnValue;valueorg.springframework.ui;ModelMap;false;getAttribute;;;MapValue of Argument[-1];ReturnValue;valueorg.springframework.ui;ModelMap;false;mergeAttributes;;;Argument[-1];ReturnValue;valueorg.springframework.ui;ModelMap;false;mergeAttributes;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.springframework.ui;ModelMap;false;mergeAttributes;;;MapValue of Argument[0];MapValue of Argument[-1];valuejava.io;StringWriter;true;append;;;Argument[-1];ReturnValue;valuejava.io;StringWriter;true;append;;;Argument[0];Argument[-1];taintjava.io;StringWriter;true;write;;;Argument[0];Argument[-1];taintjava.lang;AbstractStringBuilder;true;AbstractStringBuilder;(String);;Argument[0];Argument[-1];taintjava.lang;AbstractStringBuilder;true;append;;;Argument[-1];ReturnValue;valuejava.lang;AbstractStringBuilder;true;append;;;Argument[0];Argument[-1];taintjava.lang;AbstractStringBuilder;true;insert;;;Argument[-1];ReturnValue;valuejava.lang;AbstractStringBuilder;true;insert;;;Argument[1];Argument[-1];taintjava.lang;AbstractStringBuilder;true;replace;;;Argument[-1];ReturnValue;valuejava.lang;AbstractStringBuilder;true;replace;;;Argument[2];Argument[-1];taintjava.lang;AbstractStringBuilder;true;toString;;;Argument[-1];ReturnValue;taintjava.lang;CharSequence;true;subSequence;;;Argument[-1];ReturnValue;taintjava.lang;CharSequence;true;toString;;;Argument[-1];ReturnValue;taintjava.lang;String;false;String;;;Argument[0];Argument[-1];taintjava.lang;String;false;concat;(String);;Argument[-1];ReturnValue;taintjava.lang;String;false;concat;(String);;Argument[0];ReturnValue;taintjava.lang;String;false;copyValueOf;;;Argument[0];ReturnValue;taintjava.lang;String;false;endsWith;;;Argument[-1];ReturnValue;taintjava.lang;String;false;format;(Locale,String,Object[]);;Argument[1];ReturnValue;taintjava.lang;String;false;format;(Locale,String,Object[]);;ArrayElement of Argument[2];ReturnValue;taintjava.lang;String;false;format;(String,Object[]);;Argument[0];ReturnValue;taintjava.lang;String;false;format;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taintjava.lang;String;false;formatted;(Object[]);;Argument[-1];ReturnValue;taintjava.lang;String;false;formatted;(Object[]);;ArrayElement of Argument[0];ReturnValue;taintjava.lang;String;false;getBytes;;;Argument[-1];ReturnValue;taintjava.lang;String;false;getChars;;;Argument[-1];Argument[2];taintjava.lang;String;false;indent;;;Argument[-1];ReturnValue;taintjava.lang;String;false;intern;;;Argument[-1];ReturnValue;taintjava.lang;String;false;join;;;Argument[0..1];ReturnValue;taintjava.lang;String;false;repeat;(int);;Argument[-1];ReturnValue;taintjava.lang;String;false;split;;;Argument[-1];ReturnValue;taintjava.lang;String;false;strip;;;Argument[-1];ReturnValue;taintjava.lang;String;false;stripIndent;;;Argument[-1];ReturnValue;taintjava.lang;String;false;stripLeading;;;Argument[-1];ReturnValue;taintjava.lang;String;false;stripTrailing;;;Argument[-1];ReturnValue;taintjava.lang;String;false;substring;;;Argument[-1];ReturnValue;taintjava.lang;String;false;toCharArray;;;Argument[-1];ReturnValue;taintjava.lang;String;false;toLowerCase;;;Argument[-1];ReturnValue;taintjava.lang;String;false;toString;;;Argument[-1];ReturnValue;valuejava.lang;String;false;toUpperCase;;;Argument[-1];ReturnValue;taintjava.lang;String;false;translateEscapes;;;Argument[-1];ReturnValue;taintjava.lang;String;false;trim;;;Argument[-1];ReturnValue;taintjava.lang;String;false;valueOf;(char);;Argument[0];ReturnValue;taintjava.lang;String;false;valueOf;(char[]);;Argument[0];ReturnValue;taintjava.lang;String;false;valueOf;(char[],int,int);;Argument[0];ReturnValue;taintjava.lang;StringBuffer;true;StringBuffer;(CharSequence);;Argument[0];Argument[-1];taintjava.lang;StringBuffer;true;StringBuffer;(String);;Argument[0];Argument[-1];taintjava.lang;StringBuilder;true;StringBuilder;;;Argument[0];Argument[-1];taintorg.apache.commons.lang3.tuple;ImmutablePair;false;ImmutablePair;(java.lang.Object,java.lang.Object);;Argument[0];Field[org.apache.commons.lang3.tuple.ImmutablePair.left] of Argument[-1];valueorg.apache.commons.lang3.tuple;ImmutablePair;false;ImmutablePair;(java.lang.Object,java.lang.Object);;Argument[1];Field[org.apache.commons.lang3.tuple.ImmutablePair.right] of Argument[-1];valueorg.apache.commons.lang3.tuple;ImmutablePair;false;getLeft;;;Field[org.apache.commons.lang3.tuple.ImmutablePair.left] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.tuple;ImmutablePair;false;getRight;;;Field[org.apache.commons.lang3.tuple.ImmutablePair.right] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.tuple;ImmutablePair;false;left;;;Argument[0];Field[org.apache.commons.lang3.tuple.ImmutablePair.left] of ReturnValue;valueorg.apache.commons.lang3.tuple;ImmutablePair;false;of;(java.lang.Object,java.lang.Object);;Argument[0];Field[org.apache.commons.lang3.tuple.ImmutablePair.left] of ReturnValue;valueorg.apache.commons.lang3.tuple;ImmutablePair;false;of;(java.lang.Object,java.lang.Object);;Argument[1];Field[org.apache.commons.lang3.tuple.ImmutablePair.right] of ReturnValue;valueorg.apache.commons.lang3.tuple;ImmutablePair;false;right;;;Argument[0];Field[org.apache.commons.lang3.tuple.ImmutablePair.right] of ReturnValue;valueorg.apache.commons.lang3.tuple;MutablePair;false;MutablePair;(java.lang.Object,java.lang.Object);;Argument[0];Field[org.apache.commons.lang3.tuple.MutablePair.left] of Argument[-1];valueorg.apache.commons.lang3.tuple;MutablePair;false;MutablePair;(java.lang.Object,java.lang.Object);;Argument[1];Field[org.apache.commons.lang3.tuple.MutablePair.right] of Argument[-1];valueorg.apache.commons.lang3.tuple;MutablePair;false;getLeft;;;Field[org.apache.commons.lang3.tuple.MutablePair.left] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.tuple;MutablePair;false;getRight;;;Field[org.apache.commons.lang3.tuple.MutablePair.right] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.tuple;MutablePair;false;of;(java.lang.Object,java.lang.Object);;Argument[0];Field[org.apache.commons.lang3.tuple.MutablePair.left] of ReturnValue;valueorg.apache.commons.lang3.tuple;MutablePair;false;of;(java.lang.Object,java.lang.Object);;Argument[1];Field[org.apache.commons.lang3.tuple.MutablePair.right] of ReturnValue;valueorg.apache.commons.lang3.tuple;MutablePair;false;setLeft;;;Argument[0];Field[org.apache.commons.lang3.tuple.MutablePair.left] of Argument[-1];valueorg.apache.commons.lang3.tuple;MutablePair;false;setRight;;;Argument[0];Field[org.apache.commons.lang3.tuple.MutablePair.right] of Argument[-1];valueorg.apache.commons.lang3.tuple;MutablePair;false;setValue;;;Argument[0];Field[org.apache.commons.lang3.tuple.MutablePair.right] of Argument[-1];valueorg.apache.commons.lang3.tuple;Pair;false;getKey;;;Field[org.apache.commons.lang3.tuple.ImmutablePair.left] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.tuple;Pair;false;getKey;;;Field[org.apache.commons.lang3.tuple.MutablePair.left] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.tuple;Pair;false;getValue;;;Field[org.apache.commons.lang3.tuple.ImmutablePair.right] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.tuple;Pair;false;getValue;;;Field[org.apache.commons.lang3.tuple.MutablePair.right] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.tuple;Pair;false;of;(java.lang.Object,java.lang.Object);;Argument[0];Field[org.apache.commons.lang3.tuple.ImmutablePair.left] of ReturnValue;valueorg.apache.commons.lang3.tuple;Pair;false;of;(java.lang.Object,java.lang.Object);;Argument[1];Field[org.apache.commons.lang3.tuple.ImmutablePair.right] of ReturnValue;valueorg.apache.commons.lang3.text;StrTokenizer;false;StrTokenizer;;;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrTokenizer;false;clone;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrTokenizer;false;getCSVInstance;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrTokenizer;false;getContent;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrTokenizer;false;getTSVInstance;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrTokenizer;false;getTokenArray;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrTokenizer;false;getTokenList;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrTokenizer;false;next;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrTokenizer;false;nextToken;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrTokenizer;false;previous;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrTokenizer;false;previousToken;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrTokenizer;false;reset;;;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrTokenizer;false;reset;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrTokenizer;false;toString;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrTokenizer;false;StrTokenizer;;;Argument[0];Argument[-1];taintorg.apache.commons.text;StrTokenizer;false;clone;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrTokenizer;false;getCSVInstance;;;Argument[0];ReturnValue;taintorg.apache.commons.text;StrTokenizer;false;getContent;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrTokenizer;false;getTSVInstance;;;Argument[0];ReturnValue;taintorg.apache.commons.text;StrTokenizer;false;getTokenArray;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrTokenizer;false;getTokenList;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrTokenizer;false;next;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrTokenizer;false;nextToken;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrTokenizer;false;previous;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrTokenizer;false;previousToken;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrTokenizer;false;reset;;;Argument[0];Argument[-1];taintorg.apache.commons.text;StrTokenizer;false;reset;;;Argument[0];ReturnValue;taintorg.apache.commons.text;StrTokenizer;false;toString;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StringTokenizer;false;StringTokenizer;;;Argument[0];Argument[-1];taintorg.apache.commons.text;StringTokenizer;false;clone;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StringTokenizer;false;getCSVInstance;;;Argument[0];ReturnValue;taintorg.apache.commons.text;StringTokenizer;false;getContent;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StringTokenizer;false;getTSVInstance;;;Argument[0];ReturnValue;taintorg.apache.commons.text;StringTokenizer;false;getTokenArray;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StringTokenizer;false;getTokenList;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StringTokenizer;false;next;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StringTokenizer;false;nextToken;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StringTokenizer;false;previous;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StringTokenizer;false;previousToken;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StringTokenizer;false;reset;;;Argument[0];Argument[-1];taintorg.apache.commons.text;StringTokenizer;false;reset;;;Argument[0];ReturnValue;taintorg.apache.commons.text;StringTokenizer;false;toString;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3;ArrayUtils;false;add;(boolean[],boolean);;Argument[1];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;add;(byte[],byte);;Argument[1];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;add;(char[],char);;Argument[1];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;add;(double[],double);;Argument[1];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;add;(float[],float);;Argument[1];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;add;(int[],int);;Argument[1];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;add;(java.lang.Object[],java.lang.Object);;Argument[1];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;add;(long[],long);;Argument[1];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;add;(short[],short);;Argument[1];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;add;;;Argument[2];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;add;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;addAll;;;ArrayElement of Argument[0..1];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;addFirst;;;Argument[1];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;addFirst;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;clone;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;get;(java.lang.Object[],int,java.lang.Object);;Argument[2];ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;get;;;ArrayElement of Argument[0];ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;insert;;;ArrayElement of Argument[1..2];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;nullToEmpty;(java.lang.Object[],java.lang.Class);;Argument[0];ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;nullToEmpty;(java.lang.String[]);;Argument[0];ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;remove;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;removeAll;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;removeAllOccurences;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;removeAllOccurrences;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;removeElement;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;removeElements;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;subarray;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;toArray;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;toMap;;;ArrayElement of ArrayElement of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;toMap;;;ArrayElement of ArrayElement of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;toMap;;;MapKey of ArrayElement of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;toMap;;;MapValue of ArrayElement of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;toObject;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;toPrimitive;;;Argument[1];ArrayElement of ReturnValue;valueorg.apache.commons.lang3;ArrayUtils;false;toPrimitive;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueandroid.net;Uri$Builder;false;appendEncodedPath;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;appendEncodedPath;;;Argument[0];Argument[-1];taintandroid.net;Uri$Builder;false;appendPath;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;appendPath;;;Argument[0];Argument[-1];taintandroid.net;Uri$Builder;false;appendQueryParameter;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;appendQueryParameter;;;Argument[0..1];Argument[-1];taintandroid.net;Uri$Builder;false;authority;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;authority;;;Argument[0];Argument[-1];taintandroid.net;Uri$Builder;false;build;;;Argument[-1];ReturnValue;taintandroid.net;Uri$Builder;false;clearQuery;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;encodedAuthority;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;encodedAuthority;;;Argument[0];Argument[-1];taintandroid.net;Uri$Builder;false;encodedFragment;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;encodedFragment;;;Argument[0];Argument[-1];taintandroid.net;Uri$Builder;false;encodedOpaquePart;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;encodedOpaquePart;;;Argument[0];Argument[-1];taintandroid.net;Uri$Builder;false;encodedPath;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;encodedPath;;;Argument[0];Argument[-1];taintandroid.net;Uri$Builder;false;encodedQuery;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;encodedQuery;;;Argument[0];Argument[-1];taintandroid.net;Uri$Builder;false;fragment;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;fragment;;;Argument[0];Argument[-1];taintandroid.net;Uri$Builder;false;opaquePart;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;opaquePart;;;Argument[0];Argument[-1];taintandroid.net;Uri$Builder;false;path;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;path;;;Argument[0];Argument[-1];taintandroid.net;Uri$Builder;false;query;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;query;;;Argument[0];Argument[-1];taintandroid.net;Uri$Builder;false;scheme;;;Argument[-1];ReturnValue;valueandroid.net;Uri$Builder;false;scheme;;;Argument[0];Argument[-1];taintandroid.net;Uri$Builder;false;toString;;;Argument[-1];ReturnValue;taintandroid.net;Uri;false;decode;;;Argument[0];ReturnValue;taintandroid.net;Uri;false;encode;;;Argument[0];ReturnValue;taintandroid.net;Uri;false;fromFile;;;Argument[0];ReturnValue;taintandroid.net;Uri;false;fromParts;;;Argument[0..2];ReturnValue;taintandroid.net;Uri;false;parse;;;Argument[0];ReturnValue;taintandroid.net;Uri;false;withAppendedPath;;;Argument[0..1];ReturnValue;taintandroid.net;Uri;false;writeToParcel;;;Argument[1];Argument[0];taintandroid.net;Uri;true;buildUpon;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getAuthority;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getEncodedAuthority;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getEncodedFragment;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getEncodedPath;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getEncodedQuery;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getEncodedSchemeSpecificPart;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getEncodedUserInfo;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getFragment;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getHost;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getLastPathSegment;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getPath;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getPathSegments;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getQuery;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getQueryParameter;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getQueryParameterNames;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getQueryParameters;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getScheme;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getSchemeSpecificPart;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;getUserInfo;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;normalizeScheme;;;Argument[-1];ReturnValue;taintandroid.net;Uri;true;toString;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.tuple;ImmutableTriple;false;ImmutableTriple;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[0];Field[org.apache.commons.lang3.tuple.ImmutableTriple.left] of Argument[-1];valueorg.apache.commons.lang3.tuple;ImmutableTriple;false;ImmutableTriple;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[1];Field[org.apache.commons.lang3.tuple.ImmutableTriple.middle] of Argument[-1];valueorg.apache.commons.lang3.tuple;ImmutableTriple;false;ImmutableTriple;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[2];Field[org.apache.commons.lang3.tuple.ImmutableTriple.right] of Argument[-1];valueorg.apache.commons.lang3.tuple;ImmutableTriple;false;getLeft;;;Field[org.apache.commons.lang3.tuple.ImmutableTriple.left] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.tuple;ImmutableTriple;false;getMiddle;;;Field[org.apache.commons.lang3.tuple.ImmutableTriple.middle] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.tuple;ImmutableTriple;false;getRight;;;Field[org.apache.commons.lang3.tuple.ImmutableTriple.right] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.tuple;ImmutableTriple;false;of;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[0];Field[org.apache.commons.lang3.tuple.ImmutableTriple.left] of ReturnValue;valueorg.apache.commons.lang3.tuple;ImmutableTriple;false;of;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[1];Field[org.apache.commons.lang3.tuple.ImmutableTriple.middle] of ReturnValue;valueorg.apache.commons.lang3.tuple;ImmutableTriple;false;of;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[2];Field[org.apache.commons.lang3.tuple.ImmutableTriple.right] of ReturnValue;valueorg.apache.commons.lang3.tuple;MutableTriple;false;MutableTriple;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[0];Field[org.apache.commons.lang3.tuple.MutableTriple.left] of Argument[-1];valueorg.apache.commons.lang3.tuple;MutableTriple;false;MutableTriple;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[1];Field[org.apache.commons.lang3.tuple.MutableTriple.middle] of Argument[-1];valueorg.apache.commons.lang3.tuple;MutableTriple;false;MutableTriple;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[2];Field[org.apache.commons.lang3.tuple.MutableTriple.right] of Argument[-1];valueorg.apache.commons.lang3.tuple;MutableTriple;false;getLeft;;;Field[org.apache.commons.lang3.tuple.MutableTriple.left] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.tuple;MutableTriple;false;getMiddle;;;Field[org.apache.commons.lang3.tuple.MutableTriple.middle] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.tuple;MutableTriple;false;getRight;;;Field[org.apache.commons.lang3.tuple.MutableTriple.right] of Argument[-1];ReturnValue;valueorg.apache.commons.lang3.tuple;MutableTriple;false;of;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[0];Field[org.apache.commons.lang3.tuple.MutableTriple.left] of ReturnValue;valueorg.apache.commons.lang3.tuple;MutableTriple;false;of;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[1];Field[org.apache.commons.lang3.tuple.MutableTriple.middle] of ReturnValue;valueorg.apache.commons.lang3.tuple;MutableTriple;false;of;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[2];Field[org.apache.commons.lang3.tuple.MutableTriple.right] of ReturnValue;valueorg.apache.commons.lang3.tuple;MutableTriple;false;setLeft;;;Argument[0];Field[org.apache.commons.lang3.tuple.MutableTriple.left] of Argument[-1];valueorg.apache.commons.lang3.tuple;MutableTriple;false;setMiddle;;;Argument[0];Field[org.apache.commons.lang3.tuple.MutableTriple.middle] of Argument[-1];valueorg.apache.commons.lang3.tuple;MutableTriple;false;setRight;;;Argument[0];Field[org.apache.commons.lang3.tuple.MutableTriple.right] of Argument[-1];valueorg.apache.commons.lang3.tuple;Triple;false;of;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[0];Field[org.apache.commons.lang3.tuple.ImmutableTriple.left] of ReturnValue;valueorg.apache.commons.lang3.tuple;Triple;false;of;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[1];Field[org.apache.commons.lang3.tuple.ImmutableTriple.middle] of ReturnValue;valueorg.apache.commons.lang3.tuple;Triple;false;of;(java.lang.Object,java.lang.Object,java.lang.Object);;Argument[2];Field[org.apache.commons.lang3.tuple.ImmutableTriple.right] of ReturnValue;valueandroid.content;ContentProvider;true;query;(Uri,String[],String,String[],String);;Argument[0];ReturnValue;taintandroid.content;ContentProvider;true;query;(Uri,String[],String,String[],String,CancellationSignal);;Argument[0];ReturnValue;taintandroid.content;ContentResolver;true;query;(Uri,String[],String,String[],String);;Argument[0];ReturnValue;taintandroid.content;ContentResolver;true;query;(Uri,String[],String,String[],String,CancellationSignal);;Argument[0];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;appendColumns;(StringBuilder,String[]);;ArrayElement of Argument[1];Argument[0];taintandroid.database.sqlite;SQLiteQueryBuilder;true;appendWhere;(CharSequence);;Argument[0];Argument[-1];taintandroid.database.sqlite;SQLiteQueryBuilder;true;appendWhereStandalone;(CharSequence);;Argument[0];Argument[-1];taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildQuery;(String[],String,String,String,String,String);;Argument[-1];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildQuery;(String[],String,String,String,String,String);;Argument[1..5];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildQuery;(String[],String,String,String,String,String);;ArrayElement of Argument[0];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildQuery;(String[],String,String[],String,String,String,String);;Argument[-1];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildQuery;(String[],String,String[],String,String,String,String);;Argument[1];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildQuery;(String[],String,String[],String,String,String,String);;Argument[3..6];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildQuery;(String[],String,String[],String,String,String,String);;ArrayElement of Argument[0];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildQueryString;(boolean,String,String[],String,String,String,String,String);;Argument[1];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildQueryString;(boolean,String,String[],String,String,String,String,String);;Argument[3..7];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildQueryString;(boolean,String,String[],String,String,String,String,String);;ArrayElement of Argument[2];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildUnionQuery;(String[],String,String);;Argument[-1];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildUnionQuery;(String[],String,String);;Argument[1..2];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildUnionQuery;(String[],String,String);;ArrayElement of Argument[0];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildUnionSubQuery;(String,String[],Set,int,String,String,String,String);;Argument[-1..0];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildUnionSubQuery;(String,String[],Set,int,String,String,String,String);;Argument[4..7];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildUnionSubQuery;(String,String[],Set,int,String,String,String,String);;ArrayElement of Argument[1];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildUnionSubQuery;(String,String[],Set,int,String,String,String,String);;Element of Argument[2];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildUnionSubQuery;(String,String[],Set,int,String,String,String[],String,String);;Argument[-1..0];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildUnionSubQuery;(String,String[],Set,int,String,String,String[],String,String);;Argument[4..5];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildUnionSubQuery;(String,String[],Set,int,String,String,String[],String,String);;Argument[7..8];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildUnionSubQuery;(String,String[],Set,int,String,String,String[],String,String);;ArrayElement of Argument[1];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;buildUnionSubQuery;(String,String[],Set,int,String,String,String[],String,String);;Element of Argument[2];ReturnValue;taintandroid.database.sqlite;SQLiteQueryBuilder;true;setProjectionMap;(Map);;MapKey of Argument[0];Argument[-1];taintandroid.database.sqlite;SQLiteQueryBuilder;true;setProjectionMap;(Map);;MapValue of Argument[0];Argument[-1];taintandroid.database.sqlite;SQLiteQueryBuilder;true;setTables;(String);;Argument[0];Argument[-1];taintandroid.database;DatabaseUtils;false;appendSelectionArgs;(String[],String[]);;ArrayElement of Argument[0..1];ArrayElement of ReturnValue;taintandroid.database;DatabaseUtils;false;concatenateWhere;(String,String);;Argument[0..1];ReturnValue;taintcn.hutool.core.codec;Base64;true;decode;;;Argument[0];ReturnValue;taintcom.esotericsoftware.kryo.io;Input;false;Input;;;Argument[0];Argument[-1];taintcom.esotericsoftware.kryo5.io;Input;false;Input;;;Argument[0];Argument[-1];taintjava.beans;XMLDecoder;false;XMLDecoder;;;Argument[0];Argument[-1];taintjava.io;BufferedInputStream;false;BufferedInputStream;;;Argument[0];Argument[-1];taintjava.io;BufferedReader;false;BufferedReader;;;Argument[0];Argument[-1];taintjava.io;BufferedReader;true;readLine;;;Argument[-1];ReturnValue;taintjava.io;ByteArrayInputStream;false;ByteArrayInputStream;;;Argument[0];Argument[-1];taintjava.io;ByteArrayOutputStream;false;toByteArray;;;Argument[-1];ReturnValue;taintjava.io;ByteArrayOutputStream;false;toString;;;Argument[-1];ReturnValue;taintjava.io;ByteArrayOutputStream;false;writeTo;;;Argument[-1];Argument[0];taintjava.io;CharArrayReader;false;CharArrayReader;;;Argument[0];Argument[-1];taintjava.io;DataInputStream;false;DataInputStream;;;Argument[0];Argument[-1];taintjava.io;File;false;File;;;Argument[0];Argument[-1];taintjava.io;File;false;File;;;Argument[1];Argument[-1];taintjava.io;File;false;toPath;;;Argument[-1];ReturnValue;taintjava.io;File;false;toURI;;;Argument[-1];ReturnValue;taintjava.io;FilterOutputStream;true;FilterOutputStream;(OutputStream);;Argument[0];Argument[-1];taintjava.io;InputStream;true;read;(byte[]);;Argument[-1];Argument[0];taintjava.io;InputStream;true;read;(byte[],int,int);;Argument[-1];Argument[0];taintjava.io;InputStream;true;readAllBytes;;;Argument[-1];ReturnValue;taintjava.io;InputStream;true;readNBytes;(byte[],int,int);;Argument[-1];Argument[0];taintjava.io;InputStream;true;readNBytes;(int);;Argument[-1];ReturnValue;taintjava.io;InputStream;true;transferTo;(OutputStream);;Argument[-1];Argument[0];taintjava.io;InputStreamReader;false;InputStreamReader;;;Argument[0];Argument[-1];taintjava.io;ObjectInputStream;false;ObjectInputStream;;;Argument[0];Argument[-1];taintjava.io;OutputStream;true;write;(byte[]);;Argument[0];Argument[-1];taintjava.io;OutputStream;true;write;(byte[],int,int);;Argument[0];Argument[-1];taintjava.io;OutputStream;true;write;(int);;Argument[0];Argument[-1];taintjava.io;Reader;true;read;();;Argument[-1];ReturnValue;taintjava.io;Reader;true;read;;;Argument[-1];Argument[0];taintjava.io;StringReader;false;StringReader;;;Argument[0];Argument[-1];taintjava.lang;System;false;arraycopy;;;Argument[0];Argument[2];taintjava.net;URI;false;URI;(String);;Argument[0];Argument[-1];taintjava.net;URI;false;create;;;Argument[0];ReturnValue;taintjava.net;URI;false;toAsciiString;;;Argument[-1];ReturnValue;taintjava.net;URI;false;toString;;;Argument[-1];ReturnValue;taintjava.net;URI;false;toURL;;;Argument[-1];ReturnValue;taintjava.net;URL;false;URL;(String);;Argument[0];Argument[-1];taintjava.net;URLDecoder;false;decode;;;Argument[0];ReturnValue;taintjava.nio.file;Path;false;toFile;;;Argument[-1];ReturnValue;taintjava.nio;ByteBuffer;false;array;();;Argument[-1];ReturnValue;taintjava.nio;ByteBuffer;false;get;;;Argument[-1];ReturnValue;taintjava.nio;ByteBuffer;false;wrap;(byte[]);;Argument[0];ReturnValue;taintjava.util.zip;GZIPInputStream;false;GZIPInputStream;;;Argument[0];Argument[-1];taintjava.util.zip;ZipInputStream;false;ZipInputStream;;;Argument[0];Argument[-1];taintjava.util;Base64$Decoder;false;decode;(ByteBuffer);;Argument[0];ReturnValue;taintjava.util;Base64$Decoder;false;decode;(String);;Argument[0];ReturnValue;taintjava.util;Base64$Decoder;false;decode;(byte[]);;Argument[0];ReturnValue;taintjava.util;Base64$Decoder;false;wrap;(InputStream);;Argument[0];ReturnValue;taintjava.util;Base64$Encoder;false;encode;(ByteBuffer);;Argument[0];ReturnValue;taintjava.util;Base64$Encoder;false;encode;(byte[]);;Argument[0];ReturnValue;taintjava.util;Base64$Encoder;false;encodeToString;(byte[]);;Argument[0];ReturnValue;taintjava.util;Base64$Encoder;false;wrap;(OutputStream);;Argument[0];ReturnValue;taintjava.util;StringTokenizer;false;StringTokenizer;;;Argument[0];Argument[-1];taintjava.util;StringTokenizer;false;nextElement;();;Argument[-1];ReturnValue;taintjava.util;StringTokenizer;false;nextToken;;;Argument[-1];ReturnValue;taintjavax.servlet.http;Cookie;false;Cookie;;;Argument[0];Argument[-1];taintjavax.servlet.http;Cookie;false;Cookie;;;Argument[1];Argument[-1];taintjavax.xml.transform.sax;SAXSource;false;SAXSource;(InputSource);;Argument[0];Argument[-1];taintjavax.xml.transform.sax;SAXSource;false;SAXSource;(XMLReader,InputSource);;Argument[1];Argument[-1];taintjavax.xml.transform.sax;SAXSource;false;getInputSource;;;Argument[-1];ReturnValue;taintjavax.xml.transform.sax;SAXSource;false;sourceToInputSource;;;Argument[0];ReturnValue;taintjavax.xml.transform.stream;StreamSource;false;StreamSource;;;Argument[0];Argument[-1];taintjavax.xml.transform.stream;StreamSource;false;getInputStream;;;Argument[-1];ReturnValue;taintorg.apache.commons.codec;BinaryDecoder;true;decode;(byte[]);;Argument[0];ReturnValue;taintorg.apache.commons.codec;BinaryEncoder;true;encode;(byte[]);;Argument[0];ReturnValue;taintorg.apache.commons.codec;Decoder;true;decode;(Object);;Argument[0];ReturnValue;taintorg.apache.commons.codec;Encoder;true;encode;(Object);;Argument[0];ReturnValue;taintorg.apache.commons.codec;StringDecoder;true;decode;(String);;Argument[0];ReturnValue;taintorg.apache.commons.codec;StringEncoder;true;encode;(String);;Argument[0];ReturnValue;taintorg.apache.shiro.codec;Base64;false;decode;(String);;Argument[0];ReturnValue;taintorg.xml.sax;InputSource;false;InputSource;;;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrSubstitutor;false;StrSubstitutor;;;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrSubstitutor;false;StrSubstitutor;;;MapValue of Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(char[]);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(char[],int,int);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(java.lang.CharSequence);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(java.lang.CharSequence,int,int);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(java.lang.Object);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(java.lang.Object,java.util.Map);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(java.lang.Object,java.util.Map);;MapValue of Argument[1];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(java.lang.Object,java.util.Map,java.lang.String,java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(java.lang.Object,java.util.Map,java.lang.String,java.lang.String);;MapValue of Argument[1];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(java.lang.Object,java.util.Properties);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(java.lang.Object,java.util.Properties);;MapValue of Argument[1];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(java.lang.String,int,int);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(java.lang.StringBuffer);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(java.lang.StringBuffer,int,int);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(org.apache.commons.lang3.text.StrBuilder);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;(org.apache.commons.lang3.text.StrBuilder,int,int);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replace;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrSubstitutor;false;replaceIn;(java.lang.StringBuffer);;Argument[-1];Argument[0];taintorg.apache.commons.lang3.text;StrSubstitutor;false;replaceIn;(java.lang.StringBuffer,int,int);;Argument[-1];Argument[0];taintorg.apache.commons.lang3.text;StrSubstitutor;false;replaceIn;(java.lang.StringBuilder);;Argument[-1];Argument[0];taintorg.apache.commons.lang3.text;StrSubstitutor;false;replaceIn;(java.lang.StringBuilder,int,int);;Argument[-1];Argument[0];taintorg.apache.commons.lang3.text;StrSubstitutor;false;replaceIn;(org.apache.commons.lang3.text.StrBuilder);;Argument[-1];Argument[0];taintorg.apache.commons.lang3.text;StrSubstitutor;false;replaceIn;(org.apache.commons.lang3.text.StrBuilder,int,int);;Argument[-1];Argument[0];taintorg.apache.commons.lang3.text;StrSubstitutor;false;setVariableResolver;;;Argument[0];Argument[-1];taintorg.apache.commons.text;StringSubstitutor;false;StringSubstitutor;;;Argument[0];Argument[-1];taintorg.apache.commons.text;StringSubstitutor;false;StringSubstitutor;;;MapValue of Argument[0];Argument[-1];taintorg.apache.commons.text;StringSubstitutor;false;replace;(char[]);;Argument[0];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(char[],int,int);;Argument[0];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(java.lang.CharSequence);;Argument[0];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(java.lang.CharSequence,int,int);;Argument[0];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(java.lang.Object);;Argument[0];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(java.lang.Object,java.util.Map);;Argument[0];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(java.lang.Object,java.util.Map);;MapValue of Argument[1];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(java.lang.Object,java.util.Map,java.lang.String,java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(java.lang.Object,java.util.Map,java.lang.String,java.lang.String);;MapValue of Argument[1];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(java.lang.Object,java.util.Properties);;Argument[0];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(java.lang.Object,java.util.Properties);;MapValue of Argument[1];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(java.lang.String,int,int);;Argument[0];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(java.lang.StringBuffer);;Argument[0];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(java.lang.StringBuffer,int,int);;Argument[0];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(org.apache.commons.text.TextStringBuilder);;Argument[0];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;(org.apache.commons.text.TextStringBuilder,int,int);;Argument[0];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replace;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StringSubstitutor;false;replaceIn;(java.lang.StringBuffer);;Argument[-1];Argument[0];taintorg.apache.commons.text;StringSubstitutor;false;replaceIn;(java.lang.StringBuffer,int,int);;Argument[-1];Argument[0];taintorg.apache.commons.text;StringSubstitutor;false;replaceIn;(java.lang.StringBuilder);;Argument[-1];Argument[0];taintorg.apache.commons.text;StringSubstitutor;false;replaceIn;(java.lang.StringBuilder,int,int);;Argument[-1];Argument[0];taintorg.apache.commons.text;StringSubstitutor;false;replaceIn;(org.apache.commons.text.TextStringBuilder);;Argument[-1];Argument[0];taintorg.apache.commons.text;StringSubstitutor;false;replaceIn;(org.apache.commons.text.TextStringBuilder,int,int);;Argument[-1];Argument[0];taintorg.apache.commons.text;StringSubstitutor;false;setVariableResolver;;;Argument[0];Argument[-1];taintcom.google.common.io;BaseEncoding;true;decode;(CharSequence);;Argument[-1];ReturnValue;taintcom.google.common.io;BaseEncoding;true;decode;(CharSequence);;Argument[0];ReturnValue;taintcom.google.common.io;BaseEncoding;true;decodingSource;(CharSource);;Argument[-1];ReturnValue;taintcom.google.common.io;BaseEncoding;true;decodingSource;(CharSource);;Argument[0];ReturnValue;taintcom.google.common.io;BaseEncoding;true;decodingStream;(Reader);;Argument[-1];ReturnValue;taintcom.google.common.io;BaseEncoding;true;decodingStream;(Reader);;Argument[0];ReturnValue;taintcom.google.common.io;BaseEncoding;true;encode;(byte[]);;Argument[-1];ReturnValue;taintcom.google.common.io;BaseEncoding;true;encode;(byte[]);;Argument[0];ReturnValue;taintcom.google.common.io;BaseEncoding;true;encode;(byte[],int,int);;Argument[-1];ReturnValue;taintcom.google.common.io;BaseEncoding;true;encode;(byte[],int,int);;Argument[0];ReturnValue;taintcom.google.common.io;BaseEncoding;true;lowerCase;();;Argument[-1];ReturnValue;taintcom.google.common.io;BaseEncoding;true;omitPadding;();;Argument[-1];ReturnValue;taintcom.google.common.io;BaseEncoding;true;upperCase;();;Argument[-1];ReturnValue;taintcom.google.common.io;BaseEncoding;true;withPadChar;(char);;Argument[-1];ReturnValue;taintcom.google.common.io;BaseEncoding;true;withSeparator;(String,int);;Argument[0];ReturnValue;taintcom.google.common.io;ByteArrayDataOutput;true;toByteArray;();;Argument[-1];ReturnValue;taintcom.google.common.io;ByteArrayDataOutput;true;write;(byte[]);;Argument[0];Argument[-1];taintcom.google.common.io;ByteArrayDataOutput;true;write;(byte[],int,int);;Argument[0];Argument[-1];taintcom.google.common.io;ByteArrayDataOutput;true;write;(int);;Argument[0];Argument[-1];taintcom.google.common.io;ByteArrayDataOutput;true;writeByte;(int);;Argument[0];Argument[-1];taintcom.google.common.io;ByteArrayDataOutput;true;writeBytes;(String);;Argument[0];Argument[-1];taintcom.google.common.io;ByteArrayDataOutput;true;writeChar;(int);;Argument[0];Argument[-1];taintcom.google.common.io;ByteArrayDataOutput;true;writeChars;(String);;Argument[0];Argument[-1];taintcom.google.common.io;ByteArrayDataOutput;true;writeDouble;(double);;Argument[0];Argument[-1];taintcom.google.common.io;ByteArrayDataOutput;true;writeFloat;(float);;Argument[0];Argument[-1];taintcom.google.common.io;ByteArrayDataOutput;true;writeInt;(int);;Argument[0];Argument[-1];taintcom.google.common.io;ByteArrayDataOutput;true;writeLong;(long);;Argument[0];Argument[-1];taintcom.google.common.io;ByteArrayDataOutput;true;writeShort;(int);;Argument[0];Argument[-1];taintcom.google.common.io;ByteArrayDataOutput;true;writeUTF;(String);;Argument[0];Argument[-1];taintcom.google.common.io;ByteSource;true;asCharSource;(Charset);;Argument[-1];ReturnValue;taintcom.google.common.io;ByteSource;true;concat;(ByteSource[]);;ArrayElement of Argument[0];ReturnValue;taintcom.google.common.io;ByteSource;true;concat;(Iterable);;Element of Argument[0];ReturnValue;taintcom.google.common.io;ByteSource;true;concat;(Iterator);;Element of Argument[0];ReturnValue;taintcom.google.common.io;ByteSource;true;copyTo;(OutputStream);;Argument[-1];Argument[0];taintcom.google.common.io;ByteSource;true;openBufferedStream;();;Argument[-1];ReturnValue;taintcom.google.common.io;ByteSource;true;openStream;();;Argument[-1];ReturnValue;taintcom.google.common.io;ByteSource;true;read;();;Argument[-1];ReturnValue;taintcom.google.common.io;ByteSource;true;slice;(long,long);;Argument[-1];ReturnValue;taintcom.google.common.io;ByteSource;true;wrap;(byte[]);;Argument[0];ReturnValue;taintcom.google.common.io;ByteStreams;false;copy;(InputStream,OutputStream);;Argument[0];Argument[1];taintcom.google.common.io;ByteStreams;false;copy;(ReadableByteChannel,WritableByteChannel);;Argument[0];Argument[1];taintcom.google.common.io;ByteStreams;false;limit;(InputStream,long);;Argument[0];ReturnValue;taintcom.google.common.io;ByteStreams;false;newDataInput;(ByteArrayInputStream);;Argument[0];ReturnValue;taintcom.google.common.io;ByteStreams;false;newDataInput;(byte[]);;Argument[0];ReturnValue;taintcom.google.common.io;ByteStreams;false;newDataInput;(byte[],int);;Argument[0];ReturnValue;taintcom.google.common.io;ByteStreams;false;newDataOutput;(ByteArrayOutputStream);;Argument[0];ReturnValue;taintcom.google.common.io;ByteStreams;false;read;(InputStream,byte[],int,int);;Argument[0];Argument[1];taintcom.google.common.io;ByteStreams;false;readFully;(InputStream,byte[]);;Argument[0];Argument[1];taintcom.google.common.io;ByteStreams;false;readFully;(InputStream,byte[],int,int);;Argument[0];Argument[1];taintcom.google.common.io;ByteStreams;false;toByteArray;(InputStream);;Argument[0];ReturnValue;taintcom.google.common.io;CharSource;true;asByteSource;(Charset);;Argument[-1];ReturnValue;taintcom.google.common.io;CharSource;true;concat;(CharSource[]);;ArrayElement of Argument[0];ReturnValue;taintcom.google.common.io;CharSource;true;concat;(Iterable);;Element of Argument[0];ReturnValue;taintcom.google.common.io;CharSource;true;concat;(Iterator);;Element of Argument[0];ReturnValue;taintcom.google.common.io;CharSource;true;copyTo;(Appendable);;Argument[-1];Argument[0];taintcom.google.common.io;CharSource;true;lines;();;Argument[-1];ReturnValue;taintcom.google.common.io;CharSource;true;openBufferedStream;();;Argument[-1];ReturnValue;taintcom.google.common.io;CharSource;true;openStream;();;Argument[-1];ReturnValue;taintcom.google.common.io;CharSource;true;read;();;Argument[-1];ReturnValue;taintcom.google.common.io;CharSource;true;readFirstLine;();;Argument[-1];ReturnValue;taintcom.google.common.io;CharSource;true;readLines;();;Argument[-1];ReturnValue;taintcom.google.common.io;CharSource;true;wrap;(CharSequence);;Argument[0];ReturnValue;taintcom.google.common.io;CharStreams;false;copy;(Readable,Appendable);;Argument[0];Argument[1];taintcom.google.common.io;CharStreams;false;readLines;(Readable);;Argument[0];ReturnValue;taintcom.google.common.io;CharStreams;false;toString;(Readable);;Argument[0];ReturnValue;taintcom.google.common.io;Closer;true;register;;;Argument[0];ReturnValue;valuecom.google.common.io;Files;false;getFileExtension;(String);;Argument[0];ReturnValue;taintcom.google.common.io;Files;false;getNameWithoutExtension;(String);;Argument[0];ReturnValue;taintcom.google.common.io;Files;false;simplifyPath;(String);;Argument[0];ReturnValue;taintcom.google.common.io;LineReader;false;LineReader;(Readable);;Argument[0];Argument[-1];taintcom.google.common.io;LineReader;true;readLine;();;Argument[-1];ReturnValue;taintcom.google.common.io;MoreFiles;false;getFileExtension;(Path);;Argument[0];ReturnValue;taintcom.google.common.io;MoreFiles;false;getNameWithoutExtension;(Path);;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;append;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;appendAll;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;appendFixedWidthPadLeft;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;appendFixedWidthPadRight;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;appendNewLine;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;appendNull;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;appendPadding;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;appendSeparator;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;appendWithSeparators;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;appendln;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;delete;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;deleteAll;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;deleteCharAt;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;deleteFirst;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;ensureCapacity;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;insert;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;minimizeCapacity;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;replace;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;replaceAll;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;replaceFirst;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;reverse;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;setCharAt;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;setLength;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;setNewLineText;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;setNullText;;;Argument[-1];ReturnValue;valueorg.apache.commons.lang3.text;StrBuilder;false;trim;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;append;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;appendAll;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;appendFixedWidthPadLeft;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;appendFixedWidthPadRight;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;appendNewLine;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;appendNull;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;appendPadding;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;appendSeparator;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;appendWithSeparators;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;appendln;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;delete;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;deleteAll;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;deleteCharAt;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;deleteFirst;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;ensureCapacity;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;insert;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;minimizeCapacity;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;replace;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;replaceAll;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;replaceFirst;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;reverse;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;setCharAt;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;setLength;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;setNewLineText;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;setNullText;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;StrBuilder;false;trim;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;append;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;appendAll;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;appendFixedWidthPadLeft;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;appendFixedWidthPadRight;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;appendNewLine;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;appendNull;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;appendPadding;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;appendSeparator;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;appendWithSeparators;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;appendln;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;delete;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;deleteAll;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;deleteCharAt;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;deleteFirst;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;ensureCapacity;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;insert;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;minimizeCapacity;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;replace;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;replaceAll;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;replaceFirst;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;reverse;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;setCharAt;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;setLength;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;setNewLineText;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;setNullText;;;Argument[-1];ReturnValue;valueorg.apache.commons.text;TextStringBuilder;false;trim;;;Argument[-1];ReturnValue;valueorg.springframework.http;HttpEntity;true;HttpEntity;(MultiValueMap);;Element of MapValue of Argument[0];Argument[-1];taintorg.springframework.http;HttpEntity;true;HttpEntity;(MultiValueMap);;MapKey of Argument[0];Argument[-1];taintorg.springframework.http;HttpEntity;true;HttpEntity;(Object);;Argument[0];Argument[-1];taintorg.springframework.http;HttpEntity;true;HttpEntity;(Object,MultiValueMap);;Argument[0];Argument[-1];taintorg.springframework.http;HttpEntity;true;HttpEntity;(Object,MultiValueMap);;Element of MapValue of Argument[1];Argument[-1];taintorg.springframework.http;HttpEntity;true;HttpEntity;(Object,MultiValueMap);;MapKey of Argument[1];Argument[-1];taintorg.springframework.http;HttpEntity;true;getBody;;;Argument[-1];ReturnValue;taintorg.springframework.http;HttpEntity;true;getHeaders;;;Argument[-1];ReturnValue;taintorg.springframework.http;HttpHeaders;true;HttpHeaders;(MultiValueMap);;Element of MapValue of Argument[0];Argument[-1];taintorg.springframework.http;HttpHeaders;true;HttpHeaders;(MultiValueMap);;MapKey of Argument[0];Argument[-1];taintorg.springframework.http;HttpHeaders;true;add;(String,String);;Argument[0..1];Argument[-1];taintorg.springframework.http;HttpHeaders;true;addAll;(MultiValueMap);;Element of MapValue of Argument[0];Argument[-1];taintorg.springframework.http;HttpHeaders;true;addAll;(MultiValueMap);;MapKey of Argument[0];Argument[-1];taintorg.springframework.http;HttpHeaders;true;addAll;(String,List);;Argument[0];Argument[-1];taintorg.springframework.http;HttpHeaders;true;addAll;(String,List);;Element of Argument[1];Argument[-1];taintorg.springframework.http;HttpHeaders;true;encodeBasicAuth;(String,String,Charset);;Argument[0..1];ReturnValue;taintorg.springframework.http;HttpHeaders;true;formatHeaders;(MultiValueMap);;Element of MapValue of Argument[0];ReturnValue;taintorg.springframework.http;HttpHeaders;true;formatHeaders;(MultiValueMap);;MapKey of Argument[0];ReturnValue;taintorg.springframework.http;HttpHeaders;true;get;(Object);;Argument[-1];Element of ReturnValue;taintorg.springframework.http;HttpHeaders;true;getAccessControlAllowHeaders;();;Argument[-1];Element of ReturnValue;taintorg.springframework.http;HttpHeaders;true;getAccessControlAllowOrigin;();;Argument[-1];ReturnValue;taintorg.springframework.http;HttpHeaders;true;getAccessControlExposeHeaders;();;Argument[-1];Element of ReturnValue;taintorg.springframework.http;HttpHeaders;true;getAccessControlRequestHeaders;();;Argument[-1];Element of ReturnValue;taintorg.springframework.http;HttpHeaders;true;getCacheControl;();;Argument[-1];ReturnValue;taintorg.springframework.http;HttpHeaders;true;getConnection;();;Argument[-1];Element of ReturnValue;taintorg.springframework.http;HttpHeaders;true;getETag;();;Argument[-1];ReturnValue;taintorg.springframework.http;HttpHeaders;true;getETagValuesAsList;(String);;Argument[-1];Element of ReturnValue;taintorg.springframework.http;HttpHeaders;true;getFieldValues;(String);;Argument[-1];ReturnValue;taintorg.springframework.http;HttpHeaders;true;getFirst;(String);;Argument[-1];ReturnValue;taintorg.springframework.http;HttpHeaders;true;getHost;();;Argument[-1];ReturnValue;taintorg.springframework.http;HttpHeaders;true;getIfMatch;();;Argument[-1];Element of ReturnValue;taintorg.springframework.http;HttpHeaders;true;getIfNoneMatch;();;Argument[-1];Element of ReturnValue;taintorg.springframework.http;HttpHeaders;true;getLocation;();;Argument[-1];ReturnValue;taintorg.springframework.http;HttpHeaders;true;getOrEmpty;(Object);;Argument[-1];Element of ReturnValue;taintorg.springframework.http;HttpHeaders;true;getOrigin;();;Argument[-1];ReturnValue;taintorg.springframework.http;HttpHeaders;true;getPragma;();;Argument[-1];ReturnValue;taintorg.springframework.http;HttpHeaders;true;getUpgrade;();;Argument[-1];ReturnValue;taintorg.springframework.http;HttpHeaders;true;getValuesAsList;(String);;Argument[-1];Element of ReturnValue;taintorg.springframework.http;HttpHeaders;true;getVary;();;Argument[-1];Element of ReturnValue;taintorg.springframework.http;HttpHeaders;true;set;(String,String);;Argument[0..1];Argument[-1];taintorg.springframework.http;RequestEntity;true;getUrl;();;Argument[-1];ReturnValue;taintorg.springframework.http;ResponseEntity$BodyBuilder;true;body;(Object);;Argument[-1..0];ReturnValue;taintorg.springframework.http;ResponseEntity$BodyBuilder;true;contentLength;(long);;Argument[-1];ReturnValue;valueorg.springframework.http;ResponseEntity$BodyBuilder;true;contentType;(MediaType);;Argument[-1];ReturnValue;valueorg.springframework.http;ResponseEntity$HeadersBuilder;true;allow;(HttpMethod[]);;Argument[-1];ReturnValue;valueorg.springframework.http;ResponseEntity$HeadersBuilder;true;build;();;Argument[-1];ReturnValue;taintorg.springframework.http;ResponseEntity$HeadersBuilder;true;eTag;(String);;Argument[-1];ReturnValue;valueorg.springframework.http;ResponseEntity$HeadersBuilder;true;eTag;(String);;Argument[0];Argument[-1];taintorg.springframework.http;ResponseEntity$HeadersBuilder;true;header;(String,String[]);;Argument[-1];ReturnValue;valueorg.springframework.http;ResponseEntity$HeadersBuilder;true;header;(String,String[]);;Argument[0];Argument[-1];taintorg.springframework.http;ResponseEntity$HeadersBuilder;true;header;(String,String[]);;ArrayElement of Argument[1];Argument[-1];taintorg.springframework.http;ResponseEntity$HeadersBuilder;true;headers;(Consumer);;Argument[-1];ReturnValue;valueorg.springframework.http;ResponseEntity$HeadersBuilder;true;headers;(HttpHeaders);;Argument[-1];ReturnValue;valueorg.springframework.http;ResponseEntity$HeadersBuilder;true;headers;(HttpHeaders);;Argument[0];Argument[-1];taintorg.springframework.http;ResponseEntity$HeadersBuilder;true;lastModified;;;Argument[-1];ReturnValue;valueorg.springframework.http;ResponseEntity$HeadersBuilder;true;location;(URI);;Argument[-1];ReturnValue;valueorg.springframework.http;ResponseEntity$HeadersBuilder;true;location;(URI);;Argument[0];Argument[-1];taintorg.springframework.http;ResponseEntity$HeadersBuilder;true;varyBy;(String[]);;Argument[-1];ReturnValue;valueorg.springframework.http;ResponseEntity;true;ResponseEntity;(MultiValueMap,HttpStatus);;Element of MapValue of Argument[0];Argument[-1];taintorg.springframework.http;ResponseEntity;true;ResponseEntity;(MultiValueMap,HttpStatus);;MapKey of Argument[0];Argument[-1];taintorg.springframework.http;ResponseEntity;true;ResponseEntity;(Object,HttpStatus);;Argument[0];Argument[-1];taintorg.springframework.http;ResponseEntity;true;ResponseEntity;(Object,MultiValueMap,HttpStatus);;Argument[0];Argument[-1];taintorg.springframework.http;ResponseEntity;true;ResponseEntity;(Object,MultiValueMap,HttpStatus);;Element of MapValue of Argument[1];Argument[-1];taintorg.springframework.http;ResponseEntity;true;ResponseEntity;(Object,MultiValueMap,HttpStatus);;MapKey of Argument[1];Argument[-1];taintorg.springframework.http;ResponseEntity;true;ResponseEntity;(Object,MultiValueMap,int);;Argument[0];Argument[-1];taintorg.springframework.http;ResponseEntity;true;ResponseEntity;(Object,MultiValueMap,int);;Element of MapValue of Argument[1];Argument[-1];taintorg.springframework.http;ResponseEntity;true;ResponseEntity;(Object,MultiValueMap,int);;MapKey of Argument[1];Argument[-1];taintorg.springframework.http;ResponseEntity;true;created;(URI);;Argument[0];ReturnValue;taintorg.springframework.http;ResponseEntity;true;of;(Optional);;Element of Argument[0];ReturnValue;taintorg.springframework.http;ResponseEntity;true;ok;(Object);;Argument[0];ReturnValue;taintcom.google.common.base;Ascii;false;toLowerCase;(CharSequence);;Argument[0];ReturnValue;taintcom.google.common.base;Ascii;false;toLowerCase;(String);;Argument[0];ReturnValue;taintcom.google.common.base;Ascii;false;toUpperCase;(CharSequence);;Argument[0];ReturnValue;taintcom.google.common.base;Ascii;false;toUpperCase;(String);;Argument[0];ReturnValue;taintcom.google.common.base;Ascii;false;truncate;(CharSequence,int,String);;Argument[0];ReturnValue;taintcom.google.common.base;Ascii;false;truncate;(CharSequence,int,String);;Argument[2];ReturnValue;taintcom.google.common.base;CaseFormat;true;to;(CaseFormat,String);;Argument[1];ReturnValue;taintcom.google.common.base;Converter;true;apply;(Object);;Argument[0];ReturnValue;taintcom.google.common.base;Converter;true;convert;(Object);;Argument[0];ReturnValue;taintcom.google.common.base;Converter;true;convertAll;(Iterable);;Element of Argument[0];Element of ReturnValue;taintcom.google.common.base;Joiner$MapJoiner;false;appendTo;;;Argument[0];ReturnValue;valuecom.google.common.base;Joiner$MapJoiner;false;appendTo;;;Argument[1];Argument[0];taintcom.google.common.base;Joiner$MapJoiner;false;join;(Iterable);;MapKey of Element of Argument[0];ReturnValue;taintcom.google.common.base;Joiner$MapJoiner;false;join;(Iterable);;MapValue of Element of Argument[0];ReturnValue;taintcom.google.common.base;Joiner$MapJoiner;false;join;(Iterator);;MapKey of Element of Argument[0];ReturnValue;taintcom.google.common.base;Joiner$MapJoiner;false;join;(Iterator);;MapValue of Element of Argument[0];ReturnValue;taintcom.google.common.base;Joiner$MapJoiner;false;join;(Map);;MapKey of Argument[0];ReturnValue;taintcom.google.common.base;Joiner$MapJoiner;false;join;(Map);;MapValue of Argument[0];ReturnValue;taintcom.google.common.base;Joiner$MapJoiner;false;join;;;Argument[-1];ReturnValue;taintcom.google.common.base;Joiner$MapJoiner;false;useForNull;(String);;Argument[-1];ReturnValue;taintcom.google.common.base;Joiner$MapJoiner;false;useForNull;(String);;Argument[0];ReturnValue;taintcom.google.common.base;Joiner;false;appendTo;(Appendable,Iterable);;Element of Argument[1];Argument[-1];taintcom.google.common.base;Joiner;false;appendTo;(Appendable,Iterator);;Element of Argument[1];Argument[-1];taintcom.google.common.base;Joiner;false;appendTo;(Appendable,Object,Object,Object[]);;Argument[1..2];Argument[0];taintcom.google.common.base;Joiner;false;appendTo;(Appendable,Object,Object,Object[]);;ArrayElement of Argument[3];Argument[0];taintcom.google.common.base;Joiner;false;appendTo;(Appendable,Object[]);;ArrayElement of Argument[1];Argument[-1];taintcom.google.common.base;Joiner;false;appendTo;(StringBuilder,Iterable);;Element of Argument[1];Argument[-1];taintcom.google.common.base;Joiner;false;appendTo;(StringBuilder,Iterator);;Element of Argument[1];Argument[-1];taintcom.google.common.base;Joiner;false;appendTo;(StringBuilder,Object,Object,Object[]);;Argument[1..2];Argument[0];taintcom.google.common.base;Joiner;false;appendTo;(StringBuilder,Object,Object,Object[]);;ArrayElement of Argument[3];Argument[0];taintcom.google.common.base;Joiner;false;appendTo;(StringBuilder,Object[]);;ArrayElement of Argument[1];Argument[-1];taintcom.google.common.base;Joiner;false;appendTo;;;Argument[-1];Argument[0];taintcom.google.common.base;Joiner;false;appendTo;;;Argument[0];ReturnValue;valuecom.google.common.base;Joiner;false;join;;;Argument[-1..2];ReturnValue;taintcom.google.common.base;Joiner;false;on;(String);;Argument[0];ReturnValue;taintcom.google.common.base;Joiner;false;skipNulls;();;Argument[-1];ReturnValue;taintcom.google.common.base;Joiner;false;useForNull;(String);;Argument[-1];ReturnValue;taintcom.google.common.base;Joiner;false;useForNull;(String);;Argument[0];ReturnValue;taintcom.google.common.base;Joiner;false;withKeyValueSeparator;(String);;Argument[-1];ReturnValue;taintcom.google.common.base;Joiner;false;withKeyValueSeparator;(String);;Argument[0];ReturnValue;taintcom.google.common.base;Joiner;false;withKeyValueSeparator;(char);;Argument[-1];ReturnValue;taintcom.google.common.base;MoreObjects$ToStringHelper;false;add;(String,Object);;Argument[1];Argument[-1];taintcom.google.common.base;MoreObjects$ToStringHelper;false;add;(String,Object);;Argument[1];ReturnValue;taintcom.google.common.base;MoreObjects$ToStringHelper;false;add;;;Argument[-1];ReturnValue;valuecom.google.common.base;MoreObjects$ToStringHelper;false;add;;;Argument[0];Argument[-1];taintcom.google.common.base;MoreObjects$ToStringHelper;false;add;;;Argument[0];ReturnValue;taintcom.google.common.base;MoreObjects$ToStringHelper;false;addValue;(Object);;Argument[0];Argument[-1];taintcom.google.common.base;MoreObjects$ToStringHelper;false;addValue;(Object);;Argument[0];ReturnValue;taintcom.google.common.base;MoreObjects$ToStringHelper;false;addValue;;;Argument[-1];ReturnValue;valuecom.google.common.base;MoreObjects$ToStringHelper;false;omitNullValues;();;Argument[-1];ReturnValue;valuecom.google.common.base;MoreObjects$ToStringHelper;false;toString;();;Argument[-1];ReturnValue;taintcom.google.common.base;MoreObjects;false;firstNonNull;(Object,Object);;Argument[0..1];ReturnValue;valuecom.google.common.base;MoreObjects;false;toStringHelper;(String);;Argument[0];ReturnValue;taintcom.google.common.base;Optional;true;asSet;();;Element of Argument[-1];Element of ReturnValue;valuecom.google.common.base;Optional;true;fromJavaUtil;(Optional);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.base;Optional;true;fromNullable;(Object);;Argument[0];Element of ReturnValue;valuecom.google.common.base;Optional;true;get;();;Element of Argument[-1];ReturnValue;valuecom.google.common.base;Optional;true;of;(Object);;Argument[0];Element of ReturnValue;valuecom.google.common.base;Optional;true;or;(Object);;Argument[0];ReturnValue;valuecom.google.common.base;Optional;true;or;(Object);;Element of Argument[-1];ReturnValue;valuecom.google.common.base;Optional;true;or;(Optional);;Element of Argument[-1..0];Element of ReturnValue;valuecom.google.common.base;Optional;true;or;(Supplier);;Argument[0];ReturnValue;taintcom.google.common.base;Optional;true;or;(Supplier);;Element of Argument[-1];ReturnValue;valuecom.google.common.base;Optional;true;orNull;();;Element of Argument[-1];ReturnValue;valuecom.google.common.base;Optional;true;presentInstances;(Iterable);;Element of Element of Argument[0];Element of ReturnValue;valuecom.google.common.base;Optional;true;toJavaUtil;();;Element of Argument[-1];Element of ReturnValue;valuecom.google.common.base;Optional;true;toJavaUtil;(Optional);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.base;Preconditions;false;checkNotNull;;;Argument[0];ReturnValue;valuecom.google.common.base;Splitter$MapSplitter;false;split;(CharSequence);;Argument[0];ReturnValue;taintcom.google.common.base;Splitter;false;split;(CharSequence);;Argument[0];ReturnValue;taintcom.google.common.base;Splitter;false;splitToList;(CharSequence);;Argument[0];ReturnValue;taintcom.google.common.base;Splitter;false;splitToStream;(CharSequence);;Argument[0];ReturnValue;taintcom.google.common.base;Strings;false;emptyToNull;(String);;Argument[0];ReturnValue;valuecom.google.common.base;Strings;false;lenientFormat;(String,Object[]);;Argument[0];ReturnValue;taintcom.google.common.base;Strings;false;lenientFormat;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taintcom.google.common.base;Strings;false;nullToEmpty;(String);;Argument[0];ReturnValue;valuecom.google.common.base;Strings;false;padEnd;(String,int,char);;Argument[0];ReturnValue;taintcom.google.common.base;Strings;false;padStart;(String,int,char);;Argument[0];ReturnValue;taintcom.google.common.base;Strings;false;repeat;(String,int);;Argument[0];ReturnValue;taintcom.google.common.base;Supplier;true;get;();;Argument[-1];ReturnValue;taintcom.google.common.base;Suppliers;false;memoize;(Supplier);;Argument[0];ReturnValue;taintcom.google.common.base;Suppliers;false;memoizeWithExpiration;(Supplier,long,TimeUnit);;Argument[0];ReturnValue;taintcom.google.common.base;Suppliers;false;ofInstance;(Object);;Argument[0];ReturnValue;taintcom.google.common.base;Suppliers;false;synchronizedSupplier;(Supplier);;Argument[0];ReturnValue;taintcom.google.common.base;Verify;false;verifyNotNull;;;Argument[0];ReturnValue;valuejava.util.stream;BaseStream;true;iterator;();;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;BaseStream;true;onClose;(Runnable);;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;BaseStream;true;parallel;();;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;BaseStream;true;sequential;();;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;BaseStream;true;spliterator;();;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;BaseStream;true;unordered;();;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;Stream;true;allMatch;(Predicate);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;anyMatch;(Predicate);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;collect;(Supplier,BiConsumer,BiConsumer);;Element of Argument[-1];Parameter[1] of Argument[1];valuejava.util.stream;Stream;true;collect;(Supplier,BiConsumer,BiConsumer);;Parameter[0..1] of Argument[2];Parameter[0] of Argument[1];valuejava.util.stream;Stream;true;collect;(Supplier,BiConsumer,BiConsumer);;Parameter[0] of Argument[1];Parameter[0..1] of Argument[2];valuejava.util.stream;Stream;true;collect;(Supplier,BiConsumer,BiConsumer);;Parameter[0] of Argument[1];ReturnValue;valuejava.util.stream;Stream;true;collect;(Supplier,BiConsumer,BiConsumer);;ReturnValue of Argument[0];Parameter[0] of Argument[1];valuejava.util.stream;Stream;true;concat;(Stream,Stream);;Element of Argument[0..1];Element of ReturnValue;valuejava.util.stream;Stream;true;distinct;();;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;Stream;true;dropWhile;(Predicate);;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;Stream;true;dropWhile;(Predicate);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;filter;(Predicate);;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;Stream;true;filter;(Predicate);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;findAny;();;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;Stream;true;findFirst;();;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;Stream;true;flatMap;(Function);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;flatMap;(Function);;Element of ReturnValue of Argument[0];Element of ReturnValue;valuejava.util.stream;Stream;true;flatMapToDouble;(Function);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;flatMapToInt;(Function);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;flatMapToLong;(Function);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;forEach;(Consumer);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;forEachOrdered;(Consumer);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;generate;(Supplier);;ReturnValue of Argument[0];Element of ReturnValue;valuejava.util.stream;Stream;true;iterate;(Object,Predicate,UnaryOperator);;Argument[0];Element of ReturnValue;valuejava.util.stream;Stream;true;iterate;(Object,Predicate,UnaryOperator);;Argument[0];Parameter[0] of Argument[1..2];valuejava.util.stream;Stream;true;iterate;(Object,Predicate,UnaryOperator);;ReturnValue of Argument[2];Element of ReturnValue;valuejava.util.stream;Stream;true;iterate;(Object,Predicate,UnaryOperator);;ReturnValue of Argument[2];Parameter[0] of Argument[1..2];valuejava.util.stream;Stream;true;iterate;(Object,UnaryOperator);;Argument[0];Element of ReturnValue;valuejava.util.stream;Stream;true;iterate;(Object,UnaryOperator);;Argument[0];Parameter[0] of Argument[1];valuejava.util.stream;Stream;true;iterate;(Object,UnaryOperator);;ReturnValue of Argument[1];Element of ReturnValue;valuejava.util.stream;Stream;true;iterate;(Object,UnaryOperator);;ReturnValue of Argument[1];Parameter[0] of Argument[1];valuejava.util.stream;Stream;true;limit;(long);;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;Stream;true;map;(Function);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;map;(Function);;ReturnValue of Argument[0];Element of ReturnValue;valuejava.util.stream;Stream;true;mapMulti;(BiConsumer);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;mapMultiToDouble;(BiConsumer);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;mapMultiToInt;(BiConsumer);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;mapMultiToLong;(BiConsumer);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;mapToDouble;(ToDoubleFunction);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;mapToInt;(ToIntFunction);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;mapToLong;(ToLongFunction);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;max;(Comparator);;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;Stream;true;max;(Comparator);;Element of Argument[-1];Parameter[0..1] of Argument[0];valuejava.util.stream;Stream;true;min;(Comparator);;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;Stream;true;min;(Comparator);;Element of Argument[-1];Parameter[0..1] of Argument[0];valuejava.util.stream;Stream;true;noneMatch;(Predicate);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;of;(Object);;Argument[0];Element of ReturnValue;valuejava.util.stream;Stream;true;of;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valuejava.util.stream;Stream;true;ofNullable;(Object);;Argument[0];Element of ReturnValue;valuejava.util.stream;Stream;true;peek;(Consumer);;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;Stream;true;peek;(Consumer);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;reduce;(BinaryOperator);;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;Stream;true;reduce;(BinaryOperator);;Element of Argument[-1];Parameter[0..1] of Argument[0];valuejava.util.stream;Stream;true;reduce;(BinaryOperator);;ReturnValue of Argument[0];Element of ReturnValue;valuejava.util.stream;Stream;true;reduce;(BinaryOperator);;ReturnValue of Argument[0];Parameter[0..1] of Argument[0];valuejava.util.stream;Stream;true;reduce;(Object,BiFunction,BinaryOperator);;Argument[0];Parameter[0..1] of Argument[2];valuejava.util.stream;Stream;true;reduce;(Object,BiFunction,BinaryOperator);;Argument[0];Parameter[0] of Argument[1];valuejava.util.stream;Stream;true;reduce;(Object,BiFunction,BinaryOperator);;Argument[0];ReturnValue;valuejava.util.stream;Stream;true;reduce;(Object,BiFunction,BinaryOperator);;Element of Argument[-1];Parameter[1] of Argument[1];valuejava.util.stream;Stream;true;reduce;(Object,BiFunction,BinaryOperator);;ReturnValue of Argument[1..2];Parameter[0..1] of Argument[2];valuejava.util.stream;Stream;true;reduce;(Object,BiFunction,BinaryOperator);;ReturnValue of Argument[1..2];Parameter[0] of Argument[1];valuejava.util.stream;Stream;true;reduce;(Object,BiFunction,BinaryOperator);;ReturnValue of Argument[1..2];ReturnValue;valuejava.util.stream;Stream;true;reduce;(Object,BinaryOperator);;Argument[0];Parameter[0..1] of Argument[1];valuejava.util.stream;Stream;true;reduce;(Object,BinaryOperator);;Argument[0];ReturnValue;valuejava.util.stream;Stream;true;reduce;(Object,BinaryOperator);;Element of Argument[-1];Parameter[0..1] of Argument[1];valuejava.util.stream;Stream;true;reduce;(Object,BinaryOperator);;ReturnValue of Argument[1];Parameter[0..1] of Argument[1];valuejava.util.stream;Stream;true;reduce;(Object,BinaryOperator);;ReturnValue of Argument[1];ReturnValue;valuejava.util.stream;Stream;true;skip;(long);;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;Stream;true;sorted;(Comparator);;Element of Argument[-1];Parameter[0..1] of Argument[0];valuejava.util.stream;Stream;true;sorted;;;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;Stream;true;takeWhile;(Predicate);;Element of Argument[-1];Element of ReturnValue;valuejava.util.stream;Stream;true;takeWhile;(Predicate);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util.stream;Stream;true;toArray;;;Element of Argument[-1];ArrayElement of ReturnValue;valuejava.util.stream;Stream;true;toList;();;Element of Argument[-1];Element of ReturnValue;valueorg.apache.hc.core5.function;Supplier;true;get;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http.io.entity;BasicHttpEntity;true;BasicHttpEntity;;;Argument[0];ReturnValue;taintorg.apache.hc.core5.http.io.entity;BufferedHttpEntity;true;BufferedHttpEntity;(HttpEntity);;Argument[0];ReturnValue;taintorg.apache.hc.core5.http.io.entity;ByteArrayEntity;true;ByteArrayEntity;;;Argument[0];Argument[-1];taintorg.apache.hc.core5.http.io.entity;EntityUtils;true;parse;;;Argument[0];ReturnValue;taintorg.apache.hc.core5.http.io.entity;EntityUtils;true;toByteArray;;;Argument[0];ReturnValue;taintorg.apache.hc.core5.http.io.entity;EntityUtils;true;toString;;;Argument[0];ReturnValue;taintorg.apache.hc.core5.http.io.entity;HttpEntities;true;create;;;Argument[0];ReturnValue;taintorg.apache.hc.core5.http.io.entity;HttpEntities;true;createGzipped;;;Argument[0];ReturnValue;taintorg.apache.hc.core5.http.io.entity;HttpEntities;true;createUrlEncoded;;;Argument[0];ReturnValue;taintorg.apache.hc.core5.http.io.entity;HttpEntities;true;gzip;(HttpEntity);;Argument[0];ReturnValue;taintorg.apache.hc.core5.http.io.entity;HttpEntities;true;withTrailers;;;Argument[0];ReturnValue;taintorg.apache.hc.core5.http.io.entity;HttpEntityWrapper;true;HttpEntityWrapper;(HttpEntity);;Argument[0];ReturnValue;taintorg.apache.hc.core5.http.io.entity;InputStreamEntity;true;InputStreamEntity;;;Argument[0];ReturnValue;taintorg.apache.hc.core5.http.io.entity;StringEntity;true;StringEntity;;;Argument[0];Argument[-1];taintorg.apache.hc.core5.http.message;RequestLine;true;RequestLine;(HttpRequest);;Argument[0];Argument[-1];taintorg.apache.hc.core5.http.message;RequestLine;true;RequestLine;(String,String,ProtocolVersion);;Argument[1];Argument[-1];taintorg.apache.hc.core5.http.message;RequestLine;true;getMethod;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http.message;RequestLine;true;getUri;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http.message;RequestLine;true;toString;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;EntityDetails;true;getContentEncoding;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;EntityDetails;true;getContentType;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;EntityDetails;true;getTrailerNames;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;HttpEntity;true;getContent;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;HttpEntity;true;getTrailers;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;HttpEntityContainer;true;getEntity;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;HttpRequest;true;getAuthority;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;HttpRequest;true;getMethod;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;HttpRequest;true;getPath;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;HttpRequest;true;getRequestUri;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;HttpRequest;true;getUri;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;MessageHeaders;true;getFirstHeader;(String);;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;MessageHeaders;true;getHeader;(String);;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;MessageHeaders;true;getHeaders;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;MessageHeaders;true;getHeaders;(String);;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;MessageHeaders;true;getLastHeader;(String);;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;MessageHeaders;true;headerIterator;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;MessageHeaders;true;headerIterator;(String);;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;NameValuePair;true;getName;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.http;NameValuePair;true;getValue;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.net;URIAuthority;true;getHostName;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.net;URIAuthority;true;toString;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.util;Args;true;containsNoBlanks;(CharSequence,String);;Argument[0];ReturnValue;valueorg.apache.hc.core5.util;Args;true;notBlank;(CharSequence,String);;Argument[0];ReturnValue;valueorg.apache.hc.core5.util;Args;true;notEmpty;(CharSequence,String);;Argument[0];ReturnValue;valueorg.apache.hc.core5.util;Args;true;notEmpty;(Collection,String);;Argument[0];ReturnValue;valueorg.apache.hc.core5.util;Args;true;notEmpty;(Object,String);;Argument[0];ReturnValue;valueorg.apache.hc.core5.util;Args;true;notNull;(Object,String);;Argument[0];ReturnValue;valueorg.apache.hc.core5.util;ByteArrayBuffer;true;append;(CharArrayBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.hc.core5.util;ByteArrayBuffer;true;append;(byte[],int,int);;Argument[0];Argument[-1];taintorg.apache.hc.core5.util;ByteArrayBuffer;true;append;(char[],int,int);;Argument[0];Argument[-1];taintorg.apache.hc.core5.util;ByteArrayBuffer;true;array;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.util;ByteArrayBuffer;true;toByteArray;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.util;CharArrayBuffer;true;append;(ByteArrayBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.hc.core5.util;CharArrayBuffer;true;append;(CharArrayBuffer);;Argument[0];Argument[-1];taintorg.apache.hc.core5.util;CharArrayBuffer;true;append;(CharArrayBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.hc.core5.util;CharArrayBuffer;true;append;(Object);;Argument[0];Argument[-1];taintorg.apache.hc.core5.util;CharArrayBuffer;true;append;(String);;Argument[0];Argument[-1];taintorg.apache.hc.core5.util;CharArrayBuffer;true;append;(byte[],int,int);;Argument[0];Argument[-1];taintorg.apache.hc.core5.util;CharArrayBuffer;true;append;(char[],int,int);;Argument[0];Argument[-1];taintorg.apache.hc.core5.util;CharArrayBuffer;true;array;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.util;CharArrayBuffer;true;subSequence;(int,int);;Argument[-1];ReturnValue;taintorg.apache.hc.core5.util;CharArrayBuffer;true;substring;(int,int);;Argument[-1];ReturnValue;taintorg.apache.hc.core5.util;CharArrayBuffer;true;substringTrimmed;(int,int);;Argument[-1];ReturnValue;taintorg.apache.hc.core5.util;CharArrayBuffer;true;toCharArray;();;Argument[-1];ReturnValue;taintorg.apache.hc.core5.util;CharArrayBuffer;true;toString;();;Argument[-1];ReturnValue;taintorg.apache.http.entity;BasicHttpEntity;true;setContent;(InputStream);;Argument[0];Argument[-1];taintorg.apache.http.entity;BufferedHttpEntity;true;BufferedHttpEntity;(HttpEntity);;Argument[0];ReturnValue;taintorg.apache.http.entity;ByteArrayEntity;true;ByteArrayEntity;;;Argument[0];Argument[-1];taintorg.apache.http.entity;HttpEntityWrapper;true;HttpEntityWrapper;(HttpEntity);;Argument[0];ReturnValue;taintorg.apache.http.entity;InputStreamEntity;true;InputStreamEntity;;;Argument[0];ReturnValue;taintorg.apache.http.entity;StringEntity;true;StringEntity;;;Argument[0];Argument[-1];taintorg.apache.http.message;BasicRequestLine;false;BasicRequestLine;;;Argument[1];Argument[-1];taintorg.apache.http.params;HttpParams;true;getDoubleParameter;(String,double);;Argument[-1];ReturnValue;taintorg.apache.http.params;HttpParams;true;getDoubleParameter;(String,double);;Argument[1];ReturnValue;valueorg.apache.http.params;HttpParams;true;getIntParameter;(String,int);;Argument[-1];ReturnValue;taintorg.apache.http.params;HttpParams;true;getIntParameter;(String,int);;Argument[1];ReturnValue;valueorg.apache.http.params;HttpParams;true;getLongParameter;(String,long);;Argument[-1];ReturnValue;taintorg.apache.http.params;HttpParams;true;getLongParameter;(String,long);;Argument[1];ReturnValue;valueorg.apache.http.params;HttpParams;true;getParameter;(String);;Argument[-1];ReturnValue;taintorg.apache.http.util;Args;true;containsNoBlanks;(CharSequence,String);;Argument[0];ReturnValue;valueorg.apache.http.util;Args;true;notBlank;(CharSequence,String);;Argument[0];ReturnValue;valueorg.apache.http.util;Args;true;notEmpty;(CharSequence,String);;Argument[0];ReturnValue;valueorg.apache.http.util;Args;true;notEmpty;(Collection,String);;Argument[0];ReturnValue;valueorg.apache.http.util;Args;true;notNull;(Object,String);;Argument[0];ReturnValue;valueorg.apache.http.util;ByteArrayBuffer;true;append;(CharArrayBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.http.util;ByteArrayBuffer;true;append;(byte[],int,int);;Argument[0];Argument[-1];taintorg.apache.http.util;ByteArrayBuffer;true;append;(char[],int,int);;Argument[0];Argument[-1];taintorg.apache.http.util;ByteArrayBuffer;true;buffer;();;Argument[-1];ReturnValue;taintorg.apache.http.util;ByteArrayBuffer;true;toByteArray;();;Argument[-1];ReturnValue;taintorg.apache.http.util;CharArrayBuffer;true;append;(ByteArrayBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.http.util;CharArrayBuffer;true;append;(CharArrayBuffer);;Argument[0];Argument[-1];taintorg.apache.http.util;CharArrayBuffer;true;append;(CharArrayBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.http.util;CharArrayBuffer;true;append;(Object);;Argument[0];Argument[-1];taintorg.apache.http.util;CharArrayBuffer;true;append;(String);;Argument[0];Argument[-1];taintorg.apache.http.util;CharArrayBuffer;true;append;(byte[],int,int);;Argument[0];Argument[-1];taintorg.apache.http.util;CharArrayBuffer;true;append;(char[],int,int);;Argument[0];Argument[-1];taintorg.apache.http.util;CharArrayBuffer;true;buffer;();;Argument[-1];ReturnValue;taintorg.apache.http.util;CharArrayBuffer;true;subSequence;(int,int);;Argument[-1];ReturnValue;taintorg.apache.http.util;CharArrayBuffer;true;substring;(int,int);;Argument[-1];ReturnValue;taintorg.apache.http.util;CharArrayBuffer;true;substringTrimmed;(int,int);;Argument[-1];ReturnValue;taintorg.apache.http.util;CharArrayBuffer;true;toCharArray;();;Argument[-1];ReturnValue;taintorg.apache.http.util;CharArrayBuffer;true;toString;();;Argument[-1];ReturnValue;taintorg.apache.http.util;EncodingUtils;true;getAsciiBytes;(String);;Argument[0];ReturnValue;taintorg.apache.http.util;EncodingUtils;true;getAsciiString;;;Argument[0];ReturnValue;taintorg.apache.http.util;EncodingUtils;true;getBytes;(String,String);;Argument[0];ReturnValue;taintorg.apache.http.util;EncodingUtils;true;getString;;;Argument[0];ReturnValue;taintorg.apache.http.util;EntityUtils;true;getContentCharSet;(HttpEntity);;Argument[0];ReturnValue;taintorg.apache.http.util;EntityUtils;true;getContentMimeType;(HttpEntity);;Argument[0];ReturnValue;taintorg.apache.http.util;EntityUtils;true;toByteArray;(HttpEntity);;Argument[0];ReturnValue;taintorg.apache.http.util;EntityUtils;true;toString;;;Argument[0];ReturnValue;taintorg.apache.http;Header;true;getElements;();;Argument[-1];ReturnValue;taintorg.apache.http;HeaderElement;true;getName;();;Argument[-1];ReturnValue;taintorg.apache.http;HeaderElement;true;getParameter;(int);;Argument[-1];ReturnValue;taintorg.apache.http;HeaderElement;true;getParameterByName;(String);;Argument[-1];ReturnValue;taintorg.apache.http;HeaderElement;true;getParameters;();;Argument[-1];ReturnValue;taintorg.apache.http;HeaderElement;true;getValue;();;Argument[-1];ReturnValue;taintorg.apache.http;HeaderIterator;true;nextHeader;();;Argument[-1];ReturnValue;taintorg.apache.http;HttpEntity;true;getContent;();;Argument[-1];ReturnValue;taintorg.apache.http;HttpEntity;true;getContentEncoding;();;Argument[-1];ReturnValue;taintorg.apache.http;HttpEntity;true;getContentType;();;Argument[-1];ReturnValue;taintorg.apache.http;HttpEntityEnclosingRequest;true;getEntity;();;Argument[-1];ReturnValue;taintorg.apache.http;HttpMessage;true;getAllHeaders;();;Argument[-1];ReturnValue;taintorg.apache.http;HttpMessage;true;getFirstHeader;(String);;Argument[-1];ReturnValue;taintorg.apache.http;HttpMessage;true;getHeaders;(String);;Argument[-1];ReturnValue;taintorg.apache.http;HttpMessage;true;getLastHeader;(String);;Argument[-1];ReturnValue;taintorg.apache.http;HttpMessage;true;getParams;();;Argument[-1];ReturnValue;taintorg.apache.http;HttpMessage;true;headerIterator;();;Argument[-1];ReturnValue;taintorg.apache.http;HttpMessage;true;headerIterator;(String);;Argument[-1];ReturnValue;taintorg.apache.http;HttpRequest;true;getRequestLine;();;Argument[-1];ReturnValue;taintorg.apache.http;NameValuePair;true;getName;();;Argument[-1];ReturnValue;taintorg.apache.http;NameValuePair;true;getValue;();;Argument[-1];ReturnValue;taintorg.apache.http;RequestLine;true;getMethod;();;Argument[-1];ReturnValue;taintorg.apache.http;RequestLine;true;getUri;();;Argument[-1];ReturnValue;taintorg.apache.http;RequestLine;true;getUri;;;Argument[-1];ReturnValue;taintorg.apache.http;RequestLine;true;toString;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;abbreviate;(java.lang.String,java.lang.String,int);;Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;abbreviate;(java.lang.String,java.lang.String,int,int);;Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;abbreviate;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;abbreviateMiddle;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;abbreviateMiddle;;;Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;appendIfMissing;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;appendIfMissing;;;Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;appendIfMissingIgnoreCase;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;appendIfMissingIgnoreCase;;;Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;capitalize;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;center;(java.lang.String,int,java.lang.String);;Argument[2];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;center;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;chomp;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;chomp;(java.lang.String,java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;chop;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;defaultIfBlank;;;Argument[0..1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;defaultIfEmpty;;;Argument[0..1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;defaultString;;;Argument[0..1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;deleteWhitespace;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;difference;;;Argument[0..1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;firstNonBlank;;;ArrayElement of Argument[0];ReturnValue;valueorg.apache.commons.lang3;StringUtils;false;firstNonEmpty;;;ArrayElement of Argument[0];ReturnValue;valueorg.apache.commons.lang3;StringUtils;false;getBytes;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;getCommonPrefix;;;ArrayElement of Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;getDigits;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;getIfBlank;;;Argument[0..1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;getIfEmpty;;;Argument[0..1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(char[],char);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(char[],char,int,int);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.lang.Iterable,char);;Element of Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.lang.Iterable,java.lang.String);;Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.lang.Iterable,java.lang.String);;Element of Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.lang.Object[]);;ArrayElement of Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.lang.Object[],char);;ArrayElement of Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.lang.Object[],char,int,int);;ArrayElement of Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.lang.Object[],java.lang.String);;Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.lang.Object[],java.lang.String);;ArrayElement of Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.lang.Object[],java.lang.String,int,int);;Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.lang.Object[],java.lang.String,int,int);;ArrayElement of Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.util.Iterator,char);;Element of Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.util.Iterator,java.lang.String);;Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.util.Iterator,java.lang.String);;Element of Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.util.List,char,int,int);;Element of Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.util.List,java.lang.String,int,int);;Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;join;(java.util.List,java.lang.String,int,int);;Element of Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;joinWith;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;joinWith;;;ArrayElement of Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;left;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;leftPad;(java.lang.String,int,java.lang.String);;Argument[2];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;leftPad;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;lowerCase;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;lowerCase;(java.lang.String,java.util.Locale);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;mid;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;normalizeSpace;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;overlay;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;overlay;;;Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;prependIfMissing;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;prependIfMissing;;;Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;prependIfMissingIgnoreCase;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;prependIfMissingIgnoreCase;;;Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;remove;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;removeAll;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;removeEnd;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;removeEndIgnoreCase;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;removeFirst;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;removeIgnoreCase;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;removePattern;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;removeStart;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;removeStartIgnoreCase;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;repeat;(java.lang.String,java.lang.String,int);;Argument[1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;repeat;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replace;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replace;;;Argument[2];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceAll;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceAll;;;Argument[2];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceChars;(java.lang.String,java.lang.String,java.lang.String);;Argument[2];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceChars;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceEach;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceEach;;;ArrayElement of Argument[2];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceEachRepeatedly;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceEachRepeatedly;;;ArrayElement of Argument[2];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceFirst;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceFirst;;;Argument[2];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceIgnoreCase;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceIgnoreCase;;;Argument[2];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceOnce;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceOnce;;;Argument[2];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceOnceIgnoreCase;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replaceOnceIgnoreCase;;;Argument[2];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replacePattern;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;replacePattern;;;Argument[2];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;reverse;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;reverseDelimited;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;right;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;rightPad;(java.lang.String,int,java.lang.String);;Argument[2];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;rightPad;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;rotate;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;split;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;split;(java.lang.String,char);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;split;(java.lang.String,java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;split;(java.lang.String,java.lang.String,int);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;splitByCharacterType;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;splitByCharacterTypeCamelCase;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;splitByWholeSeparator;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;splitByWholeSeparatorPreserveAllTokens;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;splitPreserveAllTokens;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;splitPreserveAllTokens;(java.lang.String,char);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;splitPreserveAllTokens;(java.lang.String,java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;splitPreserveAllTokens;(java.lang.String,java.lang.String,int);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;strip;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;strip;(java.lang.String,java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;stripAccents;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;stripAll;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;stripEnd;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;stripStart;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;stripToEmpty;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;stripToNull;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;substring;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;substringAfter;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;substringAfterLast;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;substringBefore;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;substringBeforeLast;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;substringBetween;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;substringsBetween;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;swapCase;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;toCodePoints;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;toEncodedString;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;toRootLowerCase;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;toRootUpperCase;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;toString;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;trim;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;trimToEmpty;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;trimToNull;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;truncate;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;uncapitalize;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;unwrap;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;upperCase;(java.lang.String);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;upperCase;(java.lang.String,java.util.Locale);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;valueOf;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;wrap;(java.lang.String,char);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;wrap;(java.lang.String,java.lang.String);;Argument[0..1];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;wrapIfMissing;(java.lang.String,char);;Argument[0];ReturnValue;taintorg.apache.commons.lang3;StringUtils;false;wrapIfMissing;(java.lang.String,java.lang.String);;Argument[0..1];ReturnValue;taintorg.springframework.util;AntPathMatcher;false;combine;;;Argument[0..1];ReturnValue;taintorg.springframework.util;AntPathMatcher;false;doMatch;;;Argument[1];MapValue of Argument[3];taintorg.springframework.util;AntPathMatcher;false;extractPathWithinPattern;;;Argument[1];ReturnValue;taintorg.springframework.util;AntPathMatcher;false;extractUriTemplateVariables;;;Argument[1];MapValue of ReturnValue;taintorg.springframework.util;AntPathMatcher;false;tokenizePath;;;Argument[0];ArrayElement of ReturnValue;taintorg.springframework.util;AntPathMatcher;false;tokenizePattern;;;Argument[0];ArrayElement of ReturnValue;taintorg.springframework.util;AutoPopulatingList;false;AutoPopulatingList;(java.util.List,java.lang.Class);;Element of Argument[0];Element of Argument[-1];valueorg.springframework.util;AutoPopulatingList;false;AutoPopulatingList;(java.util.List,org.springframework.util.AutoPopulatingList.ElementFactory);;Element of Argument[0];Element of Argument[-1];valueorg.springframework.util;Base64Utils;false;decode;;;Argument[0];ReturnValue;taintorg.springframework.util;Base64Utils;false;decodeFromString;;;Argument[0];ReturnValue;taintorg.springframework.util;Base64Utils;false;decodeFromUrlSafeString;;;Argument[0];ReturnValue;taintorg.springframework.util;Base64Utils;false;decodeUrlSafe;;;Argument[0];ReturnValue;taintorg.springframework.util;Base64Utils;false;encode;;;Argument[0];ReturnValue;taintorg.springframework.util;Base64Utils;false;encodeToString;;;Argument[0];ReturnValue;taintorg.springframework.util;Base64Utils;false;encodeToUrlSafeString;;;Argument[0];ReturnValue;taintorg.springframework.util;Base64Utils;false;encodeUrlSafe;;;Argument[0];ReturnValue;taintorg.springframework.util;CollectionUtils;false;arrayToList;;;ArrayElement of Argument[0];Element of ReturnValue;valueorg.springframework.util;CollectionUtils;false;findFirstMatch;;;Element of Argument[0];ReturnValue;valueorg.springframework.util;CollectionUtils;false;findValueOfType;;;Element of Argument[0];ReturnValue;valueorg.springframework.util;CollectionUtils;false;firstElement;;;Element of Argument[0];ReturnValue;valueorg.springframework.util;CollectionUtils;false;lastElement;;;Element of Argument[0];ReturnValue;valueorg.springframework.util;CollectionUtils;false;mergeArrayIntoCollection;;;ArrayElement of Argument[0];Element of Argument[1];valueorg.springframework.util;CollectionUtils;false;mergePropertiesIntoMap;;;MapKey of Argument[0];MapKey of Argument[1];valueorg.springframework.util;CollectionUtils;false;mergePropertiesIntoMap;;;MapValue of Argument[0];MapValue of Argument[1];valueorg.springframework.util;CollectionUtils;false;toArray;;;Element of Argument[0];ArrayElement of ReturnValue;valueorg.springframework.util;CollectionUtils;false;toIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.springframework.util;CollectionUtils;false;toMultiValueMap;;;Element of MapValue of Argument[0];Element of MapValue of ReturnValue;valueorg.springframework.util;CollectionUtils;false;toMultiValueMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.springframework.util;CollectionUtils;false;unmodifiableMultiValueMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.springframework.util;CollectionUtils;false;unmodifiableMultiValueMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.springframework.util;CompositeIterator;false;add;;;Element of Argument[0];Element of Argument[-1];valueorg.springframework.util;ConcurrentReferenceHashMap;false;getReference;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.springframework.util;ConcurrentReferenceHashMap;false;getReference;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.springframework.util;ConcurrentReferenceHashMap;false;getSegment;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.springframework.util;ConcurrentReferenceHashMap;false;getSegment;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.springframework.util;FastByteArrayOutputStream;false;getInputStream;;;Argument[-1];ReturnValue;taintorg.springframework.util;FastByteArrayOutputStream;false;toByteArray;;;Argument[-1];ReturnValue;taintorg.springframework.util;FastByteArrayOutputStream;false;write;;;Argument[0];Argument[-1];taintorg.springframework.util;FastByteArrayOutputStream;false;writeTo;;;Argument[-1];Argument[0];taintorg.springframework.util;FileCopyUtils;false;copy;;;Argument[0];Argument[1];taintorg.springframework.util;FileCopyUtils;false;copyToByteArray;;;Argument[0];ReturnValue;taintorg.springframework.util;FileCopyUtils;false;copyToString;;;Argument[0];ReturnValue;taintorg.springframework.util;FileSystemUtils;false;copyRecursively;(java.io.File,java.io.File);;Argument[0];Argument[1];taintorg.springframework.util;LinkedMultiValueMap;false;LinkedMultiValueMap;(java.util.Map);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.springframework.util;LinkedMultiValueMap;false;LinkedMultiValueMap;(java.util.Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.springframework.util;LinkedMultiValueMap;false;deepCopy;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.springframework.util;LinkedMultiValueMap;false;deepCopy;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.springframework.util;MultiValueMap;true;add;;;Argument[0];MapKey of Argument[-1];valueorg.springframework.util;MultiValueMap;true;add;;;Argument[1];Element of MapValue of Argument[-1];valueorg.springframework.util;MultiValueMap;true;addAll;(java.lang.Object,java.util.List);;Argument[0];MapKey of Argument[-1];valueorg.springframework.util;MultiValueMap;true;addAll;(java.lang.Object,java.util.List);;Element of Argument[1];Element of MapValue of Argument[-1];valueorg.springframework.util;MultiValueMap;true;addAll;(org.springframework.util.MultiValueMap);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.springframework.util;MultiValueMap;true;addAll;(org.springframework.util.MultiValueMap);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.springframework.util;MultiValueMap;true;addIfAbsent;;;Argument[0];MapKey of Argument[-1];valueorg.springframework.util;MultiValueMap;true;addIfAbsent;;;Argument[1];Element of MapValue of Argument[-1];valueorg.springframework.util;MultiValueMap;true;getFirst;;;Element of MapValue of Argument[-1];ReturnValue;valueorg.springframework.util;MultiValueMap;true;set;;;Argument[0];MapKey of Argument[-1];valueorg.springframework.util;MultiValueMap;true;set;;;Argument[1];Element of MapValue of Argument[-1];valueorg.springframework.util;MultiValueMap;true;setAll;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.springframework.util;MultiValueMap;true;setAll;;;MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.springframework.util;MultiValueMap;true;toSingleValueMap;;;Element of MapValue of Argument[-1];MapValue of ReturnValue;valueorg.springframework.util;MultiValueMap;true;toSingleValueMap;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.springframework.util;MultiValueMapAdapter;false;MultiValueMapAdapter;;;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.springframework.util;MultiValueMapAdapter;false;MultiValueMapAdapter;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.springframework.util;ObjectUtils;false;addObjectToArray;;;Argument[1];ArrayElement of ReturnValue;valueorg.springframework.util;ObjectUtils;false;addObjectToArray;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.springframework.util;ObjectUtils;false;toObjectArray;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.springframework.util;ObjectUtils;false;unwrapOptional;;;Element of Argument[0];ReturnValue;valueorg.springframework.util;PropertiesPersister;true;load;;;Argument[1];Argument[0];taintorg.springframework.util;PropertiesPersister;true;loadFromXml;;;Argument[1];Argument[0];taintorg.springframework.util;PropertiesPersister;true;store;;;Argument[0];Argument[1];taintorg.springframework.util;PropertiesPersister;true;store;;;Argument[2];Argument[1];taintorg.springframework.util;PropertiesPersister;true;storeToXml;;;Argument[0];Argument[1];taintorg.springframework.util;PropertiesPersister;true;storeToXml;;;Argument[2];Argument[1];taintorg.springframework.util;PropertyPlaceholderHelper;false;PropertyPlaceholderHelper;;;Argument[0..1];Argument[-1];taintorg.springframework.util;PropertyPlaceholderHelper;false;parseStringValue;;;Argument[0];ReturnValue;taintorg.springframework.util;PropertyPlaceholderHelper;false;replacePlaceholders;(java.lang.String,java.util.Properties);;MapValue of Argument[1];ReturnValue;taintorg.springframework.util;PropertyPlaceholderHelper;false;replacePlaceholders;;;Argument[0];ReturnValue;taintorg.springframework.util;ResourceUtils;false;extractArchiveURL;;;Argument[0];ReturnValue;taintorg.springframework.util;ResourceUtils;false;extractJarFileURL;;;Argument[0];ReturnValue;taintorg.springframework.util;ResourceUtils;false;getFile;;;Argument[0];ReturnValue;taintorg.springframework.util;ResourceUtils;false;getURL;;;Argument[0];ReturnValue;taintorg.springframework.util;ResourceUtils;false;toURI;;;Argument[0];ReturnValue;taintorg.springframework.util;RouteMatcher;true;combine;;;Argument[0..1];ReturnValue;taintorg.springframework.util;RouteMatcher;true;matchAndExtract;;;Argument[0];MapKey of ReturnValue;taintorg.springframework.util;RouteMatcher;true;matchAndExtract;;;Argument[1];MapValue of ReturnValue;taintorg.springframework.util;RouteMatcher;true;parseRoute;;;Argument[0];ReturnValue;taintorg.springframework.util;SerializationUtils;false;deserialize;;;Argument[0];ReturnValue;taintorg.springframework.util;SerializationUtils;false;serialize;;;Argument[0];ReturnValue;taintorg.springframework.util;StreamUtils;false;copy;(byte[],java.io.OutputStream);;Argument[0];Argument[1];taintorg.springframework.util;StreamUtils;false;copy;(java.io.InputStream,java.io.OutputStream);;Argument[0];Argument[1];taintorg.springframework.util;StreamUtils;false;copy;(java.lang.String,java.nio.charset.Charset,java.io.OutputStream);;Argument[0];Argument[2];taintorg.springframework.util;StreamUtils;false;copyRange;;;Argument[0];Argument[1];taintorg.springframework.util;StreamUtils;false;copyToByteArray;;;Argument[0];ReturnValue;taintorg.springframework.util;StreamUtils;false;copyToString;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;addStringToArray;;;Argument[1];ArrayElement of ReturnValue;valueorg.springframework.util;StringUtils;false;addStringToArray;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.springframework.util;StringUtils;false;applyRelativePath;;;Argument[0..1];ReturnValue;taintorg.springframework.util;StringUtils;false;arrayToCommaDelimitedString;;;ArrayElement of Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;arrayToDelimitedString;;;Argument[1];ReturnValue;taintorg.springframework.util;StringUtils;false;arrayToDelimitedString;;;ArrayElement of Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;capitalize;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;cleanPath;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;collectionToCommaDelimitedString;;;Element of Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;collectionToDelimitedString;;;Argument[1..3];ReturnValue;taintorg.springframework.util;StringUtils;false;collectionToDelimitedString;;;Element of Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;commaDelimitedListToSet;;;Argument[0];Element of ReturnValue;taintorg.springframework.util;StringUtils;false;commaDelimitedListToStringArray;;;Argument[0];ArrayElement of ReturnValue;taintorg.springframework.util;StringUtils;false;concatenateStringArrays;;;ArrayElement of Argument[0..1];ArrayElement of ReturnValue;taintorg.springframework.util;StringUtils;false;delete;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;deleteAny;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;delimitedListToStringArray;;;Argument[0];ArrayElement of ReturnValue;taintorg.springframework.util;StringUtils;false;getFilename;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;getFilenameExtension;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;mergeStringArrays;;;ArrayElement of Argument[0..1];ArrayElement of ReturnValue;valueorg.springframework.util;StringUtils;false;quote;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;quoteIfString;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;removeDuplicateStrings;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.springframework.util;StringUtils;false;replace;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;replace;;;Argument[2];ReturnValue;taintorg.springframework.util;StringUtils;false;sortStringArray;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valueorg.springframework.util;StringUtils;false;split;;;Argument[0];ArrayElement of ReturnValue;taintorg.springframework.util;StringUtils;false;splitArrayElementsIntoProperties;;;ArrayElement of Argument[0];MapKey of ReturnValue;taintorg.springframework.util;StringUtils;false;splitArrayElementsIntoProperties;;;ArrayElement of Argument[0];MapValue of ReturnValue;taintorg.springframework.util;StringUtils;false;stripFilenameExtension;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;toStringArray;;;Element of Argument[0];ArrayElement of ReturnValue;valueorg.springframework.util;StringUtils;false;tokenizeToStringArray;;;Argument[0];ArrayElement of ReturnValue;taintorg.springframework.util;StringUtils;false;trimAllWhitespace;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;trimArrayElements;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;taintorg.springframework.util;StringUtils;false;trimLeadingCharacter;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;trimLeadingWhitespace;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;trimTrailingCharacter;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;trimTrailingWhitespace;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;trimWhitespace;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;uncapitalize;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;unqualify;;;Argument[0];ReturnValue;taintorg.springframework.util;StringUtils;false;uriDecode;;;Argument[0];ReturnValue;taintorg.springframework.util;StringValueResolver;false;resolveStringValue;;;Argument[0];ReturnValue;taintorg.springframework.util;SystemPropertyUtils;false;resolvePlaceholders;;;Argument[0];ReturnValue;taintandroid.content;Intent;false;Intent;(Intent);;MapKey of SyntheticField[android.content.Intent.extras] of Argument[0];MapKey of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;false;Intent;(Intent);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[0];MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;false;Intent;(String,Uri);;Argument[1];SyntheticField[android.content.Intent.data] of Argument[-1];valueandroid.content;Intent;false;Intent;(String,Uri,Context,Class);;Argument[1];SyntheticField[android.content.Intent.data] of Argument[-1];valueandroid.content;Intent;false;createChooser;;;Argument[0..2];MapValue of SyntheticField[android.content.Intent.extras] of ReturnValue;valueandroid.content;Intent;false;getIntent;;;Argument[0];SyntheticField[android.content.Intent.data] of ReturnValue;taintandroid.content;Intent;false;getIntentOld;;;Argument[0];SyntheticField[android.content.Intent.data] of ReturnValue;taintandroid.content;Intent;false;parseUri;;;Argument[0];SyntheticField[android.content.Intent.data] of ReturnValue;taintandroid.content;Intent;true;addCategory;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;addFlags;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;getBundleExtra;(String);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;getByteArrayExtra;(String);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;getCharArrayExtra;(String);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;getCharSequenceArrayExtra;(String);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;getCharSequenceArrayListExtra;(String);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;getCharSequenceExtra;(String);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;getData;;;SyntheticField[android.content.Intent.data] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;getDataString;;;SyntheticField[android.content.Intent.data] of Argument[-1];ReturnValue;taintandroid.content;Intent;true;getExtras;();;SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;getParcelableArrayExtra;(String);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;getParcelableArrayListExtra;(String);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;getParcelableExtra;(String);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;getSerializableExtra;(String);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;getStringArrayExtra;(String);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;getStringArrayListExtra;(String);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;getStringExtra;(String);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];ReturnValue;valueandroid.content;Intent;true;putCharSequenceArrayListExtra;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;putCharSequenceArrayListExtra;;;Argument[0];MapKey of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;putCharSequenceArrayListExtra;;;Argument[1];MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;putExtra;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;putExtra;;;Argument[0];MapKey of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;putExtra;;;Argument[1];MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;putExtras;(Bundle);;Argument[-1];ReturnValue;valueandroid.content;Intent;true;putExtras;(Bundle);;MapKey of Argument[0];MapKey of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;putExtras;(Bundle);;MapValue of Argument[0];MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;putExtras;(Intent);;Argument[-1];ReturnValue;valueandroid.content;Intent;true;putExtras;(Intent);;MapKey of SyntheticField[android.content.Intent.extras] of Argument[0];MapKey of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;putExtras;(Intent);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[0];MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;putIntegerArrayListExtra;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;putIntegerArrayListExtra;;;Argument[0];MapKey of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;putParcelableArrayListExtra;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;putParcelableArrayListExtra;;;Argument[0];MapKey of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;putParcelableArrayListExtra;;;Argument[1];MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;putStringArrayListExtra;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;putStringArrayListExtra;;;Argument[0];MapKey of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;putStringArrayListExtra;;;Argument[1];MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;replaceExtras;(Bundle);;Argument[-1];ReturnValue;valueandroid.content;Intent;true;replaceExtras;(Bundle);;MapKey of Argument[0];MapKey of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;replaceExtras;(Bundle);;MapValue of Argument[0];MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;replaceExtras;(Intent);;Argument[-1];ReturnValue;valueandroid.content;Intent;true;replaceExtras;(Intent);;MapKey of SyntheticField[android.content.Intent.extras] of Argument[0];MapKey of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;replaceExtras;(Intent);;MapValue of SyntheticField[android.content.Intent.extras] of Argument[0];MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1];valueandroid.content;Intent;true;setAction;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;setClass;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;setClassName;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;setComponent;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;setData;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;setData;;;Argument[0];SyntheticField[android.content.Intent.data] of Argument[-1];valueandroid.content;Intent;true;setDataAndNormalize;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;setDataAndNormalize;;;Argument[0];SyntheticField[android.content.Intent.data] of Argument[-1];valueandroid.content;Intent;true;setDataAndType;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;setDataAndType;;;Argument[0];SyntheticField[android.content.Intent.data] of Argument[-1];valueandroid.content;Intent;true;setDataAndTypeAndNormalize;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;setDataAndTypeAndNormalize;;;Argument[0];SyntheticField[android.content.Intent.data] of Argument[-1];valueandroid.content;Intent;true;setFlags;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;setIdentifier;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;setPackage;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;setType;;;Argument[-1];ReturnValue;valueandroid.content;Intent;true;setTypeAndNormalize;;;Argument[-1];ReturnValue;valueandroid.os;BaseBundle;true;get;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;BaseBundle;true;getString;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;BaseBundle;true;getString;(String,String);;Argument[1];ReturnValue;valueandroid.os;BaseBundle;true;getString;(String,String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;BaseBundle;true;getStringArray;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;BaseBundle;true;keySet;();;MapKey of Argument[-1];Element of ReturnValue;valueandroid.os;BaseBundle;true;putAll;(PersistableBundle);;MapKey of Argument[0];MapKey of Argument[-1];valueandroid.os;BaseBundle;true;putAll;(PersistableBundle);;MapValue of Argument[0];MapValue of Argument[-1];valueandroid.os;BaseBundle;true;putBoolean;;;Argument[0];MapKey of Argument[-1];valueandroid.os;BaseBundle;true;putBooleanArray;;;Argument[0];MapKey of Argument[-1];valueandroid.os;BaseBundle;true;putDouble;;;Argument[0];MapKey of Argument[-1];valueandroid.os;BaseBundle;true;putDoubleArray;;;Argument[0];MapKey of Argument[-1];valueandroid.os;BaseBundle;true;putInt;;;Argument[0];MapKey of Argument[-1];valueandroid.os;BaseBundle;true;putIntArray;;;Argument[0];MapKey of Argument[-1];valueandroid.os;BaseBundle;true;putLong;;;Argument[0];MapKey of Argument[-1];valueandroid.os;BaseBundle;true;putLongArray;;;Argument[0];MapKey of Argument[-1];valueandroid.os;BaseBundle;true;putString;;;Argument[0];MapKey of Argument[-1];valueandroid.os;BaseBundle;true;putString;;;Argument[1];MapValue of Argument[-1];valueandroid.os;BaseBundle;true;putStringArray;;;Argument[0];MapKey of Argument[-1];valueandroid.os;BaseBundle;true;putStringArray;;;Argument[1];MapValue of Argument[-1];valueandroid.os;Bundle;false;Bundle;(Bundle);;MapKey of Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;false;Bundle;(Bundle);;MapValue of Argument[0];MapValue of Argument[-1];valueandroid.os;Bundle;false;Bundle;(PersistableBundle);;MapKey of Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;false;Bundle;(PersistableBundle);;MapValue of Argument[0];MapValue of Argument[-1];valueandroid.os;Bundle;true;clone;();;MapKey of Argument[-1];MapKey of ReturnValue;valueandroid.os;Bundle;true;clone;();;MapValue of Argument[-1];MapValue of ReturnValue;valueandroid.os;Bundle;true;deepCopy;();;MapKey of Argument[-1];MapKey of ReturnValue;valueandroid.os;Bundle;true;deepCopy;();;MapValue of Argument[-1];MapValue of ReturnValue;valueandroid.os;Bundle;true;getBinder;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;Bundle;true;getBundle;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;Bundle;true;getByteArray;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;Bundle;true;getCharArray;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;Bundle;true;getCharSequence;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;Bundle;true;getCharSequence;(String,CharSequence);;Argument[1];ReturnValue;valueandroid.os;Bundle;true;getCharSequence;(String,CharSequence);;MapValue of Argument[-1];ReturnValue;valueandroid.os;Bundle;true;getCharSequenceArray;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;Bundle;true;getCharSequenceArrayList;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;Bundle;true;getParcelable;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;Bundle;true;getParcelableArray;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;Bundle;true;getParcelableArrayList;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;Bundle;true;getSerializable;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;Bundle;true;getSparseParcelableArray;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;Bundle;true;getStringArrayList;(String);;MapValue of Argument[-1];ReturnValue;valueandroid.os;Bundle;true;putAll;(Bundle);;MapKey of Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putAll;(Bundle);;MapValue of Argument[0];MapValue of Argument[-1];valueandroid.os;Bundle;true;putBinder;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putBinder;;;Argument[1];MapValue of Argument[-1];valueandroid.os;Bundle;true;putBundle;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putBundle;;;Argument[1];MapValue of Argument[-1];valueandroid.os;Bundle;true;putByte;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putByteArray;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putByteArray;;;Argument[1];MapValue of Argument[-1];valueandroid.os;Bundle;true;putChar;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putCharArray;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putCharArray;;;Argument[1];MapValue of Argument[-1];valueandroid.os;Bundle;true;putCharSequence;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putCharSequence;;;Argument[1];MapValue of Argument[-1];valueandroid.os;Bundle;true;putCharSequenceArray;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putCharSequenceArray;;;Argument[1];MapValue of Argument[-1];valueandroid.os;Bundle;true;putCharSequenceArrayList;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putCharSequenceArrayList;;;Argument[1];MapValue of Argument[-1];valueandroid.os;Bundle;true;putFloat;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putFloatArray;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putIntegerArrayList;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putParcelable;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putParcelable;;;Argument[1];MapValue of Argument[-1];valueandroid.os;Bundle;true;putParcelableArray;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putParcelableArray;;;Argument[1];MapValue of Argument[-1];valueandroid.os;Bundle;true;putParcelableArrayList;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putParcelableArrayList;;;Argument[1];MapValue of Argument[-1];valueandroid.os;Bundle;true;putSerializable;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putSerializable;;;Argument[1];MapValue of Argument[-1];valueandroid.os;Bundle;true;putShort;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putShortArray;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putSize;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putSizeF;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putSparseParcelableArray;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putSparseParcelableArray;;;Argument[1];MapValue of Argument[-1];valueandroid.os;Bundle;true;putStringArrayList;;;Argument[0];MapKey of Argument[-1];valueandroid.os;Bundle;true;putStringArrayList;;;Argument[1];MapValue of Argument[-1];valueandroid.os;Bundle;true;readFromParcel;;;Argument[0];MapKey of Argument[-1];taintandroid.os;Bundle;true;readFromParcel;;;Argument[0];MapValue of Argument[-1];taintorg.springframework.web.util;AbstractUriTemplateHandler;true;getBaseUrl;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;AbstractUriTemplateHandler;true;setBaseUrl;;;Argument[0];Argument[-1];taintorg.springframework.web.util;AbstractUriTemplateHandler;true;setDefaultUriVariables;;;Argument[0];Argument[-1];taintorg.springframework.web.util;ContentCachingRequestWrapper;false;ContentCachingRequestWrapper;;;Argument[0];Argument[-1];taintorg.springframework.web.util;ContentCachingRequestWrapper;false;getContentAsByteArray;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;ContentCachingResponseWrapper;false;ContentCachingResponseWrapper;;;Argument[0];Argument[-1];taintorg.springframework.web.util;ContentCachingResponseWrapper;false;getContentAsByteArray;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;ContentCachingResponseWrapper;false;getContentInputStream;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;DefaultUriBuilderFactory;false;DefaultUriBuilderFactory;;;Argument[0];Argument[-1];taintorg.springframework.web.util;DefaultUriBuilderFactory;false;builder;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;DefaultUriBuilderFactory;false;getDefaultUriVariables;;;Argument[-1];MapValue of ReturnValue;taintorg.springframework.web.util;DefaultUriBuilderFactory;false;setDefaultUriVariables;;;MapValue of Argument[0];Argument[-1];taintorg.springframework.web.util;DefaultUriBuilderFactory;false;uriString;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;HtmlUtils;false;htmlEscape;;;Argument[0];ReturnValue;taintorg.springframework.web.util;HtmlUtils;false;htmlEscapeDecimal;;;Argument[0];ReturnValue;taintorg.springframework.web.util;HtmlUtils;false;htmlEscapeHex;;;Argument[0];ReturnValue;taintorg.springframework.web.util;HtmlUtils;false;htmlUnescape;;;Argument[0];ReturnValue;taintorg.springframework.web.util;ServletContextPropertyUtils;false;resolvePlaceholders;;;Argument[0..1];ReturnValue;taintorg.springframework.web.util;ServletRequestPathUtils;false;getCachedPath;;;Argument[0];ReturnValue;taintorg.springframework.web.util;ServletRequestPathUtils;false;getCachedPathValue;;;Argument[0];ReturnValue;taintorg.springframework.web.util;ServletRequestPathUtils;false;getParsedRequestPath;;;Argument[0];ReturnValue;taintorg.springframework.web.util;ServletRequestPathUtils;false;parseAndCache;;;Argument[0];ReturnValue;taintorg.springframework.web.util;ServletRequestPathUtils;false;setParsedRequestPath;;;Argument[0];Argument[1];taintorg.springframework.web.util;UriBuilder;true;build;(Map);;MapValue of Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;build;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriBuilder;true;fragment;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;fragment;;;Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;host;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;host;;;Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;path;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;path;;;Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;pathSegment;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;pathSegment;;;ArrayElement of Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;port;(java.lang.String);;Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;port;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;query;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;query;;;Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;queryParam;(String,Collection);;Element of Argument[1];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;queryParam;(String,Object[]);;ArrayElement of Argument[1];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;queryParam;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;queryParam;;;Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;queryParamIfPresent;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;queryParamIfPresent;;;Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;queryParamIfPresent;;;Element of Argument[1];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;queryParams;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;queryParams;;;Element of MapValue of Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;queryParams;;;MapKey of Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;replacePath;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;replacePath;;;Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;replaceQuery;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;replaceQuery;;;Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;replaceQueryParam;(String,Collection);;Element of Argument[1];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;replaceQueryParam;(String,Object[]);;ArrayElement of Argument[1];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;replaceQueryParam;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;replaceQueryParam;;;Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;replaceQueryParams;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;replaceQueryParams;;;Element of MapValue of Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;replaceQueryParams;;;MapKey of Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;scheme;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;scheme;;;Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilder;true;userInfo;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriBuilder;true;userInfo;;;Argument[0];Argument[-1];taintorg.springframework.web.util;UriBuilderFactory;true;builder;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriBuilderFactory;true;uriString;;;Argument[-1..0];ReturnValue;taintorg.springframework.web.util;UriComponents$UriTemplateVariables;true;getValue;;;MapValue of Argument[-1];ReturnValue;valueorg.springframework.web.util;UriComponents;false;UriComponents;;;Argument[0..1];Argument[-1];taintorg.springframework.web.util;UriComponents;false;copyToUriComponentsBuilder;;;Argument[-1];Argument[0];taintorg.springframework.web.util;UriComponents;false;encode;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponents;false;expand;(Map);;MapValue of Argument[0];ReturnValue;taintorg.springframework.web.util;UriComponents;false;expand;(Object[]);;ArrayElement of Argument[0];ReturnValue;taintorg.springframework.web.util;UriComponents;false;expand;(UriTemplateVariables);;MapValue of Argument[0];ReturnValue;taintorg.springframework.web.util;UriComponents;false;getFragment;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponents;false;getHost;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponents;false;getPath;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponents;false;getPathSegments;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponents;false;getQuery;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponents;false;getQueryParams;;;Argument[-1];Element of MapValue of ReturnValue;taintorg.springframework.web.util;UriComponents;false;getQueryParams;;;Argument[-1];MapKey of ReturnValue;taintorg.springframework.web.util;UriComponents;false;getScheme;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponents;false;getSchemeSpecificPart;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponents;false;getUserInfo;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponents;false;normalize;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponents;false;toString;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponents;false;toUri;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponents;false;toUriString;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponentsBuilder;false;build;(Map);;MapValue of Argument[0];ReturnValue;taintorg.springframework.web.util;UriComponentsBuilder;false;build;(Object[]);;ArrayElement of Argument[0];ReturnValue;taintorg.springframework.web.util;UriComponentsBuilder;false;build;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponentsBuilder;false;buildAndExpand;(Map);;MapValue of Argument[0];ReturnValue;taintorg.springframework.web.util;UriComponentsBuilder;false;buildAndExpand;(Object[]);;ArrayElement of Argument[0];ReturnValue;taintorg.springframework.web.util;UriComponentsBuilder;false;cloneBuilder;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriComponentsBuilder;false;encode;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriComponentsBuilder;false;fromHttpRequest;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriComponentsBuilder;false;fromHttpUrl;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriComponentsBuilder;false;fromOriginHeader;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriComponentsBuilder;false;fromPath;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriComponentsBuilder;false;fromUri;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriComponentsBuilder;false;fromUriString;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriComponentsBuilder;false;parseForwardedFor;;;Argument[0..1];ReturnValue;taintorg.springframework.web.util;UriComponentsBuilder;false;schemeSpecificPart;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriComponentsBuilder;false;schemeSpecificPart;;;Argument[0];Argument[-1];taintorg.springframework.web.util;UriComponentsBuilder;false;toUriString;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriComponentsBuilder;false;uri;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriComponentsBuilder;false;uri;;;Argument[0];Argument[-1];taintorg.springframework.web.util;UriComponentsBuilder;false;uriComponents;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriComponentsBuilder;false;uriComponents;;;Argument[0];Argument[-1];taintorg.springframework.web.util;UriComponentsBuilder;false;uriVariables;;;Argument[-1];ReturnValue;valueorg.springframework.web.util;UriComponentsBuilder;false;uriVariables;;;MapValue of Argument[0];Argument[-1];taintorg.springframework.web.util;UriTemplate;false;expand;(Map);;MapValue of Argument[0];ReturnValue;taintorg.springframework.web.util;UriTemplate;false;expand;(Object[]);;ArrayElement of Argument[0];ReturnValue;taintorg.springframework.web.util;UriTemplate;false;getVariableNames;;;Argument[-1];Element of ReturnValue;taintorg.springframework.web.util;UriTemplate;false;match;;;Argument[0];MapValue of ReturnValue;taintorg.springframework.web.util;UriTemplate;false;toString;;;Argument[-1];ReturnValue;taintorg.springframework.web.util;UriTemplateHandler;true;expand;(String,Map);;MapValue of Argument[1];ReturnValue;taintorg.springframework.web.util;UriTemplateHandler;true;expand;(String,Object[]);;ArrayElement of Argument[1];ReturnValue;taintorg.springframework.web.util;UriTemplateHandler;true;expand;;;Argument[-1..0];ReturnValue;taintorg.springframework.web.util;UriUtils;false;decode;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriUtils;false;encode;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodeAuthority;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodeFragment;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodeHost;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodePath;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodePathSegment;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodePort;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodeQuery;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodeQueryParam;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodeQueryParams;;;MapKey of Argument[0];MapKey of ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodeQueryParams;;;MapValue of Argument[0];MapValue of ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodeScheme;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodeUriVariables;(Map);;MapKey of Argument[0];MapKey of ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodeUriVariables;(Map);;MapValue of Argument[0];MapValue of ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodeUriVariables;(Object[]);;ArrayElement of Argument[0];ArrayElement of ReturnValue;taintorg.springframework.web.util;UriUtils;false;encodeUserInfo;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UriUtils;false;extractFileExtension;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UrlPathHelper;false;decodeMatrixVariables;;;MapKey of Argument[1];MapKey of ReturnValue;valueorg.springframework.web.util;UrlPathHelper;false;decodeMatrixVariables;;;MapValue of Argument[1];MapValue of ReturnValue;taintorg.springframework.web.util;UrlPathHelper;false;decodePathVariables;;;MapKey of Argument[1];MapKey of ReturnValue;valueorg.springframework.web.util;UrlPathHelper;false;decodePathVariables;;;MapValue of Argument[1];MapValue of ReturnValue;taintorg.springframework.web.util;UrlPathHelper;false;decodeRequestString;;;Argument[1];ReturnValue;taintorg.springframework.web.util;UrlPathHelper;false;getContextPath;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UrlPathHelper;false;getOriginatingContextPath;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UrlPathHelper;false;getOriginatingQueryString;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UrlPathHelper;false;getOriginatingRequestUri;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UrlPathHelper;false;getPathWithinApplication;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UrlPathHelper;false;getPathWithinServletMapping;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UrlPathHelper;false;getRequestUri;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UrlPathHelper;false;getResolvedLookupPath;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UrlPathHelper;false;getServletPath;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UrlPathHelper;false;removeSemicolonContent;;;Argument[0];ReturnValue;taintorg.springframework.web.util;UrlPathHelper;false;resolveAndCacheLookupPath;;;Argument[0];ReturnValue;taintorg.springframework.web.util;WebUtils;false;findParameterValue;(Map,String);;MapValue of Argument[0];ReturnValue;valueorg.springframework.web.util;WebUtils;false;findParameterValue;(ServletRequest,String);;Argument[0];ReturnValue;taintorg.springframework.web.util;WebUtils;false;getCookie;;;Argument[0];ReturnValue;taintorg.springframework.web.util;WebUtils;false;getNativeRequest;;;Argument[0];ReturnValue;taintorg.springframework.web.util;WebUtils;false;getNativeResponse;;;Argument[0];ReturnValue;taintorg.springframework.web.util;WebUtils;false;getParametersStartingWith;;;Argument[0];MapKey of ReturnValue;taintorg.springframework.web.util;WebUtils;false;getParametersStartingWith;;;Argument[0];MapValue of ReturnValue;taintorg.springframework.web.util;WebUtils;false;getRealPath;;;Argument[0..1];ReturnValue;taintorg.springframework.web.util;WebUtils;false;getRequiredSessionAttribute;;;Argument[0];ReturnValue;taintorg.springframework.web.util;WebUtils;false;getSessionAttribute;;;Argument[0];ReturnValue;taintorg.springframework.web.util;WebUtils;false;parseMatrixVariables;;;Argument[0];MapKey of ReturnValue;taintorg.springframework.web.util;WebUtils;false;parseMatrixVariables;;;Argument[0];MapValue of ReturnValue;taintorg.springframework.web.util;WebUtils;false;setSessionAttribute;;;Argument[2];Argument[0];taintorg.json;CDL;false;rowToJSONArray;;;Argument[0];ReturnValue;taintorg.json;CDL;false;rowToJSONObject;;;Argument[0..1];ReturnValue;taintorg.json;CDL;false;rowToString;;;Argument[0];ReturnValue;taintorg.json;CDL;false;toJSONArray;;;Argument[0..1];ReturnValue;taintorg.json;CDL;false;toString;;;Argument[0..1];ReturnValue;taintorg.json;Cookie;false;escape;;;Argument[0];ReturnValue;taintorg.json;Cookie;false;toJSONObject;;;Argument[0];ReturnValue;taintorg.json;Cookie;false;toString;;;Argument[0];ReturnValue;taintorg.json;Cookie;false;unescape;;;Argument[0];ReturnValue;taintorg.json;CookieList;false;toJSONObject;;;Argument[0];ReturnValue;taintorg.json;CookieList;false;toString;;;Argument[0];ReturnValue;taintorg.json;HTTP;false;toJSONObject;;;Argument[0];ReturnValue;taintorg.json;HTTP;false;toString;;;Argument[0];ReturnValue;taintorg.json;HTTPTokener;false;HTTPTokener;;;Argument[0];Argument[-1];taintorg.json;HTTPTokener;false;nextToken;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;JSONArray;(Collection);;Element of Argument[0];Argument[-1];taintorg.json;JSONArray;false;JSONArray;(Iterable);;Element of Argument[0];Argument[-1];taintorg.json;JSONArray;false;JSONArray;(JSONArray);;Argument[0];Argument[-1];taintorg.json;JSONArray;false;JSONArray;(JSONTokener);;Argument[0];Argument[-1];taintorg.json;JSONArray;false;JSONArray;(Object);;ArrayElement of Argument[0];Argument[-1];taintorg.json;JSONArray;false;JSONArray;(String);;Argument[0];Argument[-1];taintorg.json;JSONArray;false;get;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;getBigDecimal;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;getBigInteger;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;getBoolean;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;getDouble;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;getEnum;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;getFloat;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;getInt;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;getJSONArray;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;getJSONObject;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;getLong;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;getNumber;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;getString;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;iterator;;;Argument[-1];Element of ReturnValue;taintorg.json;JSONArray;false;join;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;join;;;Argument[0];ReturnValue;taintorg.json;JSONArray;false;opt;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;optBigDecimal;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;optBigDecimal;;;Argument[1];ReturnValue;valueorg.json;JSONArray;false;optBigInteger;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;optBigInteger;;;Argument[1];ReturnValue;valueorg.json;JSONArray;false;optBoolean;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;optBoolean;;;Argument[1];ReturnValue;valueorg.json;JSONArray;false;optDouble;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;optDouble;;;Argument[1];ReturnValue;valueorg.json;JSONArray;false;optEnum;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;optEnum;;;Argument[2];ReturnValue;valueorg.json;JSONArray;false;optFloat;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;optFloat;;;Argument[1];ReturnValue;valueorg.json;JSONArray;false;optInt;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;optInt;;;Argument[1];ReturnValue;valueorg.json;JSONArray;false;optJSONArray;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;optJSONObject;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;optLong;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;optLong;;;Argument[1];ReturnValue;valueorg.json;JSONArray;false;optNumber;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;optNumber;;;Argument[1];ReturnValue;valueorg.json;JSONArray;false;optQuery;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;optString;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;optString;;;Argument[1];ReturnValue;valueorg.json;JSONArray;false;put;(Collection);;Element of Argument[0];Argument[-1];taintorg.json;JSONArray;false;put;(Map);;MapKey of Argument[0];Argument[-1];taintorg.json;JSONArray;false;put;(Map);;MapValue of Argument[0];Argument[-1];taintorg.json;JSONArray;false;put;(Object);;Argument[0];Argument[-1];taintorg.json;JSONArray;false;put;(boolean);;Argument[0];Argument[-1];taintorg.json;JSONArray;false;put;(double);;Argument[0];Argument[-1];taintorg.json;JSONArray;false;put;(float);;Argument[0];Argument[-1];taintorg.json;JSONArray;false;put;(int);;Argument[0];Argument[-1];taintorg.json;JSONArray;false;put;(int,Collection);;Element of Argument[1];Argument[-1];taintorg.json;JSONArray;false;put;(int,Map);;MapKey of Argument[1];Argument[-1];taintorg.json;JSONArray;false;put;(int,Map);;MapValue of Argument[1];Argument[-1];taintorg.json;JSONArray;false;put;(int,Object);;Argument[1];Argument[-1];taintorg.json;JSONArray;false;put;(int,boolean);;Argument[1];Argument[-1];taintorg.json;JSONArray;false;put;(int,double);;Argument[1];Argument[-1];taintorg.json;JSONArray;false;put;(int,float);;Argument[1];Argument[-1];taintorg.json;JSONArray;false;put;(int,int);;Argument[1];Argument[-1];taintorg.json;JSONArray;false;put;(int,long);;Argument[1];Argument[-1];taintorg.json;JSONArray;false;put;(long);;Argument[0];Argument[-1];taintorg.json;JSONArray;false;put;;;Argument[-1];ReturnValue;valueorg.json;JSONArray;false;putAll;(Collection);;Element of Argument[0];Argument[-1];taintorg.json;JSONArray;false;putAll;(Iterable);;Element of Argument[0];Argument[-1];taintorg.json;JSONArray;false;putAll;(JSONArray);;Argument[0];Argument[-1];taintorg.json;JSONArray;false;putAll;(Object);;Argument[0];Argument[-1];taintorg.json;JSONArray;false;putAll;;;Argument[-1];ReturnValue;valueorg.json;JSONArray;false;query;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;remove;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;toJSONObject;;;Argument[-1];ReturnValue;taintorg.json;JSONArray;false;toJSONObject;;;Argument[0];ReturnValue;taintorg.json;JSONArray;false;toList;;;Argument[0];Element of ReturnValue;taintorg.json;JSONArray;false;toString;;;Argument[0];ReturnValue;taintorg.json;JSONArray;false;write;;;Argument[-1];Argument[0];taintorg.json;JSONArray;false;write;;;Argument[0];ReturnValue;valueorg.json;JSONML;false;toJSONArray;;;Argument[0];ReturnValue;taintorg.json;JSONML;false;toJSONObject;;;Argument[0];ReturnValue;taintorg.json;JSONML;false;toString;;;Argument[0];ReturnValue;taintorg.json;JSONObject;false;JSONObject;(JSONObject,String[]);;Argument[0];Argument[-1];taintorg.json;JSONObject;false;JSONObject;(JSONObject,String[]);;ArrayElement of Argument[1];Argument[-1];taintorg.json;JSONObject;false;JSONObject;(JSONTokener);;Argument[0];Argument[-1];taintorg.json;JSONObject;false;JSONObject;(Map);;MapKey of Argument[0];Argument[-1];taintorg.json;JSONObject;false;JSONObject;(Map);;MapValue of Argument[0];Argument[-1];taintorg.json;JSONObject;false;JSONObject;(Object);;Argument[0];Argument[-1];taintorg.json;JSONObject;false;JSONObject;(Object,String[]);;Argument[0];Argument[-1];taintorg.json;JSONObject;false;JSONObject;(Object,String[]);;ArrayElement of Argument[1];Argument[-1];taintorg.json;JSONObject;false;JSONObject;(String);;Argument[0];Argument[-1];taintorg.json;JSONObject;false;JSONObject;(String,Locale);;Argument[0];Argument[-1];taintorg.json;JSONObject;false;accumulate;;;Argument[-1];ReturnValue;valueorg.json;JSONObject;false;accumulate;;;Argument[0..1];Argument[-1];taintorg.json;JSONObject;false;append;;;Argument[-1];ReturnValue;valueorg.json;JSONObject;false;append;;;Argument[0..1];Argument[-1];taintorg.json;JSONObject;false;doubleToString;;;Argument[0];ReturnValue;taintorg.json;JSONObject;false;get;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;getBigDecimal;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;getBigInteger;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;getBoolean;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;getDouble;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;getEnum;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;getFloat;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;getInt;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;getJSONArray;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;getJSONObject;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;getLong;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;getNames;;;Argument[0];ArrayElement of ReturnValue;taintorg.json;JSONObject;false;getNumber;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;getString;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;increment;;;Argument[-1];ReturnValue;valueorg.json;JSONObject;false;increment;;;Argument[0];Argument[-1];taintorg.json;JSONObject;false;keySet;;;Argument[-1];Element of ReturnValue;taintorg.json;JSONObject;false;keys;;;Argument[-1];Element of ReturnValue;taintorg.json;JSONObject;false;names;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;numberToString;;;Argument[0];ReturnValue;taintorg.json;JSONObject;false;opt;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;optBigDecimal;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;optBigDecimal;;;Argument[1];ReturnValue;valueorg.json;JSONObject;false;optBigInteger;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;optBigInteger;;;Argument[1];ReturnValue;valueorg.json;JSONObject;false;optBoolean;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;optBoolean;;;Argument[1];ReturnValue;valueorg.json;JSONObject;false;optDouble;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;optDouble;;;Argument[1];ReturnValue;valueorg.json;JSONObject;false;optEnum;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;optEnum;;;Argument[2];ReturnValue;valueorg.json;JSONObject;false;optFloat;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;optFloat;;;Argument[1];ReturnValue;valueorg.json;JSONObject;false;optInt;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;optInt;;;Argument[1];ReturnValue;valueorg.json;JSONObject;false;optJSONArray;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;optJSONObject;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;optLong;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;optLong;;;Argument[1];ReturnValue;valueorg.json;JSONObject;false;optNumber;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;optNumber;;;Argument[1];ReturnValue;valueorg.json;JSONObject;false;optQuery;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;optString;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;optString;;;Argument[1];ReturnValue;valueorg.json;JSONObject;false;put;(String,Collection);;Argument[0];Argument[-1];taintorg.json;JSONObject;false;put;(String,Collection);;Element of Argument[1];Argument[-1];taintorg.json;JSONObject;false;put;(String,Map);;Argument[0];Argument[-1];taintorg.json;JSONObject;false;put;(String,Map);;MapKey of Argument[1];Argument[-1];taintorg.json;JSONObject;false;put;(String,Map);;MapValue of Argument[1];Argument[-1];taintorg.json;JSONObject;false;put;(String,Object);;Argument[0];Argument[-1];taintorg.json;JSONObject;false;put;(String,Object);;Argument[1];Argument[-1];taintorg.json;JSONObject;false;put;(String,boolean);;Argument[0];Argument[-1];taintorg.json;JSONObject;false;put;(String,boolean);;Argument[1];Argument[-1];taintorg.json;JSONObject;false;put;(String,double);;Argument[0];Argument[-1];taintorg.json;JSONObject;false;put;(String,double);;Argument[1];Argument[-1];taintorg.json;JSONObject;false;put;(String,float);;Argument[0];Argument[-1];taintorg.json;JSONObject;false;put;(String,float);;Argument[1];Argument[-1];taintorg.json;JSONObject;false;put;(String,int);;Argument[0];Argument[-1];taintorg.json;JSONObject;false;put;(String,int);;Argument[1];Argument[-1];taintorg.json;JSONObject;false;put;(String,long);;Argument[0];Argument[-1];taintorg.json;JSONObject;false;put;(String,long);;Argument[1];Argument[-1];taintorg.json;JSONObject;false;put;;;Argument[-1];ReturnValue;valueorg.json;JSONObject;false;putOnce;;;Argument[-1];ReturnValue;valueorg.json;JSONObject;false;putOnce;;;Argument[0..1];Argument[-1];taintorg.json;JSONObject;false;putOpt;;;Argument[-1];ReturnValue;valueorg.json;JSONObject;false;putOpt;;;Argument[0..1];Argument[-1];taintorg.json;JSONObject;false;query;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;quote;(String);;Argument[0];ReturnValue;taintorg.json;JSONObject;false;quote;(String,Writer);;Argument[0];Argument[1];taintorg.json;JSONObject;false;quote;(String,Writer);;Argument[1];ReturnValue;valueorg.json;JSONObject;false;remove;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;stringToValue;;;Argument[0];ReturnValue;taintorg.json;JSONObject;false;toJSONArray;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;toMap;;;Argument[-1];MapKey of ReturnValue;taintorg.json;JSONObject;false;toMap;;;Argument[-1];MapValue of ReturnValue;taintorg.json;JSONObject;false;toString;;;Argument[-1];ReturnValue;taintorg.json;JSONObject;false;valueToString;;;Argument[0];ReturnValue;taintorg.json;JSONObject;false;wrap;;;Argument[0];ReturnValue;taintorg.json;JSONObject;false;write;;;Argument[-1];Argument[0];taintorg.json;JSONObject;false;write;;;Argument[0];ReturnValue;valueorg.json;JSONObject;true;entrySet;;;Argument[-1];Element of ReturnValue;taintorg.json;JSONPointer$Builder;false;append;;;Argument[-1];ReturnValue;valueorg.json;JSONPointer$Builder;false;append;;;Argument[0];Argument[-1];taintorg.json;JSONPointer$Builder;false;build;;;Argument[-1];ReturnValue;taintorg.json;JSONPointer;false;JSONPointer;(List);;Element of Argument[0];Argument[-1];taintorg.json;JSONPointer;false;JSONPointer;(String);;Argument[0];Argument[-1];taintorg.json;JSONPointer;false;queryFrom;;;Argument[0];ReturnValue;taintorg.json;JSONPointer;false;toString;;;Argument[-1];ReturnValue;taintorg.json;JSONPointer;false;toURIFragment;;;Argument[-1];ReturnValue;taintorg.json;JSONString;true;toJSONString;;;Argument[-1];ReturnValue;taintorg.json;JSONStringer;false;toString;;;Argument[-1];ReturnValue;taintorg.json;JSONTokener;true;JSONTokener;;;Argument[0];Argument[-1];taintorg.json;JSONTokener;true;next;;;Argument[-1];ReturnValue;taintorg.json;JSONTokener;true;nextClean;;;Argument[-1];ReturnValue;taintorg.json;JSONTokener;true;nextString;;;Argument[-1];ReturnValue;taintorg.json;JSONTokener;true;nextTo;;;Argument[-1];ReturnValue;taintorg.json;JSONTokener;true;nextValue;;;Argument[-1];ReturnValue;taintorg.json;JSONTokener;true;syntaxError;;;Argument[0..1];ReturnValue;taintorg.json;JSONTokener;true;toString;;;Argument[-1];ReturnValue;taintorg.json;JSONWriter;true;JSONWriter;;;Argument[-1];Argument[0];taintorg.json;JSONWriter;true;array;;;Argument[-1];ReturnValue;valueorg.json;JSONWriter;true;endArray;;;Argument[-1];ReturnValue;valueorg.json;JSONWriter;true;endObject;;;Argument[-1];ReturnValue;valueorg.json;JSONWriter;true;key;;;Argument[-1];ReturnValue;valueorg.json;JSONWriter;true;key;;;Argument[0];Argument[-1];taintorg.json;JSONWriter;true;object;;;Argument[-1];ReturnValue;valueorg.json;JSONWriter;true;value;;;Argument[-1];ReturnValue;valueorg.json;JSONWriter;true;value;;;Argument[0];Argument[-1];taintorg.json;JSONWriter;true;valueToString;;;Argument[0];ReturnValue;taintorg.json;Property;false;toJSONObject;;;MapKey of Argument[0];ReturnValue;taintorg.json;Property;false;toJSONObject;;;MapValue of Argument[0];ReturnValue;taintorg.json;Property;false;toProperties;;;Argument[0];MapKey of ReturnValue;taintorg.json;Property;false;toProperties;;;Argument[0];MapValue of ReturnValue;taintorg.json;XML;false;escape;;;Argument[0];ReturnValue;taintorg.json;XML;false;stringToValue;;;Argument[0];ReturnValue;taintorg.json;XML;false;toJSONObject;;;Argument[0];ReturnValue;taintorg.json;XML;false;toString;;;Argument[0..1];ReturnValue;taintorg.json;XML;false;unescape;;;Argument[0];ReturnValue;taintorg.json;XMLTokener;false;XMLTokener;;;Argument[0];Argument[-1];taintorg.json;XMLTokener;false;nextCDATA;;;Argument[-1];ReturnValue;taintorg.json;XMLTokener;false;nextContent;;;Argument[-1];ReturnValue;taintorg.json;XMLTokener;false;nextEntity;;;Argument[-1];ReturnValue;taintorg.json;XMLTokener;false;nextMeta;;;Argument[-1];ReturnValue;taintorg.json;XMLTokener;false;nextToken;;;Argument[-1];ReturnValue;taintorg.json;XMLXsiTypeConverter;true;convert;;;Argument[0];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;StrBuilder;(java.lang.String);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(char[]);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(char[],int,int);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(java.lang.CharSequence);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(java.lang.CharSequence,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(java.lang.Object);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(java.lang.String);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(java.lang.String,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(java.lang.String,java.lang.Object[]);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(java.lang.String,java.lang.Object[]);;ArrayElement of Argument[1];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(java.lang.StringBuffer);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(java.lang.StringBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(java.lang.StringBuilder);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(java.lang.StringBuilder,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(java.nio.CharBuffer);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(java.nio.CharBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;(org.apache.commons.lang3.text.StrBuilder);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;append;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;appendAll;(Iterable);;Element of Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendAll;(Iterator);;Element of Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendAll;(Object[]);;ArrayElement of Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendAll;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;appendFixedWidthPadLeft;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;appendFixedWidthPadLeft;;;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendFixedWidthPadRight;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;appendFixedWidthPadRight;;;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendSeparator;(java.lang.String);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendSeparator;(java.lang.String,int);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendSeparator;(java.lang.String,java.lang.String);;Argument[0..1];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendSeparator;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;appendTo;;;Argument[-1];Argument[0];taintorg.apache.commons.lang3.text;StrBuilder;false;appendWithSeparators;(Iterable,String);;Element of Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendWithSeparators;(Iterator,String);;Element of Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendWithSeparators;(Object[],String);;ArrayElement of Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendWithSeparators;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;appendWithSeparators;;;Argument[1];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendln;(char[]);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendln;(char[],int,int);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendln;(java.lang.Object);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendln;(java.lang.String);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendln;(java.lang.String,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendln;(java.lang.String,java.lang.Object[]);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendln;(java.lang.String,java.lang.Object[]);;ArrayElement of Argument[1];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendln;(java.lang.StringBuffer);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendln;(java.lang.StringBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendln;(java.lang.StringBuilder);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendln;(java.lang.StringBuilder,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendln;(org.apache.commons.lang3.text.StrBuilder);;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;appendln;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;asReader;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;asTokenizer;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;build;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;getChars;(char[]);;Argument[-1];Argument[0];taintorg.apache.commons.lang3.text;StrBuilder;false;getChars;(char[]);;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;getChars;(int,int,char[],int);;Argument[-1];Argument[2];taintorg.apache.commons.lang3.text;StrBuilder;false;insert;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;insert;;;Argument[1];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;leftString;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;midString;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;readFrom;;;Argument[0];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;replace;(int,int,java.lang.String);;Argument[2];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;replace;(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int);;Argument[1];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;replace;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;replaceAll;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;replaceAll;;;Argument[1];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;replaceFirst;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;replaceFirst;;;Argument[1];Argument[-1];taintorg.apache.commons.lang3.text;StrBuilder;false;rightString;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;subSequence;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;substring;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;toCharArray;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;toString;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;toStringBuffer;;;Argument[-1];ReturnValue;taintorg.apache.commons.lang3.text;StrBuilder;false;toStringBuilder;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;StrBuilder;(java.lang.String);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(char[]);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(char[],int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(java.lang.CharSequence);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(java.lang.CharSequence,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(java.lang.Object);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(java.lang.String);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(java.lang.String,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(java.lang.String,java.lang.Object[]);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(java.lang.String,java.lang.Object[]);;ArrayElement of Argument[1];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(java.lang.StringBuffer);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(java.lang.StringBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(java.lang.StringBuilder);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(java.lang.StringBuilder,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(java.nio.CharBuffer);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(java.nio.CharBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;(org.apache.commons.text.StrBuilder);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;append;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;appendAll;(Iterable);;Element of Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendAll;(Iterator);;Element of Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendAll;(Object[]);;ArrayElement of Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendAll;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;appendFixedWidthPadLeft;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;appendFixedWidthPadLeft;;;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendFixedWidthPadRight;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;appendFixedWidthPadRight;;;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendSeparator;(java.lang.String);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendSeparator;(java.lang.String,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendSeparator;(java.lang.String,java.lang.String);;Argument[0..1];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendSeparator;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;appendTo;;;Argument[-1];Argument[0];taintorg.apache.commons.text;StrBuilder;false;appendWithSeparators;(Iterable,String);;Element of Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendWithSeparators;(Iterator,String);;Element of Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendWithSeparators;(Object[],String);;ArrayElement of Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendWithSeparators;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;appendWithSeparators;;;Argument[1];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendln;(char[]);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendln;(char[],int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendln;(java.lang.Object);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendln;(java.lang.String);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendln;(java.lang.String,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendln;(java.lang.String,java.lang.Object[]);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendln;(java.lang.String,java.lang.Object[]);;ArrayElement of Argument[1];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendln;(java.lang.StringBuffer);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendln;(java.lang.StringBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendln;(java.lang.StringBuilder);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendln;(java.lang.StringBuilder,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendln;(org.apache.commons.text.StrBuilder);;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;appendln;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;asReader;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;asTokenizer;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;build;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;getChars;(char[]);;Argument[-1];Argument[0];taintorg.apache.commons.text;StrBuilder;false;getChars;(char[]);;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;getChars;(int,int,char[],int);;Argument[-1];Argument[2];taintorg.apache.commons.text;StrBuilder;false;insert;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;insert;;;Argument[1];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;leftString;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;midString;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;readFrom;;;Argument[0];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;replace;(int,int,java.lang.String);;Argument[2];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;replace;(org.apache.commons.text.StrMatcher,java.lang.String,int,int,int);;Argument[1];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;replace;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;replaceAll;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;replaceAll;;;Argument[1];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;replaceFirst;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;replaceFirst;;;Argument[1];Argument[-1];taintorg.apache.commons.text;StrBuilder;false;rightString;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;subSequence;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;substring;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;toCharArray;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;toString;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;toStringBuffer;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;StrBuilder;false;toStringBuilder;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;TextStringBuilder;(java.lang.CharSequence);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;TextStringBuilder;(java.lang.String);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(char[]);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(char[],int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(java.lang.CharSequence);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(java.lang.CharSequence,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(java.lang.Object);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(java.lang.String);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(java.lang.String,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(java.lang.String,java.lang.Object[]);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(java.lang.String,java.lang.Object[]);;ArrayElement of Argument[1];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(java.lang.StringBuffer);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(java.lang.StringBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(java.lang.StringBuilder);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(java.lang.StringBuilder,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(java.nio.CharBuffer);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(java.nio.CharBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;(org.apache.commons.text.TextStringBuilder);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;append;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;appendAll;(Iterable);;Element of Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendAll;(Iterator);;Element of Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendAll;(Object[]);;ArrayElement of Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendAll;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;appendFixedWidthPadLeft;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;appendFixedWidthPadLeft;;;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendFixedWidthPadRight;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;appendFixedWidthPadRight;;;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendSeparator;(java.lang.String);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendSeparator;(java.lang.String,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendSeparator;(java.lang.String,java.lang.String);;Argument[0..1];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendSeparator;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;appendTo;;;Argument[-1];Argument[0];taintorg.apache.commons.text;TextStringBuilder;false;appendWithSeparators;(Iterable,String);;Element of Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendWithSeparators;(Iterator,String);;Element of Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendWithSeparators;(Object[],String);;ArrayElement of Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendWithSeparators;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;appendWithSeparators;;;Argument[1];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendln;(char[]);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendln;(char[],int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendln;(java.lang.Object);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendln;(java.lang.String);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendln;(java.lang.String,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendln;(java.lang.String,java.lang.Object[]);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendln;(java.lang.String,java.lang.Object[]);;ArrayElement of Argument[1];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendln;(java.lang.StringBuffer);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendln;(java.lang.StringBuffer,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendln;(java.lang.StringBuilder);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendln;(java.lang.StringBuilder,int,int);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendln;(org.apache.commons.text.TextStringBuilder);;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;appendln;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;asReader;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;asTokenizer;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;build;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;getChars;(char[]);;Argument[-1];Argument[0];taintorg.apache.commons.text;TextStringBuilder;false;getChars;(char[]);;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;getChars;(int,int,char[],int);;Argument[-1];Argument[2];taintorg.apache.commons.text;TextStringBuilder;false;insert;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;insert;;;Argument[1];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;leftString;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;midString;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;readFrom;;;Argument[0];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;replace;(int,int,java.lang.String);;Argument[2];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;replace;(org.apache.commons.text.matcher.StringMatcher,java.lang.String,int,int,int);;Argument[1];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;replace;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;replaceAll;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;replaceAll;;;Argument[1];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;replaceFirst;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;replaceFirst;;;Argument[1];Argument[-1];taintorg.apache.commons.text;TextStringBuilder;false;rightString;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;subSequence;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;substring;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;toCharArray;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;toString;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;toStringBuffer;;;Argument[-1];ReturnValue;taintorg.apache.commons.text;TextStringBuilder;false;toStringBuilder;;;Argument[-1];ReturnValue;taintjava.lang;Iterable;true;forEach;(Consumer);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.lang;Iterable;true;iterator;();;Element of Argument[-1];Element of ReturnValue;valuejava.lang;Iterable;true;spliterator;();;Element of Argument[-1];Element of ReturnValue;valuejava.lang;Object;true;clone;;;Element of Argument[-1];Element of ReturnValue;valuejava.lang;Object;true;clone;;;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.lang;Object;true;clone;;;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util.concurrent;BlockingDeque;true;offerFirst;(Object,long,TimeUnit);;Argument[0];Element of Argument[-1];valuejava.util.concurrent;BlockingDeque;true;offerLast;(Object,long,TimeUnit);;Argument[0];Element of Argument[-1];valuejava.util.concurrent;BlockingDeque;true;pollFirst;(long,TimeUnit);;Element of Argument[-1];ReturnValue;valuejava.util.concurrent;BlockingDeque;true;pollLast;(long,TimeUnit);;Element of Argument[-1];ReturnValue;valuejava.util.concurrent;BlockingDeque;true;putFirst;(Object);;Argument[0];Element of Argument[-1];valuejava.util.concurrent;BlockingDeque;true;putLast;(Object);;Argument[0];Element of Argument[-1];valuejava.util.concurrent;BlockingDeque;true;takeFirst;();;Element of Argument[-1];ReturnValue;valuejava.util.concurrent;BlockingDeque;true;takeLast;();;Element of Argument[-1];ReturnValue;valuejava.util.concurrent;BlockingQueue;true;drainTo;(Collection);;Element of Argument[-1];Element of Argument[0];valuejava.util.concurrent;BlockingQueue;true;drainTo;(Collection,int);;Element of Argument[-1];Element of Argument[0];valuejava.util.concurrent;BlockingQueue;true;offer;(Object,long,TimeUnit);;Argument[0];Element of Argument[-1];valuejava.util.concurrent;BlockingQueue;true;poll;(long,TimeUnit);;Element of Argument[-1];ReturnValue;valuejava.util.concurrent;BlockingQueue;true;put;(Object);;Argument[0];Element of Argument[-1];valuejava.util.concurrent;BlockingQueue;true;take;();;Element of Argument[-1];ReturnValue;valuejava.util.concurrent;ConcurrentHashMap;true;elements;();;MapValue of Argument[-1];Element of ReturnValue;valuejava.util.concurrent;TransferQueue;true;transfer;(Object);;Argument[0];Element of Argument[-1];valuejava.util.concurrent;TransferQueue;true;tryTransfer;(Object);;Argument[0];Element of Argument[-1];valuejava.util.concurrent;TransferQueue;true;tryTransfer;(Object,long,TimeUnit);;Argument[0];Element of Argument[-1];valuejava.util;AbstractMap$SimpleEntry;false;SimpleEntry;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];valuejava.util;AbstractMap$SimpleEntry;false;SimpleEntry;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];valuejava.util;AbstractMap$SimpleEntry;false;SimpleEntry;(Object,Object);;Argument[0];MapKey of Argument[-1];valuejava.util;AbstractMap$SimpleEntry;false;SimpleEntry;(Object,Object);;Argument[1];MapValue of Argument[-1];valuejava.util;AbstractMap$SimpleImmutableEntry;false;SimpleImmutableEntry;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];valuejava.util;AbstractMap$SimpleImmutableEntry;false;SimpleImmutableEntry;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];valuejava.util;AbstractMap$SimpleImmutableEntry;false;SimpleImmutableEntry;(Object,Object);;Argument[0];MapKey of Argument[-1];valuejava.util;AbstractMap$SimpleImmutableEntry;false;SimpleImmutableEntry;(Object,Object);;Argument[1];MapValue of Argument[-1];valuejava.util;ArrayDeque;false;ArrayDeque;(Collection);;Element of Argument[0];Element of Argument[-1];valuejava.util;ArrayList;false;ArrayList;(Collection);;Element of Argument[0];Element of Argument[-1];valuejava.util;Arrays;false;asList;;;ArrayElement of Argument[0];Element of ReturnValue;valuejava.util;Arrays;false;copyOf;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valuejava.util;Arrays;false;copyOfRange;;;ArrayElement of Argument[0];ArrayElement of ReturnValue;valuejava.util;Arrays;false;fill;(Object[],Object);;Argument[1];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(Object[],int,int,Object);;Argument[3];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(boolean[],boolean);;Argument[1];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(boolean[],int,int,boolean);;Argument[3];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(byte[],byte);;Argument[1];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(byte[],int,int,byte);;Argument[3];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(char[],char);;Argument[1];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(char[],int,int,char);;Argument[3];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(double[],double);;Argument[1];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(double[],int,int,double);;Argument[3];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(float[],float);;Argument[1];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(float[],int,int,float);;Argument[3];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(int[],int);;Argument[1];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(int[],int,int,int);;Argument[3];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(long[],int,int,long);;Argument[3];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(long[],long);;Argument[1];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(short[],int,int,short);;Argument[3];ArrayElement of Argument[0];valuejava.util;Arrays;false;fill;(short[],short);;Argument[1];ArrayElement of Argument[0];valuejava.util;Arrays;false;spliterator;;;ArrayElement of Argument[0];Element of ReturnValue;valuejava.util;Arrays;false;stream;;;ArrayElement of Argument[0];Element of ReturnValue;valuejava.util;Collection;true;add;;;Argument[0];Element of Argument[-1];valuejava.util;Collection;true;addAll;;;Element of Argument[0];Element of Argument[-1];valuejava.util;Collection;true;parallelStream;();;Element of Argument[-1];Element of ReturnValue;valuejava.util;Collection;true;stream;();;Element of Argument[-1];Element of ReturnValue;valuejava.util;Collection;true;toArray;;;Element of Argument[-1];ArrayElement of Argument[0];valuejava.util;Collection;true;toArray;;;Element of Argument[-1];ArrayElement of ReturnValue;valuejava.util;Collections;false;addAll;(Collection,Object[]);;ArrayElement of Argument[1];Element of Argument[0];valuejava.util;Collections;false;checkedCollection;(Collection,Class);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;checkedList;(List,Class);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;checkedMap;(Map,Class,Class);;MapKey of Argument[0];MapKey of ReturnValue;valuejava.util;Collections;false;checkedMap;(Map,Class,Class);;MapValue of Argument[0];MapValue of ReturnValue;valuejava.util;Collections;false;checkedNavigableMap;(NavigableMap,Class,Class);;MapKey of Argument[0];MapKey of ReturnValue;valuejava.util;Collections;false;checkedNavigableMap;(NavigableMap,Class,Class);;MapValue of Argument[0];MapValue of ReturnValue;valuejava.util;Collections;false;checkedNavigableSet;(NavigableSet,Class);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;checkedSet;(Set,Class);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;checkedSortedMap;(SortedMap,Class,Class);;MapKey of Argument[0];MapKey of ReturnValue;valuejava.util;Collections;false;checkedSortedMap;(SortedMap,Class,Class);;MapValue of Argument[0];MapValue of ReturnValue;valuejava.util;Collections;false;checkedSortedSet;(SortedSet,Class);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;copy;(List,List);;Element of Argument[1];Element of Argument[0];valuejava.util;Collections;false;enumeration;(Collection);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;fill;(List,Object);;Argument[1];Element of Argument[0];valuejava.util;Collections;false;list;(Enumeration);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;max;;;Element of Argument[0];ReturnValue;valuejava.util;Collections;false;min;;;Element of Argument[0];ReturnValue;valuejava.util;Collections;false;nCopies;(int,Object);;Argument[1];Element of ReturnValue;valuejava.util;Collections;false;replaceAll;(List,Object,Object);;Argument[2];Element of Argument[0];valuejava.util;Collections;false;singleton;(Object);;Argument[0];Element of ReturnValue;valuejava.util;Collections;false;singletonList;(Object);;Argument[0];Element of ReturnValue;valuejava.util;Collections;false;singletonMap;(Object,Object);;Argument[0];MapKey of ReturnValue;valuejava.util;Collections;false;singletonMap;(Object,Object);;Argument[1];MapValue of ReturnValue;valuejava.util;Collections;false;synchronizedCollection;(Collection);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;synchronizedList;(List);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;synchronizedMap;(Map);;MapKey of Argument[0];MapKey of ReturnValue;valuejava.util;Collections;false;synchronizedMap;(Map);;MapValue of Argument[0];MapValue of ReturnValue;valuejava.util;Collections;false;synchronizedNavigableMap;(NavigableMap);;MapKey of Argument[0];MapKey of ReturnValue;valuejava.util;Collections;false;synchronizedNavigableMap;(NavigableMap);;MapValue of Argument[0];MapValue of ReturnValue;valuejava.util;Collections;false;synchronizedNavigableSet;(NavigableSet);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;synchronizedSet;(Set);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;synchronizedSortedMap;(SortedMap);;MapKey of Argument[0];MapKey of ReturnValue;valuejava.util;Collections;false;synchronizedSortedMap;(SortedMap);;MapValue of Argument[0];MapValue of ReturnValue;valuejava.util;Collections;false;synchronizedSortedSet;(SortedSet);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;unmodifiableCollection;(Collection);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;unmodifiableList;(List);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;unmodifiableMap;(Map);;MapKey of Argument[0];MapKey of ReturnValue;valuejava.util;Collections;false;unmodifiableMap;(Map);;MapValue of Argument[0];MapValue of ReturnValue;valuejava.util;Collections;false;unmodifiableNavigableMap;(NavigableMap);;MapKey of Argument[0];MapKey of ReturnValue;valuejava.util;Collections;false;unmodifiableNavigableMap;(NavigableMap);;MapValue of Argument[0];MapValue of ReturnValue;valuejava.util;Collections;false;unmodifiableNavigableSet;(NavigableSet);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;unmodifiableSet;(Set);;Element of Argument[0];Element of ReturnValue;valuejava.util;Collections;false;unmodifiableSortedMap;(SortedMap);;MapKey of Argument[0];MapKey of ReturnValue;valuejava.util;Collections;false;unmodifiableSortedMap;(SortedMap);;MapValue of Argument[0];MapValue of ReturnValue;valuejava.util;Collections;false;unmodifiableSortedSet;(SortedSet);;Element of Argument[0];Element of ReturnValue;valuejava.util;Deque;true;addFirst;(Object);;Argument[0];Element of Argument[-1];valuejava.util;Deque;true;addLast;(Object);;Argument[0];Element of Argument[-1];valuejava.util;Deque;true;descendingIterator;();;Element of Argument[-1];Element of ReturnValue;valuejava.util;Deque;true;getFirst;();;Element of Argument[-1];ReturnValue;valuejava.util;Deque;true;getLast;();;Element of Argument[-1];ReturnValue;valuejava.util;Deque;true;offerFirst;(Object);;Argument[0];Element of Argument[-1];valuejava.util;Deque;true;offerLast;(Object);;Argument[0];Element of Argument[-1];valuejava.util;Deque;true;peekFirst;();;Element of Argument[-1];ReturnValue;valuejava.util;Deque;true;peekLast;();;Element of Argument[-1];ReturnValue;valuejava.util;Deque;true;pollFirst;();;Element of Argument[-1];ReturnValue;valuejava.util;Deque;true;pollLast;();;Element of Argument[-1];ReturnValue;valuejava.util;Deque;true;pop;();;Element of Argument[-1];ReturnValue;valuejava.util;Deque;true;push;(Object);;Argument[0];Element of Argument[-1];valuejava.util;Deque;true;removeFirst;();;Element of Argument[-1];ReturnValue;valuejava.util;Deque;true;removeLast;();;Element of Argument[-1];ReturnValue;valuejava.util;Dictionary;true;elements;();;MapValue of Argument[-1];Element of ReturnValue;valuejava.util;Dictionary;true;get;(Object);;MapValue of Argument[-1];ReturnValue;valuejava.util;Dictionary;true;keys;();;MapKey of Argument[-1];Element of ReturnValue;valuejava.util;Dictionary;true;put;(Object,Object);;Argument[0];MapKey of Argument[-1];valuejava.util;Dictionary;true;put;(Object,Object);;Argument[1];MapValue of Argument[-1];valuejava.util;Dictionary;true;put;(Object,Object);;MapValue of Argument[-1];ReturnValue;valuejava.util;Dictionary;true;remove;(Object);;MapValue of Argument[-1];ReturnValue;valuejava.util;EnumMap;false;EnumMap;(EnumMap);;MapKey of Argument[0];MapKey of Argument[-1];valuejava.util;EnumMap;false;EnumMap;(EnumMap);;MapValue of Argument[0];MapValue of Argument[-1];valuejava.util;EnumMap;false;EnumMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valuejava.util;EnumMap;false;EnumMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valuejava.util;Enumeration;true;asIterator;;;Element of Argument[-1];Element of ReturnValue;valuejava.util;Enumeration;true;nextElement;;;Element of Argument[-1];ReturnValue;valuejava.util;HashMap;false;HashMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valuejava.util;HashMap;false;HashMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valuejava.util;HashSet;false;HashSet;(Collection);;Element of Argument[0];Element of Argument[-1];valuejava.util;Hashtable;false;Hashtable;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valuejava.util;Hashtable;false;Hashtable;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valuejava.util;IdentityHashMap;false;IdentityHashMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valuejava.util;IdentityHashMap;false;IdentityHashMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valuejava.util;Iterator;true;forEachRemaining;(Consumer);;Element of Argument[-1];Parameter[0] of Argument[0];valuejava.util;Iterator;true;next;;;Element of Argument[-1];ReturnValue;valuejava.util;LinkedHashMap;false;LinkedHashMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valuejava.util;LinkedHashMap;false;LinkedHashMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valuejava.util;LinkedHashSet;false;LinkedHashSet;(Collection);;Element of Argument[0];Element of Argument[-1];valuejava.util;LinkedList;false;LinkedList;(Collection);;Element of Argument[0];Element of Argument[-1];valuejava.util;List;false;copyOf;(Collection);;Element of Argument[0];Element of ReturnValue;valuejava.util;List;false;of;(Object);;Argument[0];Element of ReturnValue;valuejava.util;List;false;of;(Object,Object);;Argument[0..1];Element of ReturnValue;valuejava.util;List;false;of;(Object,Object,Object);;Argument[0..2];Element of ReturnValue;valuejava.util;List;false;of;(Object,Object,Object,Object);;Argument[0..3];Element of ReturnValue;valuejava.util;List;false;of;(Object,Object,Object,Object,Object);;Argument[0..4];Element of ReturnValue;valuejava.util;List;false;of;(Object,Object,Object,Object,Object,Object);;Argument[0..5];Element of ReturnValue;valuejava.util;List;false;of;(Object,Object,Object,Object,Object,Object,Object);;Argument[0..6];Element of ReturnValue;valuejava.util;List;false;of;(Object,Object,Object,Object,Object,Object,Object,Object);;Argument[0..7];Element of ReturnValue;valuejava.util;List;false;of;(Object,Object,Object,Object,Object,Object,Object,Object,Object);;Argument[0..8];Element of ReturnValue;valuejava.util;List;false;of;(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object);;Argument[0..9];Element of ReturnValue;valuejava.util;List;false;of;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valuejava.util;List;true;add;(int,Object);;Argument[1];Element of Argument[-1];valuejava.util;List;true;addAll;(int,Collection);;Element of Argument[1];Element of Argument[-1];valuejava.util;List;true;get;(int);;Element of Argument[-1];ReturnValue;valuejava.util;List;true;listIterator;;;Element of Argument[-1];Element of ReturnValue;valuejava.util;List;true;remove;(int);;Element of Argument[-1];ReturnValue;valuejava.util;List;true;set;(int,Object);;Argument[1];Element of Argument[-1];valuejava.util;List;true;set;(int,Object);;Element of Argument[-1];ReturnValue;valuejava.util;List;true;subList;;;Element of Argument[-1];Element of ReturnValue;valuejava.util;ListIterator;true;add;(Object);;Argument[0];Element of Argument[-1];valuejava.util;ListIterator;true;previous;;;Element of Argument[-1];ReturnValue;valuejava.util;ListIterator;true;set;(Object);;Argument[0];Element of Argument[-1];valuejava.util;Map$Entry;true;getKey;;;MapKey of Argument[-1];ReturnValue;valuejava.util;Map$Entry;true;getValue;;;MapValue of Argument[-1];ReturnValue;valuejava.util;Map$Entry;true;setValue;;;Argument[0];MapValue of Argument[-1];valuejava.util;Map$Entry;true;setValue;;;MapValue of Argument[-1];ReturnValue;valuejava.util;Map;false;copyOf;(Map);;MapKey of Argument[0];MapKey of ReturnValue;valuejava.util;Map;false;copyOf;(Map);;MapValue of Argument[0];MapValue of ReturnValue;valuejava.util;Map;false;entry;(Object,Object);;Argument[0];MapKey of ReturnValue;valuejava.util;Map;false;entry;(Object,Object);;Argument[1];MapValue of ReturnValue;valuejava.util;Map;false;of;;;Argument[0];MapKey of ReturnValue;valuejava.util;Map;false;of;;;Argument[10];MapKey of ReturnValue;valuejava.util;Map;false;of;;;Argument[11];MapValue of ReturnValue;valuejava.util;Map;false;of;;;Argument[12];MapKey of ReturnValue;valuejava.util;Map;false;of;;;Argument[13];MapValue of ReturnValue;valuejava.util;Map;false;of;;;Argument[14];MapKey of ReturnValue;valuejava.util;Map;false;of;;;Argument[15];MapValue of ReturnValue;valuejava.util;Map;false;of;;;Argument[16];MapKey of ReturnValue;valuejava.util;Map;false;of;;;Argument[17];MapValue of ReturnValue;valuejava.util;Map;false;of;;;Argument[18];MapKey of ReturnValue;valuejava.util;Map;false;of;;;Argument[19];MapValue of ReturnValue;valuejava.util;Map;false;of;;;Argument[1];MapValue of ReturnValue;valuejava.util;Map;false;of;;;Argument[2];MapKey of ReturnValue;valuejava.util;Map;false;of;;;Argument[3];MapValue of ReturnValue;valuejava.util;Map;false;of;;;Argument[4];MapKey of ReturnValue;valuejava.util;Map;false;of;;;Argument[5];MapValue of ReturnValue;valuejava.util;Map;false;of;;;Argument[6];MapKey of ReturnValue;valuejava.util;Map;false;of;;;Argument[7];MapValue of ReturnValue;valuejava.util;Map;false;of;;;Argument[8];MapKey of ReturnValue;valuejava.util;Map;false;of;;;Argument[9];MapValue of ReturnValue;valuejava.util;Map;false;ofEntries;;;MapKey of ArrayElement of Argument[0];MapKey of ReturnValue;valuejava.util;Map;false;ofEntries;;;MapValue of ArrayElement of Argument[0];MapValue of ReturnValue;valuejava.util;Map;true;computeIfAbsent;;;MapValue of Argument[-1];ReturnValue;valuejava.util;Map;true;computeIfAbsent;;;ReturnValue of Argument[1];MapValue of Argument[-1];valuejava.util;Map;true;computeIfAbsent;;;ReturnValue of Argument[1];ReturnValue;valuejava.util;Map;true;entrySet;;;MapKey of Argument[-1];MapKey of Element of ReturnValue;valuejava.util;Map;true;entrySet;;;MapValue of Argument[-1];MapValue of Element of ReturnValue;valuejava.util;Map;true;forEach;(BiConsumer);;MapKey of Argument[-1];Parameter[0] of Argument[0];valuejava.util;Map;true;forEach;(BiConsumer);;MapValue of Argument[-1];Parameter[1] of Argument[0];valuejava.util;Map;true;get;;;MapValue of Argument[-1];ReturnValue;valuejava.util;Map;true;getOrDefault;;;Argument[1];ReturnValue;valuejava.util;Map;true;getOrDefault;;;MapValue of Argument[-1];ReturnValue;valuejava.util;Map;true;keySet;();;MapKey of Argument[-1];Element of ReturnValue;valuejava.util;Map;true;merge;(Object,Object,BiFunction);;Argument[1];MapValue of Argument[-1];valuejava.util;Map;true;put;(Object,Object);;Argument[0];MapKey of Argument[-1];valuejava.util;Map;true;put;(Object,Object);;Argument[1];MapValue of Argument[-1];valuejava.util;Map;true;put;(Object,Object);;MapValue of Argument[-1];ReturnValue;valuejava.util;Map;true;putAll;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valuejava.util;Map;true;putAll;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valuejava.util;Map;true;putIfAbsent;;;Argument[0];MapKey of Argument[-1];valuejava.util;Map;true;putIfAbsent;;;Argument[1];MapValue of Argument[-1];valuejava.util;Map;true;putIfAbsent;;;MapValue of Argument[-1];ReturnValue;valuejava.util;Map;true;remove;(Object);;MapValue of Argument[-1];ReturnValue;valuejava.util;Map;true;replace;(Object,Object);;Argument[0];MapKey of Argument[-1];valuejava.util;Map;true;replace;(Object,Object);;Argument[1];MapValue of Argument[-1];valuejava.util;Map;true;replace;(Object,Object);;MapValue of Argument[-1];ReturnValue;valuejava.util;Map;true;replace;(Object,Object,Object);;Argument[0];MapKey of Argument[-1];valuejava.util;Map;true;replace;(Object,Object,Object);;Argument[2];MapValue of Argument[-1];valuejava.util;Map;true;values;();;MapValue of Argument[-1];Element of ReturnValue;valuejava.util;NavigableMap;true;ceilingEntry;(Object);;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;NavigableMap;true;ceilingEntry;(Object);;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;NavigableMap;true;descendingMap;();;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;NavigableMap;true;descendingMap;();;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;NavigableMap;true;firstEntry;();;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;NavigableMap;true;firstEntry;();;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;NavigableMap;true;floorEntry;(Object);;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;NavigableMap;true;floorEntry;(Object);;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;NavigableMap;true;headMap;(Object,boolean);;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;NavigableMap;true;headMap;(Object,boolean);;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;NavigableMap;true;higherEntry;(Object);;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;NavigableMap;true;higherEntry;(Object);;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;NavigableMap;true;lastEntry;();;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;NavigableMap;true;lastEntry;();;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;NavigableMap;true;lowerEntry;(Object);;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;NavigableMap;true;lowerEntry;(Object);;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;NavigableMap;true;pollFirstEntry;();;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;NavigableMap;true;pollFirstEntry;();;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;NavigableMap;true;pollLastEntry;();;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;NavigableMap;true;pollLastEntry;();;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;NavigableMap;true;subMap;(Object,boolean,Object,boolean);;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;NavigableMap;true;subMap;(Object,boolean,Object,boolean);;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;NavigableMap;true;tailMap;(Object,boolean);;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;NavigableMap;true;tailMap;(Object,boolean);;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;NavigableSet;true;ceiling;(Object);;Element of Argument[-1];ReturnValue;valuejava.util;NavigableSet;true;descendingIterator;();;Element of Argument[-1];Element of ReturnValue;valuejava.util;NavigableSet;true;descendingSet;();;Element of Argument[-1];Element of ReturnValue;valuejava.util;NavigableSet;true;floor;(Object);;Element of Argument[-1];ReturnValue;valuejava.util;NavigableSet;true;headSet;(Object,boolean);;Element of Argument[-1];Element of ReturnValue;valuejava.util;NavigableSet;true;higher;(Object);;Element of Argument[-1];ReturnValue;valuejava.util;NavigableSet;true;lower;(Object);;Element of Argument[-1];ReturnValue;valuejava.util;NavigableSet;true;pollFirst;();;Element of Argument[-1];ReturnValue;valuejava.util;NavigableSet;true;pollLast;();;Element of Argument[-1];ReturnValue;valuejava.util;NavigableSet;true;subSet;(Object,boolean,Object,boolean);;Element of Argument[-1];Element of ReturnValue;valuejava.util;NavigableSet;true;tailSet;(Object,boolean);;Element of Argument[-1];Element of ReturnValue;valuejava.util;PriorityQueue;false;PriorityQueue;(Collection);;Element of Argument[0];Element of Argument[-1];valuejava.util;PriorityQueue;false;PriorityQueue;(PriorityQueue);;Element of Argument[0];Element of Argument[-1];valuejava.util;PriorityQueue;false;PriorityQueue;(SortedSet);;Element of Argument[0];Element of Argument[-1];valuejava.util;Queue;true;element;();;Element of Argument[-1];ReturnValue;valuejava.util;Queue;true;offer;(Object);;Argument[0];Element of Argument[-1];valuejava.util;Queue;true;peek;();;Element of Argument[-1];ReturnValue;valuejava.util;Queue;true;poll;();;Element of Argument[-1];ReturnValue;valuejava.util;Queue;true;remove;();;Element of Argument[-1];ReturnValue;valuejava.util;Scanner;true;next;(Pattern);;Argument[-1];ReturnValue;taintjava.util;Scanner;true;next;(String);;Argument[-1];ReturnValue;taintjava.util;Set;false;copyOf;(Collection);;Element of Argument[0];Element of ReturnValue;valuejava.util;Set;false;of;(Object);;Argument[0];Element of ReturnValue;valuejava.util;Set;false;of;(Object,Object);;Argument[0..1];Element of ReturnValue;valuejava.util;Set;false;of;(Object,Object,Object);;Argument[0..2];Element of ReturnValue;valuejava.util;Set;false;of;(Object,Object,Object,Object);;Argument[0..3];Element of ReturnValue;valuejava.util;Set;false;of;(Object,Object,Object,Object,Object);;Argument[0..4];Element of ReturnValue;valuejava.util;Set;false;of;(Object,Object,Object,Object,Object,Object);;Argument[0..5];Element of ReturnValue;valuejava.util;Set;false;of;(Object,Object,Object,Object,Object,Object,Object);;Argument[0..6];Element of ReturnValue;valuejava.util;Set;false;of;(Object,Object,Object,Object,Object,Object,Object,Object);;Argument[0..7];Element of ReturnValue;valuejava.util;Set;false;of;(Object,Object,Object,Object,Object,Object,Object,Object,Object);;Argument[0..8];Element of ReturnValue;valuejava.util;Set;false;of;(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object);;Argument[0..9];Element of ReturnValue;valuejava.util;Set;false;of;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valuejava.util;SortedMap;true;headMap;(Object);;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;SortedMap;true;headMap;(Object);;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;SortedMap;true;subMap;(Object,Object);;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;SortedMap;true;subMap;(Object,Object);;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;SortedMap;true;tailMap;(Object);;MapKey of Argument[-1];MapKey of ReturnValue;valuejava.util;SortedMap;true;tailMap;(Object);;MapValue of Argument[-1];MapValue of ReturnValue;valuejava.util;SortedSet;true;first;();;Element of Argument[-1];ReturnValue;valuejava.util;SortedSet;true;headSet;(Object);;Element of Argument[-1];Element of ReturnValue;valuejava.util;SortedSet;true;last;();;Element of Argument[-1];ReturnValue;valuejava.util;SortedSet;true;subSet;(Object,Object);;Element of Argument[-1];Element of ReturnValue;valuejava.util;SortedSet;true;tailSet;(Object);;Element of Argument[-1];Element of ReturnValue;valuejava.util;Stack;true;peek;();;Element of Argument[-1];ReturnValue;valuejava.util;Stack;true;pop;();;Element of Argument[-1];ReturnValue;valuejava.util;Stack;true;push;(Object);;Argument[0];Element of Argument[-1];valuejava.util;TreeMap;false;TreeMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valuejava.util;TreeMap;false;TreeMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valuejava.util;TreeMap;false;TreeMap;(SortedMap);;MapKey of Argument[0];MapKey of Argument[-1];valuejava.util;TreeMap;false;TreeMap;(SortedMap);;MapValue of Argument[0];MapValue of Argument[-1];valuejava.util;TreeSet;false;TreeSet;(Collection);;Element of Argument[0];Element of Argument[-1];valuejava.util;TreeSet;false;TreeSet;(SortedSet);;Element of Argument[0];Element of Argument[-1];valuejava.util;Vector;false;Vector;(Collection);;Element of Argument[0];Element of Argument[-1];valuejava.util;Vector;true;addElement;(Object);;Argument[0];Element of Argument[-1];valuejava.util;Vector;true;copyInto;(Object[]);;Element of Argument[-1];ArrayElement of Argument[0];valuejava.util;Vector;true;elementAt;(int);;Element of Argument[-1];ReturnValue;valuejava.util;Vector;true;elements;();;Element of Argument[-1];Element of ReturnValue;valuejava.util;Vector;true;firstElement;();;Element of Argument[-1];ReturnValue;valuejava.util;Vector;true;insertElementAt;(Object,int);;Argument[0];Element of Argument[-1];valuejava.util;Vector;true;lastElement;();;Element of Argument[-1];ReturnValue;valuejava.util;Vector;true;setElementAt;(Object,int);;Argument[0];Element of Argument[-1];valuejava.util;WeakHashMap;false;WeakHashMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valuejava.util;WeakHashMap;false;WeakHashMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valuecom.google.common.collect;ArrayListMultimap;true;create;(Multimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ArrayListMultimap;true;create;(Multimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;ArrayTable;true;create;(Iterable,Iterable);;Element of Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValue;valuecom.google.common.collect;ArrayTable;true;create;(Iterable,Iterable);;Element of Argument[1];SyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue;valuecom.google.common.collect;ArrayTable;true;create;(Table);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;ArrayTable;true;create;(Table);;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[0];SyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue;valuecom.google.common.collect;ArrayTable;true;create;(Table);;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValue;valuecom.google.common.collect;BiMap;true;forcePut;(Object,Object);;Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;BiMap;true;forcePut;(Object,Object);;Argument[1];MapValue of Argument[-1];valuecom.google.common.collect;BiMap;true;inverse;();;MapKey of Argument[-1];MapValue of ReturnValue;valuecom.google.common.collect;BiMap;true;inverse;();;MapValue of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;ClassToInstanceMap;true;getInstance;(Class);;MapValue of Argument[-1];ReturnValue;valuecom.google.common.collect;ClassToInstanceMap;true;putInstance;(Class,Object);;Argument[1];MapValue of Argument[-1];valuecom.google.common.collect;ClassToInstanceMap;true;putInstance;(Class,Object);;MapValue of Argument[-1];ReturnValue;valuecom.google.common.collect;Collections2;false;filter;(Collection,Predicate);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Collections2;false;orderedPermutations;(Iterable);;Element of Argument[0];Element of Element of ReturnValue;valuecom.google.common.collect;Collections2;false;orderedPermutations;(Iterable,Comparator);;Element of Argument[0];Element of Element of ReturnValue;valuecom.google.common.collect;Collections2;false;permutations;(Collection);;Element of Argument[0];Element of Element of ReturnValue;valuecom.google.common.collect;ConcurrentHashMultiset;true;create;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;HashBasedTable;true;create;(Table);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;HashBasedTable;true;create;(Table);;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[0];SyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue;valuecom.google.common.collect;HashBasedTable;true;create;(Table);;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValue;valuecom.google.common.collect;HashBiMap;true;create;(Map);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;HashBiMap;true;create;(Map);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;HashMultimap;true;create;(Multimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;HashMultimap;true;create;(Multimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;HashMultiset;true;create;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableBiMap;true;of;;;Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableBiMap;true;of;;;Argument[1];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableBiMap;true;of;;;Argument[2];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableBiMap;true;of;;;Argument[3];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableBiMap;true;of;;;Argument[4];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableBiMap;true;of;;;Argument[5];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableBiMap;true;of;;;Argument[6];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableBiMap;true;of;;;Argument[7];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableBiMap;true;of;;;Argument[8];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableBiMap;true;of;;;Argument[9];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableClassToInstanceMap;true;copyOf;(Map);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableClassToInstanceMap;true;copyOf;(Map);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableClassToInstanceMap;true;of;(Class,Object);;Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableClassToInstanceMap;true;of;(Class,Object);;Argument[1];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableCollection$Builder;true;add;(Object);;Argument[0];Element of Argument[-1];valuecom.google.common.collect;ImmutableCollection$Builder;true;add;(Object[]);;ArrayElement of Argument[0];Element of Argument[-1];valuecom.google.common.collect;ImmutableCollection$Builder;true;add;;;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableCollection$Builder;true;addAll;(Iterable);;Element of Argument[0];Element of Argument[-1];valuecom.google.common.collect;ImmutableCollection$Builder;true;addAll;(Iterator);;Element of Argument[0];Element of Argument[-1];valuecom.google.common.collect;ImmutableCollection$Builder;true;addAll;;;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableCollection$Builder;true;build;();;Element of Argument[-1];Element of ReturnValue;valuecom.google.common.collect;ImmutableCollection;true;asList;();;Element of Argument[-1];Element of ReturnValue;valuecom.google.common.collect;ImmutableList;true;copyOf;(Collection);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableList;true;copyOf;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableList;true;copyOf;(Iterator);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableList;true;copyOf;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableList;true;of;;;Argument[0..11];Element of ReturnValue;valuecom.google.common.collect;ImmutableList;true;of;;;ArrayElement of Argument[12];Element of ReturnValue;valuecom.google.common.collect;ImmutableList;true;reverse;();;Element of Argument[-1];Element of ReturnValue;valuecom.google.common.collect;ImmutableList;true;sortedCopyOf;(Comparator,Iterable);;Element of Argument[1];Element of ReturnValue;valuecom.google.common.collect;ImmutableList;true;sortedCopyOf;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableListMultimap;true;of;;;Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableListMultimap;true;of;;;Argument[1];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableListMultimap;true;of;;;Argument[2];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableListMultimap;true;of;;;Argument[3];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableListMultimap;true;of;;;Argument[4];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableListMultimap;true;of;;;Argument[5];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableListMultimap;true;of;;;Argument[6];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableListMultimap;true;of;;;Argument[7];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableListMultimap;true;of;;;Argument[8];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableListMultimap;true;of;;;Argument[9];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMap$Builder;true;build;();;MapKey of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMap$Builder;true;build;();;MapValue of Argument[-1];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMap$Builder;true;orderEntriesByValue;(Comparator);;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableMap$Builder;true;put;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;ImmutableMap$Builder;true;put;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];valuecom.google.common.collect;ImmutableMap$Builder;true;put;(Object,Object);;Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;ImmutableMap$Builder;true;put;(Object,Object);;Argument[1];MapValue of Argument[-1];valuecom.google.common.collect;ImmutableMap$Builder;true;put;;;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableMap$Builder;true;putAll;(Iterable);;MapKey of Element of Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;ImmutableMap$Builder;true;putAll;(Iterable);;MapValue of Element of Argument[0];MapValue of Argument[-1];valuecom.google.common.collect;ImmutableMap$Builder;true;putAll;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;ImmutableMap$Builder;true;putAll;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valuecom.google.common.collect;ImmutableMap$Builder;true;putAll;;;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableMap;true;copyOf;(Iterable);;MapKey of Element of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMap;true;copyOf;(Iterable);;MapValue of Element of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMap;true;copyOf;(Map);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMap;true;copyOf;(Map);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMap;true;of;;;Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMap;true;of;;;Argument[1];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMap;true;of;;;Argument[2];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMap;true;of;;;Argument[3];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMap;true;of;;;Argument[4];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMap;true;of;;;Argument[5];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMap;true;of;;;Argument[6];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMap;true;of;;;Argument[7];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMap;true;of;;;Argument[8];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMap;true;of;;;Argument[9];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMultimap$Builder;true;build;();;MapKey of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMultimap$Builder;true;build;();;MapValue of Argument[-1];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMultimap$Builder;true;orderKeysBy;(Comparator);;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableMultimap$Builder;true;orderValuesBy;(Comparator);;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableMultimap$Builder;true;put;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;ImmutableMultimap$Builder;true;put;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];valuecom.google.common.collect;ImmutableMultimap$Builder;true;put;(Object,Object);;Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;ImmutableMultimap$Builder;true;put;(Object,Object);;Argument[1];MapValue of Argument[-1];valuecom.google.common.collect;ImmutableMultimap$Builder;true;put;;;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableMultimap$Builder;true;putAll;(Iterable);;MapKey of Element of Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;ImmutableMultimap$Builder;true;putAll;(Iterable);;MapValue of Element of Argument[0];MapValue of Argument[-1];valuecom.google.common.collect;ImmutableMultimap$Builder;true;putAll;(Multimap);;MapKey of Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;ImmutableMultimap$Builder;true;putAll;(Multimap);;MapValue of Argument[0];MapValue of Argument[-1];valuecom.google.common.collect;ImmutableMultimap$Builder;true;putAll;(Object,Iterable);;Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;ImmutableMultimap$Builder;true;putAll;(Object,Iterable);;Element of Argument[1];MapValue of Argument[-1];valuecom.google.common.collect;ImmutableMultimap$Builder;true;putAll;(Object,Object[]);;Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;ImmutableMultimap$Builder;true;putAll;(Object,Object[]);;ArrayElement of Argument[1];MapValue of Argument[-1];valuecom.google.common.collect;ImmutableMultimap$Builder;true;putAll;;;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;copyOf;(Iterable);;MapKey of Element of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;copyOf;(Iterable);;MapValue of Element of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;copyOf;(Multimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;copyOf;(Multimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;inverse;();;MapKey of Argument[-1];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;inverse;();;MapValue of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;of;;;Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;of;;;Argument[1];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;of;;;Argument[2];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;of;;;Argument[3];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;of;;;Argument[4];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;of;;;Argument[5];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;of;;;Argument[6];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;of;;;Argument[7];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;of;;;Argument[8];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableMultimap;true;of;;;Argument[9];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableMultiset$Builder;true;addCopies;(Object,int);;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableMultiset$Builder;true;addCopies;(Object,int);;Argument[0];Element of Argument[-1];valuecom.google.common.collect;ImmutableMultiset$Builder;true;setCount;(Object,int);;Argument[0];Element of Argument[-1];valuecom.google.common.collect;ImmutableMultiset;true;copyOf;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableMultiset;true;copyOf;(Iterator);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableMultiset;true;copyOf;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableMultiset;true;of;;;Argument[0..5];Element of ReturnValue;valuecom.google.common.collect;ImmutableMultiset;true;of;;;ArrayElement of Argument[6];Element of ReturnValue;valuecom.google.common.collect;ImmutableSet;true;copyOf;(Collection);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableSet;true;copyOf;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableSet;true;copyOf;(Iterator);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableSet;true;copyOf;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableSet;true;of;;;Argument[0..5];Element of ReturnValue;valuecom.google.common.collect;ImmutableSet;true;of;;;ArrayElement of Argument[6];Element of ReturnValue;valuecom.google.common.collect;ImmutableSetMultimap;true;of;;;Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSetMultimap;true;of;;;Argument[1];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSetMultimap;true;of;;;Argument[2];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSetMultimap;true;of;;;Argument[3];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSetMultimap;true;of;;;Argument[4];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSetMultimap;true;of;;;Argument[5];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSetMultimap;true;of;;;Argument[6];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSetMultimap;true;of;;;Argument[7];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSetMultimap;true;of;;;Argument[8];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSetMultimap;true;of;;;Argument[9];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;copyOf;(Iterable);;MapKey of Element of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;copyOf;(Iterable);;MapValue of Element of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;copyOf;(Iterable,Comparator);;MapKey of Element of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;copyOf;(Iterable,Comparator);;MapValue of Element of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;copyOf;(Map);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;copyOf;(Map);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;copyOf;(Map,Comparator);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;copyOf;(Map,Comparator);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;copyOfSorted;(SortedMap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;copyOfSorted;(SortedMap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;of;;;Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;of;;;Argument[1];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;of;;;Argument[2];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;of;;;Argument[3];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;of;;;Argument[4];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;of;;;Argument[5];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;of;;;Argument[6];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;of;;;Argument[7];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;of;;;Argument[8];MapKey of ReturnValue;valuecom.google.common.collect;ImmutableSortedMap;true;of;;;Argument[9];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableSortedMultiset;true;copyOf;(Comparable[]);;ArrayElement of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedMultiset;true;copyOf;(Comparator,Iterable);;Element of Argument[1];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedMultiset;true;copyOf;(Comparator,Iterator);;Element of Argument[1];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedMultiset;true;copyOf;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedMultiset;true;copyOf;(Iterator);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedMultiset;true;copyOfSorted;(SortedMultiset);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedMultiset;true;of;;;Argument[0..5];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedMultiset;true;of;;;ArrayElement of Argument[6];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedSet;true;copyOf;(Collection);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedSet;true;copyOf;(Comparable[]);;ArrayElement of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedSet;true;copyOf;(Comparator,Collection);;Element of Argument[1];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedSet;true;copyOf;(Comparator,Iterable);;Element of Argument[1];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedSet;true;copyOf;(Comparator,Iterator);;Element of Argument[1];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedSet;true;copyOf;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedSet;true;copyOf;(Iterator);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedSet;true;copyOfSorted;(SortedSet);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedSet;true;of;;;Argument[0..5];Element of ReturnValue;valuecom.google.common.collect;ImmutableSortedSet;true;of;;;ArrayElement of Argument[6];Element of ReturnValue;valuecom.google.common.collect;ImmutableTable$Builder;true;build;();;MapValue of Argument[-1];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableTable$Builder;true;build;();;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[-1];SyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue;valuecom.google.common.collect;ImmutableTable$Builder;true;build;();;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[-1];SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValue;valuecom.google.common.collect;ImmutableTable$Builder;true;orderColumnsBy;(Comparator);;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableTable$Builder;true;orderRowsBy;(Comparator);;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableTable$Builder;true;put;(Cell);;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableTable$Builder;true;put;(Cell);;MapValue of Argument[0];MapValue of Argument[-1];valuecom.google.common.collect;ImmutableTable$Builder;true;put;(Cell);;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[0];SyntheticField[com.google.common.collect.Table.columnKey] of Argument[-1];valuecom.google.common.collect;ImmutableTable$Builder;true;put;(Cell);;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of Argument[-1];valuecom.google.common.collect;ImmutableTable$Builder;true;put;(Object,Object,Object);;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableTable$Builder;true;put;(Object,Object,Object);;Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of Argument[-1];valuecom.google.common.collect;ImmutableTable$Builder;true;put;(Object,Object,Object);;Argument[1];SyntheticField[com.google.common.collect.Table.columnKey] of Argument[-1];valuecom.google.common.collect;ImmutableTable$Builder;true;put;(Object,Object,Object);;Argument[2];MapValue of Argument[-1];valuecom.google.common.collect;ImmutableTable$Builder;true;putAll;(Table);;Argument[-1];ReturnValue;valuecom.google.common.collect;ImmutableTable$Builder;true;putAll;(Table);;MapValue of Argument[0];MapValue of Argument[-1];valuecom.google.common.collect;ImmutableTable$Builder;true;putAll;(Table);;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[0];SyntheticField[com.google.common.collect.Table.columnKey] of Argument[-1];valuecom.google.common.collect;ImmutableTable$Builder;true;putAll;(Table);;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of Argument[-1];valuecom.google.common.collect;ImmutableTable;true;copyOf;(Table);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;ImmutableTable;true;copyOf;(Table);;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[0];SyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue;valuecom.google.common.collect;ImmutableTable;true;copyOf;(Table);;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValue;valuecom.google.common.collect;ImmutableTable;true;of;(Object,Object,Object);;Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValue;valuecom.google.common.collect;ImmutableTable;true;of;(Object,Object,Object);;Argument[1];SyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue;valuecom.google.common.collect;ImmutableTable;true;of;(Object,Object,Object);;Argument[2];MapValue of ReturnValue;valuecom.google.common.collect;Iterables;false;addAll;(Collection,Iterable);;Element of Argument[1];Element of Argument[0];valuecom.google.common.collect;Iterables;false;concat;(Iterable);;Element of Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;concat;(Iterable,Iterable);;Element of Argument[0..1];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;concat;(Iterable,Iterable,Iterable);;Element of Argument[0..2];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;concat;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[0..3];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;concat;(Iterable[]);;Element of ArrayElement of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;consumingIterable;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;cycle;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;cycle;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;filter;(Iterable,Class);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;filter;(Iterable,Predicate);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;find;(Iterable,Predicate);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterables;false;find;(Iterable,Predicate,Object);;Argument[2];ReturnValue;valuecom.google.common.collect;Iterables;false;find;(Iterable,Predicate,Object);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterables;false;get;(Iterable,int);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterables;false;get;(Iterable,int,Object);;Argument[2];ReturnValue;valuecom.google.common.collect;Iterables;false;get;(Iterable,int,Object);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterables;false;getLast;(Iterable);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterables;false;getLast;(Iterable,Object);;Argument[1];ReturnValue;valuecom.google.common.collect;Iterables;false;getLast;(Iterable,Object);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterables;false;getOnlyElement;(Iterable);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterables;false;getOnlyElement;(Iterable,Object);;Argument[1];ReturnValue;valuecom.google.common.collect;Iterables;false;getOnlyElement;(Iterable,Object);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterables;false;limit;(Iterable,int);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;mergeSorted;(Iterable,Comparator);;Element of Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;paddedPartition;(Iterable,int);;Element of Argument[0];Element of Element of ReturnValue;valuecom.google.common.collect;Iterables;false;partition;(Iterable,int);;Element of Argument[0];Element of Element of ReturnValue;valuecom.google.common.collect;Iterables;false;skip;(Iterable,int);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;toArray;(Iterable,Class);;Element of Argument[0];ArrayElement of ReturnValue;valuecom.google.common.collect;Iterables;false;tryFind;(Iterable,Predicate);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;unmodifiableIterable;(ImmutableCollection);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterables;false;unmodifiableIterable;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;addAll;(Collection,Iterator);;Element of Argument[1];Element of Argument[0];valuecom.google.common.collect;Iterators;false;asEnumeration;(Iterator);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;concat;(Iterator);;Element of Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;concat;(Iterator,Iterator);;Element of Argument[0..1];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;concat;(Iterator,Iterator,Iterator);;Element of Argument[0..2];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;concat;(Iterator,Iterator,Iterator,Iterator);;Element of Argument[0..3];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;concat;(Iterator[]);;Element of ArrayElement of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;consumingIterator;(Iterator);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;cycle;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;cycle;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;filter;(Iterator,Class);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;filter;(Iterator,Predicate);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;find;(Iterator,Predicate);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterators;false;find;(Iterator,Predicate,Object);;Argument[2];ReturnValue;valuecom.google.common.collect;Iterators;false;find;(Iterator,Predicate,Object);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterators;false;forArray;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;forEnumeration;(Enumeration);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;get;(Iterator,int);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterators;false;get;(Iterator,int,Object);;Argument[2];ReturnValue;valuecom.google.common.collect;Iterators;false;get;(Iterator,int,Object);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterators;false;getLast;(Iterator);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterators;false;getLast;(Iterator,Object);;Argument[1];ReturnValue;valuecom.google.common.collect;Iterators;false;getLast;(Iterator,Object);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterators;false;getNext;(Iterator,Object);;Argument[1];ReturnValue;valuecom.google.common.collect;Iterators;false;getNext;(Iterator,Object);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterators;false;getOnlyElement;(Iterator);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterators;false;getOnlyElement;(Iterator,Object);;Argument[1];ReturnValue;valuecom.google.common.collect;Iterators;false;getOnlyElement;(Iterator,Object);;Element of Argument[0];ReturnValue;valuecom.google.common.collect;Iterators;false;limit;(Iterator,int);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;mergeSorted;(Iterable,Comparator);;Element of Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;paddedPartition;(Iterator,int);;Element of Argument[0];Element of Element of ReturnValue;valuecom.google.common.collect;Iterators;false;partition;(Iterator,int);;Element of Argument[0];Element of Element of ReturnValue;valuecom.google.common.collect;Iterators;false;peekingIterator;(Iterator);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;peekingIterator;(PeekingIterator);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;singletonIterator;(Object);;Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;toArray;(Iterator,Class);;Element of Argument[0];ArrayElement of ReturnValue;valuecom.google.common.collect;Iterators;false;tryFind;(Iterator,Predicate);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;unmodifiableIterator;(Iterator);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Iterators;false;unmodifiableIterator;(UnmodifiableIterator);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;LinkedHashMultimap;true;create;(Multimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;LinkedHashMultimap;true;create;(Multimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;LinkedHashMultiset;true;create;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;LinkedListMultimap;true;create;(Multimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;LinkedListMultimap;true;create;(Multimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Lists;false;asList;(Object,Object,Object[]);;Argument[0..1];Element of ReturnValue;valuecom.google.common.collect;Lists;false;asList;(Object,Object,Object[]);;ArrayElement of Argument[2];Element of ReturnValue;valuecom.google.common.collect;Lists;false;asList;(Object,Object[]);;Argument[0];Element of ReturnValue;valuecom.google.common.collect;Lists;false;asList;(Object,Object[]);;ArrayElement of Argument[1];Element of ReturnValue;valuecom.google.common.collect;Lists;false;cartesianProduct;(List);;Element of Element of Argument[0];Element of Element of ReturnValue;valuecom.google.common.collect;Lists;false;cartesianProduct;(List[]);;Element of ArrayElement of Argument[0];Element of Element of ReturnValue;valuecom.google.common.collect;Lists;false;charactersOf;(CharSequence);;Argument[0];Element of ReturnValue;taintcom.google.common.collect;Lists;false;charactersOf;(String);;Argument[0];Element of ReturnValue;taintcom.google.common.collect;Lists;false;newArrayList;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Lists;false;newArrayList;(Iterator);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Lists;false;newArrayList;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Lists;false;newCopyOnWriteArrayList;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Lists;false;newLinkedList;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Lists;false;partition;(List,int);;Element of Argument[0];Element of Element of ReturnValue;valuecom.google.common.collect;Lists;false;reverse;(List);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;MapDifference$ValueDifference;true;leftValue;();;SyntheticField[com.google.common.collect.MapDifference.left] of Argument[-1];ReturnValue;valuecom.google.common.collect;MapDifference$ValueDifference;true;rightValue;();;SyntheticField[com.google.common.collect.MapDifference.right] of Argument[-1];ReturnValue;valuecom.google.common.collect;MapDifference;true;entriesDiffering;();;MapKey of SyntheticField[com.google.common.collect.MapDifference.left] of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;MapDifference;true;entriesDiffering;();;MapKey of SyntheticField[com.google.common.collect.MapDifference.right] of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;MapDifference;true;entriesDiffering;();;MapValue of SyntheticField[com.google.common.collect.MapDifference.left] of Argument[-1];SyntheticField[com.google.common.collect.MapDifference.left] of MapValue of ReturnValue;valuecom.google.common.collect;MapDifference;true;entriesDiffering;();;MapValue of SyntheticField[com.google.common.collect.MapDifference.right] of Argument[-1];SyntheticField[com.google.common.collect.MapDifference.right] of MapValue of ReturnValue;valuecom.google.common.collect;MapDifference;true;entriesInCommon;();;MapKey of SyntheticField[com.google.common.collect.MapDifference.left] of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;MapDifference;true;entriesInCommon;();;MapKey of SyntheticField[com.google.common.collect.MapDifference.right] of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;MapDifference;true;entriesInCommon;();;MapValue of SyntheticField[com.google.common.collect.MapDifference.left] of Argument[-1];MapValue of ReturnValue;valuecom.google.common.collect;MapDifference;true;entriesInCommon;();;MapValue of SyntheticField[com.google.common.collect.MapDifference.right] of Argument[-1];MapValue of ReturnValue;valuecom.google.common.collect;MapDifference;true;entriesOnlyOnLeft;();;MapKey of SyntheticField[com.google.common.collect.MapDifference.left] of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;MapDifference;true;entriesOnlyOnLeft;();;MapValue of SyntheticField[com.google.common.collect.MapDifference.left] of Argument[-1];MapValue of ReturnValue;valuecom.google.common.collect;MapDifference;true;entriesOnlyOnRight;();;MapKey of SyntheticField[com.google.common.collect.MapDifference.right] of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;MapDifference;true;entriesOnlyOnRight;();;MapValue of SyntheticField[com.google.common.collect.MapDifference.right] of Argument[-1];MapValue of ReturnValue;valuecom.google.common.collect;Maps;false;asMap;(NavigableSet,Function);;Element of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;asMap;(Set,Function);;Element of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;asMap;(SortedSet,Function);;Element of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;difference;(Map,Map);;MapKey of Argument[0];MapKey of SyntheticField[com.google.common.collect.MapDifference.left] of ReturnValue;valuecom.google.common.collect;Maps;false;difference;(Map,Map);;MapKey of Argument[1];MapKey of SyntheticField[com.google.common.collect.MapDifference.right] of ReturnValue;valuecom.google.common.collect;Maps;false;difference;(Map,Map);;MapValue of Argument[0];MapValue of SyntheticField[com.google.common.collect.MapDifference.left] of ReturnValue;valuecom.google.common.collect;Maps;false;difference;(Map,Map);;MapValue of Argument[1];MapValue of SyntheticField[com.google.common.collect.MapDifference.right] of ReturnValue;valuecom.google.common.collect;Maps;false;difference;(Map,Map,Equivalence);;MapKey of Argument[0];MapKey of SyntheticField[com.google.common.collect.MapDifference.left] of ReturnValue;valuecom.google.common.collect;Maps;false;difference;(Map,Map,Equivalence);;MapKey of Argument[1];MapKey of SyntheticField[com.google.common.collect.MapDifference.right] of ReturnValue;valuecom.google.common.collect;Maps;false;difference;(Map,Map,Equivalence);;MapValue of Argument[0];MapValue of SyntheticField[com.google.common.collect.MapDifference.left] of ReturnValue;valuecom.google.common.collect;Maps;false;difference;(Map,Map,Equivalence);;MapValue of Argument[1];MapValue of SyntheticField[com.google.common.collect.MapDifference.right] of ReturnValue;valuecom.google.common.collect;Maps;false;difference;(SortedMap,Map);;MapKey of Argument[0];MapKey of SyntheticField[com.google.common.collect.MapDifference.left] of ReturnValue;valuecom.google.common.collect;Maps;false;difference;(SortedMap,Map);;MapKey of Argument[1];MapKey of SyntheticField[com.google.common.collect.MapDifference.right] of ReturnValue;valuecom.google.common.collect;Maps;false;difference;(SortedMap,Map);;MapValue of Argument[0];MapValue of SyntheticField[com.google.common.collect.MapDifference.left] of ReturnValue;valuecom.google.common.collect;Maps;false;difference;(SortedMap,Map);;MapValue of Argument[1];MapValue of SyntheticField[com.google.common.collect.MapDifference.right] of ReturnValue;valuecom.google.common.collect;Maps;false;filterEntries;;;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;filterKeys;;;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;filterValues;;;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;fromProperties;(Properties);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;fromProperties;(Properties);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Maps;false;immutableEntry;(Object,Object);;Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;immutableEntry;(Object,Object);;Argument[1];MapValue of ReturnValue;valuecom.google.common.collect;Maps;false;immutableEnumMap;(Map);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Maps;false;newEnumMap;(Map);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Maps;false;newHashMap;(Map);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;newHashMap;(Map);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Maps;false;newLinkedHashMap;(Map);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;newLinkedHashMap;(Map);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Maps;false;newTreeMap;(SortedMap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;newTreeMap;(SortedMap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Maps;false;subMap;(NavigableMap,Range);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;subMap;(NavigableMap,Range);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Maps;false;synchronizedBiMap;(BiMap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;synchronizedBiMap;(BiMap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Maps;false;synchronizedNavigableMap;(NavigableMap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;synchronizedNavigableMap;(NavigableMap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Maps;false;toMap;(Iterable,Function);;Element of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;toMap;(Iterator,Function);;Element of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;transformValues;(Map,Function);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;transformValues;(NavigableMap,Function);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;transformValues;(SortedMap,Function);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;uniqueIndex;(Iterable,Function);;Element of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Maps;false;uniqueIndex;(Iterator,Function);;Element of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Maps;false;unmodifiableBiMap;(BiMap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;unmodifiableBiMap;(BiMap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Maps;false;unmodifiableNavigableMap;(NavigableMap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Maps;false;unmodifiableNavigableMap;(NavigableMap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimap;true;asMap;();;MapKey of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;Multimap;true;asMap;();;MapValue of Argument[-1];Element of MapValue of ReturnValue;valuecom.google.common.collect;Multimap;true;entries;();;MapKey of Argument[-1];MapKey of Element of ReturnValue;valuecom.google.common.collect;Multimap;true;entries;();;MapValue of Argument[-1];MapValue of Element of ReturnValue;valuecom.google.common.collect;Multimap;true;get;(Object);;MapValue of Argument[-1];Element of ReturnValue;valuecom.google.common.collect;Multimap;true;keySet;();;MapKey of Argument[-1];Element of ReturnValue;valuecom.google.common.collect;Multimap;true;keys;();;MapKey of Argument[-1];Element of ReturnValue;valuecom.google.common.collect;Multimap;true;put;(Object,Object);;Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;Multimap;true;put;(Object,Object);;Argument[1];MapValue of Argument[-1];valuecom.google.common.collect;Multimap;true;putAll;(Multimap);;MapKey of Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;Multimap;true;putAll;(Multimap);;MapValue of Argument[0];MapValue of Argument[-1];valuecom.google.common.collect;Multimap;true;putAll;(Object,Iterable);;Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;Multimap;true;putAll;(Object,Iterable);;Element of Argument[1];MapValue of Argument[-1];valuecom.google.common.collect;Multimap;true;removeAll;(Object);;MapValue of Argument[-1];Element of ReturnValue;valuecom.google.common.collect;Multimap;true;replaceValues;(Object,Iterable);;Argument[0];MapKey of Argument[-1];valuecom.google.common.collect;Multimap;true;replaceValues;(Object,Iterable);;Element of Argument[1];MapValue of Argument[-1];valuecom.google.common.collect;Multimap;true;replaceValues;(Object,Iterable);;MapValue of Argument[-1];Element of ReturnValue;valuecom.google.common.collect;Multimap;true;values;();;MapValue of Argument[-1];Element of ReturnValue;valuecom.google.common.collect;Multimaps;false;asMap;(ListMultimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;asMap;(ListMultimap);;MapValue of Argument[0];Element of MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;asMap;(Multimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;asMap;(Multimap);;MapValue of Argument[0];Element of MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;asMap;(SetMultimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;asMap;(SetMultimap);;MapValue of Argument[0];Element of MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;asMap;(SortedSetMultimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;asMap;(SortedSetMultimap);;MapValue of Argument[0];Element of MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;filterEntries;(Multimap,Predicate);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;filterEntries;(Multimap,Predicate);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;filterEntries;(SetMultimap,Predicate);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;filterEntries;(SetMultimap,Predicate);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;filterKeys;(Multimap,Predicate);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;filterKeys;(Multimap,Predicate);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;filterKeys;(SetMultimap,Predicate);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;filterKeys;(SetMultimap,Predicate);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;filterValues;(Multimap,Predicate);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;filterValues;(Multimap,Predicate);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;filterValues;(SetMultimap,Predicate);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;filterValues;(SetMultimap,Predicate);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;forMap;(Map);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;forMap;(Map);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;index;(Iterable,Function);;Element of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;index;(Iterator,Function);;Element of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;invertFrom;(Multimap,Multimap);;Argument[1];ReturnValue;valuecom.google.common.collect;Multimaps;false;invertFrom;(Multimap,Multimap);;MapKey of Argument[0];MapValue of Argument[1];valuecom.google.common.collect;Multimaps;false;invertFrom;(Multimap,Multimap);;MapValue of Argument[0];MapKey of Argument[1];valuecom.google.common.collect;Multimaps;false;newListMultimap;(Map,Supplier);;Element of MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;newListMultimap;(Map,Supplier);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;newMultimap;(Map,Supplier);;Element of MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;newMultimap;(Map,Supplier);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;newSetMultimap;(Map,Supplier);;Element of MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;newSetMultimap;(Map,Supplier);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;newSortedSetMultimap;(Map,Supplier);;Element of MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;newSortedSetMultimap;(Map,Supplier);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;synchronizedListMultimap;(ListMultimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;synchronizedListMultimap;(ListMultimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;synchronizedMultimap;(Multimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;synchronizedMultimap;(Multimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;synchronizedSetMultimap;(SetMultimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;synchronizedSetMultimap;(SetMultimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;synchronizedSortedSetMultimap;(SortedSetMultimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;synchronizedSortedSetMultimap;(SortedSetMultimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;transformValues;(ListMultimap,Function);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;transformValues;(Multimap,Function);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;unmodifiableListMultimap;(ImmutableListMultimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;unmodifiableListMultimap;(ImmutableListMultimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;unmodifiableListMultimap;(ListMultimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;unmodifiableListMultimap;(ListMultimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;unmodifiableMultimap;(ImmutableMultimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;unmodifiableMultimap;(ImmutableMultimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;unmodifiableMultimap;(Multimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;unmodifiableMultimap;(Multimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;unmodifiableSetMultimap;(ImmutableSetMultimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;unmodifiableSetMultimap;(ImmutableSetMultimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;unmodifiableSetMultimap;(SetMultimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;unmodifiableSetMultimap;(SetMultimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multimaps;false;unmodifiableSortedSetMultimap;(SortedSetMultimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;Multimaps;false;unmodifiableSortedSetMultimap;(SortedSetMultimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Multiset$Entry;true;getElement;();;Element of Argument[-1];ReturnValue;valuecom.google.common.collect;Multiset;true;add;(Object,int);;Argument[0];Element of Argument[-1];valuecom.google.common.collect;Multiset;true;elementSet;();;Element of Argument[-1];Element of ReturnValue;valuecom.google.common.collect;Multiset;true;entrySet;();;Element of Argument[-1];Element of Element of ReturnValue;valuecom.google.common.collect;Multiset;true;setCount;(Object,int);;Argument[0];Element of Argument[-1];valuecom.google.common.collect;Multiset;true;setCount;(Object,int,int);;Argument[0];Element of Argument[-1];valuecom.google.common.collect;Multisets;false;copyHighestCountFirst;(Multiset);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Multisets;false;difference;(Multiset,Multiset);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Multisets;false;filter;(Multiset,Predicate);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Multisets;false;immutableEntry;(Object,int);;Argument[0];Element of ReturnValue;valuecom.google.common.collect;Multisets;false;intersection;(Multiset,Multiset);;Element of Argument[0..1];Element of ReturnValue;valuecom.google.common.collect;Multisets;false;sum;(Multiset,Multiset);;Element of Argument[0..1];Element of ReturnValue;valuecom.google.common.collect;Multisets;false;union;(Multiset,Multiset);;Element of Argument[0..1];Element of ReturnValue;valuecom.google.common.collect;Multisets;false;unmodifiableMultiset;(ImmutableMultiset);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Multisets;false;unmodifiableMultiset;(Multiset);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Multisets;false;unmodifiableSortedMultiset;(SortedMultiset);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;MutableClassToInstanceMap;true;create;(Map);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;MutableClassToInstanceMap;true;create;(Map);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;ObjectArrays;false;concat;(Object,Object[]);;Argument[0];ArrayElement of ReturnValue;valuecom.google.common.collect;ObjectArrays;false;concat;(Object,Object[]);;ArrayElement of Argument[1];ArrayElement of ReturnValue;valuecom.google.common.collect;ObjectArrays;false;concat;(Object[],Object);;Argument[1];ArrayElement of ReturnValue;valuecom.google.common.collect;ObjectArrays;false;concat;(Object[],Object);;ArrayElement of Argument[0];ArrayElement of ReturnValue;valuecom.google.common.collect;ObjectArrays;false;concat;(Object[],Object[],Class);;ArrayElement of Argument[0..1];ArrayElement of ReturnValue;valuecom.google.common.collect;Queues;false;drain;(BlockingQueue,Collection,int,Duration);;Element of Argument[0];Element of Argument[1];valuecom.google.common.collect;Queues;false;drain;(BlockingQueue,Collection,int,long,TimeUnit);;Element of Argument[0];Element of Argument[1];valuecom.google.common.collect;Queues;false;newArrayDeque;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Queues;false;newConcurrentLinkedQueue;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Queues;false;newLinkedBlockingDeque;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Queues;false;newLinkedBlockingQueue;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Queues;false;newPriorityBlockingQueue;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Queues;false;newPriorityQueue;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Queues;false;synchronizedDeque;(Deque);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Queues;false;synchronizedQueue;(Queue);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets$SetView;true;copyInto;(Set);;Element of Argument[-1];Element of Argument[0];valuecom.google.common.collect;Sets$SetView;true;immutableCopy;();;Element of Argument[-1];Element of ReturnValue;valuecom.google.common.collect;Sets;false;cartesianProduct;(List);;Element of Element of Argument[0];Element of Element of ReturnValue;valuecom.google.common.collect;Sets;false;cartesianProduct;(Set[]);;Element of ArrayElement of Argument[0];Element of Element of ReturnValue;valuecom.google.common.collect;Sets;false;combinations;(Set,int);;Element of Argument[0];Element of Element of ReturnValue;valuecom.google.common.collect;Sets;false;difference;(Set,Set);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets;false;filter;(NavigableSet,Predicate);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets;false;filter;(Set,Predicate);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets;false;filter;(SortedSet,Predicate);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets;false;intersection;(Set,Set);;Element of Argument[0..1];Element of ReturnValue;valuecom.google.common.collect;Sets;false;newConcurrentHashSet;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets;false;newCopyOnWriteArraySet;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets;false;newHashSet;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets;false;newHashSet;(Iterator);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets;false;newHashSet;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets;false;newLinkedHashSet;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets;false;newSetFromMap;(Map);;MapKey of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets;false;newTreeSet;(Iterable);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets;false;powerSet;(Set);;Element of Argument[0];Element of Element of ReturnValue;valuecom.google.common.collect;Sets;false;subSet;(NavigableSet,Range);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets;false;symmetricDifference;(Set,Set);;Element of Argument[0..1];Element of ReturnValue;valuecom.google.common.collect;Sets;false;synchronizedNavigableSet;(NavigableSet);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Sets;false;union;(Set,Set);;Element of Argument[0..1];Element of ReturnValue;valuecom.google.common.collect;Sets;false;unmodifiableNavigableSet;(NavigableSet);;Element of Argument[0];Element of ReturnValue;valuecom.google.common.collect;Table$Cell;true;getColumnKey;();;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[-1];ReturnValue;valuecom.google.common.collect;Table$Cell;true;getRowKey;();;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[-1];ReturnValue;valuecom.google.common.collect;Table$Cell;true;getValue;();;MapValue of Argument[-1];ReturnValue;valuecom.google.common.collect;Table;true;cellSet;();;MapValue of Argument[-1];MapValue of Element of ReturnValue;valuecom.google.common.collect;Table;true;cellSet;();;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[-1];SyntheticField[com.google.common.collect.Table.columnKey] of Element of ReturnValue;valuecom.google.common.collect;Table;true;cellSet;();;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[-1];SyntheticField[com.google.common.collect.Table.rowKey] of Element of ReturnValue;valuecom.google.common.collect;Table;true;column;(Object);;MapValue of Argument[-1];MapValue of ReturnValue;valuecom.google.common.collect;Table;true;column;(Object);;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;Table;true;columnKeySet;();;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[-1];Element of ReturnValue;valuecom.google.common.collect;Table;true;columnMap;();;MapValue of Argument[-1];MapValue of MapValue of ReturnValue;valuecom.google.common.collect;Table;true;columnMap;();;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;Table;true;columnMap;();;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[-1];MapKey of MapValue of ReturnValue;valuecom.google.common.collect;Table;true;get;(Object,Object);;MapValue of Argument[-1];ReturnValue;valuecom.google.common.collect;Table;true;put;(Object,Object,Object);;Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of Argument[-1];valuecom.google.common.collect;Table;true;put;(Object,Object,Object);;Argument[1];SyntheticField[com.google.common.collect.Table.columnKey] of Argument[-1];valuecom.google.common.collect;Table;true;put;(Object,Object,Object);;Argument[2];MapValue of Argument[-1];valuecom.google.common.collect;Table;true;putAll;(Table);;MapValue of Argument[0];MapValue of Argument[-1];valuecom.google.common.collect;Table;true;putAll;(Table);;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[0];SyntheticField[com.google.common.collect.Table.columnKey] of Argument[-1];valuecom.google.common.collect;Table;true;putAll;(Table);;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of Argument[-1];valuecom.google.common.collect;Table;true;remove;(Object,Object);;MapValue of Argument[-1];ReturnValue;valuecom.google.common.collect;Table;true;row;(Object);;MapValue of Argument[-1];MapValue of ReturnValue;valuecom.google.common.collect;Table;true;row;(Object);;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;Table;true;rowKeySet;();;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[-1];Element of ReturnValue;valuecom.google.common.collect;Table;true;rowMap;();;MapValue of Argument[-1];MapValue of MapValue of ReturnValue;valuecom.google.common.collect;Table;true;rowMap;();;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[-1];MapKey of MapValue of ReturnValue;valuecom.google.common.collect;Table;true;rowMap;();;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[-1];MapKey of ReturnValue;valuecom.google.common.collect;Table;true;values;();;MapValue of Argument[-1];Element of ReturnValue;valuecom.google.common.collect;Tables;false;immutableCell;(Object,Object,Object);;Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValue;valuecom.google.common.collect;Tables;false;immutableCell;(Object,Object,Object);;Argument[1];SyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue;valuecom.google.common.collect;Tables;false;immutableCell;(Object,Object,Object);;Argument[2];MapValue of ReturnValue;valuecom.google.common.collect;Tables;false;newCustomTable;(Map,Supplier);;MapKey of Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValue;valuecom.google.common.collect;Tables;false;newCustomTable;(Map,Supplier);;MapKey of MapValue of Argument[0];SyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue;valuecom.google.common.collect;Tables;false;newCustomTable;(Map,Supplier);;MapValue of MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Tables;false;synchronizedTable;(Table);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Tables;false;synchronizedTable;(Table);;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[0];SyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue;valuecom.google.common.collect;Tables;false;synchronizedTable;(Table);;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValue;valuecom.google.common.collect;Tables;false;transformValues;(Table,Function);;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[0];SyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue;valuecom.google.common.collect;Tables;false;transformValues;(Table,Function);;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValue;valuecom.google.common.collect;Tables;false;transpose;(Table);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Tables;false;transpose;(Table);;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValue;valuecom.google.common.collect;Tables;false;transpose;(Table);;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[0];SyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue;valuecom.google.common.collect;Tables;false;unmodifiableRowSortedTable;(RowSortedTable);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Tables;false;unmodifiableRowSortedTable;(RowSortedTable);;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[0];SyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue;valuecom.google.common.collect;Tables;false;unmodifiableRowSortedTable;(RowSortedTable);;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValue;valuecom.google.common.collect;Tables;false;unmodifiableTable;(Table);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;Tables;false;unmodifiableTable;(Table);;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[0];SyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue;valuecom.google.common.collect;Tables;false;unmodifiableTable;(Table);;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValue;valuecom.google.common.collect;TreeBasedTable;true;create;(TreeBasedTable);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;TreeBasedTable;true;create;(TreeBasedTable);;SyntheticField[com.google.common.collect.Table.columnKey] of Argument[0];SyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue;valuecom.google.common.collect;TreeBasedTable;true;create;(TreeBasedTable);;SyntheticField[com.google.common.collect.Table.rowKey] of Argument[0];SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValue;valuecom.google.common.collect;TreeMultimap;true;create;(Multimap);;MapKey of Argument[0];MapKey of ReturnValue;valuecom.google.common.collect;TreeMultimap;true;create;(Multimap);;MapValue of Argument[0];MapValue of ReturnValue;valuecom.google.common.collect;TreeMultiset;true;create;(Iterable);;Element of Argument[0];Element of ReturnValue;valuejavax.json.stream;JsonParserFactory;false;createParser;;;Argument[0];ReturnValue;taintjavax.json;Json;false;createArrayBuilder;(Collection);;Element of Argument[0];ReturnValue;taintjavax.json;Json;false;createArrayBuilder;(JsonArray);;Argument[0];ReturnValue;taintjavax.json;Json;false;createDiff;;;Argument[0..1];ReturnValue;taintjavax.json;Json;false;createMergeDiff;;;Argument[0..1];ReturnValue;taintjavax.json;Json;false;createMergePatch;;;Argument[0];ReturnValue;taintjavax.json;Json;false;createObjectBuilder;(JsonObject);;Argument[0];ReturnValue;taintjavax.json;Json;false;createObjectBuilder;(Map);;MapKey of Argument[0];ReturnValue;taintjavax.json;Json;false;createObjectBuilder;(Map);;MapValue of Argument[0];ReturnValue;taintjavax.json;Json;false;createPatch;;;Argument[0];ReturnValue;taintjavax.json;Json;false;createPatchBuilder;;;Argument[0];ReturnValue;taintjavax.json;Json;false;createPointer;;;Argument[0];ReturnValue;taintjavax.json;Json;false;createReader;;;Argument[0];ReturnValue;taintjavax.json;Json;false;createValue;;;Argument[0];ReturnValue;taintjavax.json;Json;false;createWriter;;;Argument[0];ReturnValue;taintjavax.json;Json;false;decodePointer;;;Argument[0];ReturnValue;taintjavax.json;Json;false;encodePointer;;;Argument[0];ReturnValue;taintjavax.json;JsonArray;false;getBoolean;;;Argument[-1];ReturnValue;taintjavax.json;JsonArray;false;getBoolean;;;Argument[1];ReturnValue;valuejavax.json;JsonArray;false;getInt;;;Argument[-1];ReturnValue;taintjavax.json;JsonArray;false;getInt;;;Argument[1];ReturnValue;valuejavax.json;JsonArray;false;getJsonArray;;;Argument[-1];ReturnValue;taintjavax.json;JsonArray;false;getJsonNumber;;;Argument[-1];ReturnValue;taintjavax.json;JsonArray;false;getJsonObject;;;Argument[-1];ReturnValue;taintjavax.json;JsonArray;false;getJsonString;;;Argument[-1];ReturnValue;taintjavax.json;JsonArray;false;getString;;;Argument[-1];ReturnValue;taintjavax.json;JsonArray;false;getString;;;Argument[1];ReturnValue;valuejavax.json;JsonArray;false;getValuesAs;;;Argument[-1];ReturnValue;taintjavax.json;JsonArrayBuilder;false;add;(BigDecimal);;Argument[0];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(BigInteger);;Argument[0];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(JsonArrayBuilder);;Argument[0];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(JsonObjectBuilder);;Argument[0];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(JsonValue);;Argument[0];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(String);;Argument[0];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(boolean);;Argument[0];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(double);;Argument[0];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(int);;Argument[0];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(int,BigDecimal);;Argument[1];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(int,BigInteger);;Argument[1];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(int,JsonArrayBuilder);;Argument[1];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(int,JsonObjectBuilder);;Argument[1];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(int,JsonValue);;Argument[1];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(int,String);;Argument[1];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(int,boolean);;Argument[1];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(int,double);;Argument[1];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(int,int);;Argument[1];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(int,long);;Argument[1];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;(long);;Argument[0];Argument[-1];taintjavax.json;JsonArrayBuilder;false;add;;;Argument[-1];ReturnValue;valuejavax.json;JsonArrayBuilder;false;addAll;;;Argument[-1];ReturnValue;valuejavax.json;JsonArrayBuilder;false;addAll;;;Argument[0];Argument[-1];taintjavax.json;JsonArrayBuilder;false;addNull;;;Argument[-1];ReturnValue;valuejavax.json;JsonArrayBuilder;false;build;;;Argument[-1];ReturnValue;taintjavax.json;JsonArrayBuilder;false;remove;;;Argument[-1];ReturnValue;valuejavax.json;JsonArrayBuilder;false;set;;;Argument[-1];ReturnValue;valuejavax.json;JsonArrayBuilder;false;set;;;Argument[1];Argument[-1];taintjavax.json;JsonArrayBuilder;false;setNull;;;Argument[-1];ReturnValue;valuejavax.json;JsonMergePatch;false;apply;;;Argument[-1];ReturnValue;taintjavax.json;JsonMergePatch;false;apply;;;Argument[0];ReturnValue;taintjavax.json;JsonMergePatch;false;toJsonValue;;;Argument[-1];ReturnValue;taintjavax.json;JsonNumber;false;bigDecimalValue;;;Argument[-1];ReturnValue;taintjavax.json;JsonNumber;false;bigIntegerValue;;;Argument[-1];ReturnValue;taintjavax.json;JsonNumber;false;bigIntegerValueExact;;;Argument[-1];ReturnValue;taintjavax.json;JsonNumber;false;doubleValue;;;Argument[-1];ReturnValue;taintjavax.json;JsonNumber;false;intValue;;;Argument[-1];ReturnValue;taintjavax.json;JsonNumber;false;intValueExact;;;Argument[-1];ReturnValue;taintjavax.json;JsonNumber;false;longValue;;;Argument[-1];ReturnValue;taintjavax.json;JsonNumber;false;longValueExact;;;Argument[-1];ReturnValue;taintjavax.json;JsonNumber;false;numberValue;;;Argument[-1];ReturnValue;taintjavax.json;JsonObject;false;getBoolean;;;Argument[-1];ReturnValue;taintjavax.json;JsonObject;false;getBoolean;;;Argument[1];ReturnValue;valuejavax.json;JsonObject;false;getInt;;;Argument[-1];ReturnValue;taintjavax.json;JsonObject;false;getInt;;;Argument[1];ReturnValue;valuejavax.json;JsonObject;false;getJsonArray;;;Argument[-1];ReturnValue;taintjavax.json;JsonObject;false;getJsonNumber;;;Argument[-1];ReturnValue;taintjavax.json;JsonObject;false;getJsonObject;;;Argument[-1];ReturnValue;taintjavax.json;JsonObject;false;getJsonString;;;Argument[-1];ReturnValue;taintjavax.json;JsonObject;false;getString;;;Argument[-1];ReturnValue;taintjavax.json;JsonObject;false;getString;;;Argument[1];ReturnValue;valuejavax.json;JsonObjectBuilder;false;add;;;Argument[-1];ReturnValue;valuejavax.json;JsonObjectBuilder;false;add;;;Argument[1];Argument[-1];taintjavax.json;JsonObjectBuilder;false;addAll;;;Argument[-1];ReturnValue;valuejavax.json;JsonObjectBuilder;false;addAll;;;Argument[0];ReturnValue;valuejavax.json;JsonObjectBuilder;false;addNull;;;Argument[-1];ReturnValue;valuejavax.json;JsonObjectBuilder;false;build;;;Argument[-1];ReturnValue;taintjavax.json;JsonObjectBuilder;false;remove;;;Argument[-1];ReturnValue;valuejavax.json;JsonPatch;false;apply;;;Argument[-1];ReturnValue;taintjavax.json;JsonPatch;false;apply;;;Argument[0];ReturnValue;taintjavax.json;JsonPatch;false;toJsonArray;;;Argument[-1];ReturnValue;taintjavax.json;JsonPatchBuilder;false;add;;;Argument[-1];ReturnValue;valuejavax.json;JsonPatchBuilder;false;add;;;Argument[0..1];ReturnValue;taintjavax.json;JsonPatchBuilder;false;build;;;Argument[-1];ReturnValue;taintjavax.json;JsonPatchBuilder;false;copy;;;Argument[-1];ReturnValue;valuejavax.json;JsonPatchBuilder;false;copy;;;Argument[0..1];ReturnValue;taintjavax.json;JsonPatchBuilder;false;move;;;Argument[-1];ReturnValue;valuejavax.json;JsonPatchBuilder;false;move;;;Argument[0..1];ReturnValue;taintjavax.json;JsonPatchBuilder;false;remove;;;Argument[-1];ReturnValue;valuejavax.json;JsonPatchBuilder;false;remove;;;Argument[0];ReturnValue;taintjavax.json;JsonPatchBuilder;false;replace;;;Argument[-1];ReturnValue;valuejavax.json;JsonPatchBuilder;false;replace;;;Argument[0..1];ReturnValue;taintjavax.json;JsonPatchBuilder;false;test;;;Argument[-1];ReturnValue;valuejavax.json;JsonPatchBuilder;false;test;;;Argument[0..1];ReturnValue;taintjavax.json;JsonPointer;false;add;;;Argument[-1];ReturnValue;taintjavax.json;JsonPointer;false;add;;;Argument[0..1];ReturnValue;taintjavax.json;JsonPointer;false;getValue;;;Argument[0];ReturnValue;taintjavax.json;JsonPointer;false;remove;;;Argument[0];ReturnValue;taintjavax.json;JsonPointer;false;replace;;;Argument[0..1];ReturnValue;taintjavax.json;JsonPointer;false;toString;;;Argument[-1];ReturnValue;taintjavax.json;JsonReader;false;read;;;Argument[-1];ReturnValue;taintjavax.json;JsonReader;false;readArray;;;Argument[-1];ReturnValue;taintjavax.json;JsonReader;false;readObject;;;Argument[-1];ReturnValue;taintjavax.json;JsonReader;false;readValue;;;Argument[-1];ReturnValue;taintjavax.json;JsonReaderFactory;false;createReader;;;Argument[0];ReturnValue;taintjavax.json;JsonString;false;getChars;;;Argument[-1];ReturnValue;taintjavax.json;JsonString;false;getString;;;Argument[-1];ReturnValue;taintjavax.json;JsonStructure;true;getValue;;;Argument[-1];ReturnValue;taintjavax.json;JsonValue;true;asJsonArray;;;Argument[-1];ReturnValue;taintjavax.json;JsonValue;true;asJsonObject;;;Argument[-1];ReturnValue;taintjavax.json;JsonValue;true;toString;;;Argument[-1];ReturnValue;taintjavax.json;JsonWriter;false;write;;;Argument[0];Argument[-1];taintjavax.json;JsonWriter;false;writeArray;;;Argument[0];Argument[-1];taintjavax.json;JsonWriter;false;writeObject;;;Argument[0];Argument[-1];taintjavax.json;JsonWriterFactory;false;createWriter;;;Argument[-1];Argument[0];taintjakarta.json.stream;JsonParserFactory;false;createParser;;;Argument[0];ReturnValue;taintjakarta.json;Json;false;createArrayBuilder;(Collection);;Element of Argument[0];ReturnValue;taintjakarta.json;Json;false;createArrayBuilder;(JsonArray);;Argument[0];ReturnValue;taintjakarta.json;Json;false;createDiff;;;Argument[0..1];ReturnValue;taintjakarta.json;Json;false;createMergeDiff;;;Argument[0..1];ReturnValue;taintjakarta.json;Json;false;createMergePatch;;;Argument[0];ReturnValue;taintjakarta.json;Json;false;createObjectBuilder;(JsonObject);;Argument[0];ReturnValue;taintjakarta.json;Json;false;createObjectBuilder;(Map);;MapKey of Argument[0];ReturnValue;taintjakarta.json;Json;false;createObjectBuilder;(Map);;MapValue of Argument[0];ReturnValue;taintjakarta.json;Json;false;createPatch;;;Argument[0];ReturnValue;taintjakarta.json;Json;false;createPatchBuilder;;;Argument[0];ReturnValue;taintjakarta.json;Json;false;createPointer;;;Argument[0];ReturnValue;taintjakarta.json;Json;false;createReader;;;Argument[0];ReturnValue;taintjakarta.json;Json;false;createValue;;;Argument[0];ReturnValue;taintjakarta.json;Json;false;createWriter;;;Argument[0];ReturnValue;taintjakarta.json;Json;false;decodePointer;;;Argument[0];ReturnValue;taintjakarta.json;Json;false;encodePointer;;;Argument[0];ReturnValue;taintjakarta.json;JsonArray;false;getBoolean;;;Argument[-1];ReturnValue;taintjakarta.json;JsonArray;false;getBoolean;;;Argument[1];ReturnValue;valuejakarta.json;JsonArray;false;getInt;;;Argument[-1];ReturnValue;taintjakarta.json;JsonArray;false;getInt;;;Argument[1];ReturnValue;valuejakarta.json;JsonArray;false;getJsonArray;;;Argument[-1];ReturnValue;taintjakarta.json;JsonArray;false;getJsonNumber;;;Argument[-1];ReturnValue;taintjakarta.json;JsonArray;false;getJsonObject;;;Argument[-1];ReturnValue;taintjakarta.json;JsonArray;false;getJsonString;;;Argument[-1];ReturnValue;taintjakarta.json;JsonArray;false;getString;;;Argument[-1];ReturnValue;taintjakarta.json;JsonArray;false;getString;;;Argument[1];ReturnValue;valuejakarta.json;JsonArray;false;getValuesAs;;;Argument[-1];ReturnValue;taintjakarta.json;JsonArrayBuilder;false;add;(BigDecimal);;Argument[0];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(BigInteger);;Argument[0];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(JsonArrayBuilder);;Argument[0];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(JsonObjectBuilder);;Argument[0];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(JsonValue);;Argument[0];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(String);;Argument[0];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(boolean);;Argument[0];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(double);;Argument[0];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(int);;Argument[0];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(int,BigDecimal);;Argument[1];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(int,BigInteger);;Argument[1];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(int,JsonArrayBuilder);;Argument[1];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(int,JsonObjectBuilder);;Argument[1];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(int,JsonValue);;Argument[1];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(int,String);;Argument[1];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(int,boolean);;Argument[1];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(int,double);;Argument[1];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(int,int);;Argument[1];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(int,long);;Argument[1];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;(long);;Argument[0];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;add;;;Argument[-1];ReturnValue;valuejakarta.json;JsonArrayBuilder;false;addAll;;;Argument[-1];ReturnValue;valuejakarta.json;JsonArrayBuilder;false;addAll;;;Argument[0];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;addNull;;;Argument[-1];ReturnValue;valuejakarta.json;JsonArrayBuilder;false;build;;;Argument[-1];ReturnValue;taintjakarta.json;JsonArrayBuilder;false;remove;;;Argument[-1];ReturnValue;valuejakarta.json;JsonArrayBuilder;false;set;;;Argument[-1];ReturnValue;valuejakarta.json;JsonArrayBuilder;false;set;;;Argument[1];Argument[-1];taintjakarta.json;JsonArrayBuilder;false;setNull;;;Argument[-1];ReturnValue;valuejakarta.json;JsonMergePatch;false;apply;;;Argument[-1];ReturnValue;taintjakarta.json;JsonMergePatch;false;apply;;;Argument[0];ReturnValue;taintjakarta.json;JsonMergePatch;false;toJsonValue;;;Argument[-1];ReturnValue;taintjakarta.json;JsonNumber;false;bigDecimalValue;;;Argument[-1];ReturnValue;taintjakarta.json;JsonNumber;false;bigIntegerValue;;;Argument[-1];ReturnValue;taintjakarta.json;JsonNumber;false;bigIntegerValueExact;;;Argument[-1];ReturnValue;taintjakarta.json;JsonNumber;false;doubleValue;;;Argument[-1];ReturnValue;taintjakarta.json;JsonNumber;false;intValue;;;Argument[-1];ReturnValue;taintjakarta.json;JsonNumber;false;intValueExact;;;Argument[-1];ReturnValue;taintjakarta.json;JsonNumber;false;longValue;;;Argument[-1];ReturnValue;taintjakarta.json;JsonNumber;false;longValueExact;;;Argument[-1];ReturnValue;taintjakarta.json;JsonNumber;false;numberValue;;;Argument[-1];ReturnValue;taintjakarta.json;JsonObject;false;getBoolean;;;Argument[-1];ReturnValue;taintjakarta.json;JsonObject;false;getBoolean;;;Argument[1];ReturnValue;valuejakarta.json;JsonObject;false;getInt;;;Argument[-1];ReturnValue;taintjakarta.json;JsonObject;false;getInt;;;Argument[1];ReturnValue;valuejakarta.json;JsonObject;false;getJsonArray;;;Argument[-1];ReturnValue;taintjakarta.json;JsonObject;false;getJsonNumber;;;Argument[-1];ReturnValue;taintjakarta.json;JsonObject;false;getJsonObject;;;Argument[-1];ReturnValue;taintjakarta.json;JsonObject;false;getJsonString;;;Argument[-1];ReturnValue;taintjakarta.json;JsonObject;false;getString;;;Argument[-1];ReturnValue;taintjakarta.json;JsonObject;false;getString;;;Argument[1];ReturnValue;valuejakarta.json;JsonObjectBuilder;false;add;;;Argument[-1];ReturnValue;valuejakarta.json;JsonObjectBuilder;false;add;;;Argument[1];Argument[-1];taintjakarta.json;JsonObjectBuilder;false;addAll;;;Argument[-1];ReturnValue;valuejakarta.json;JsonObjectBuilder;false;addAll;;;Argument[0];ReturnValue;valuejakarta.json;JsonObjectBuilder;false;addNull;;;Argument[-1];ReturnValue;valuejakarta.json;JsonObjectBuilder;false;build;;;Argument[-1];ReturnValue;taintjakarta.json;JsonObjectBuilder;false;remove;;;Argument[-1];ReturnValue;valuejakarta.json;JsonPatch;false;apply;;;Argument[-1];ReturnValue;taintjakarta.json;JsonPatch;false;apply;;;Argument[0];ReturnValue;taintjakarta.json;JsonPatch;false;toJsonArray;;;Argument[-1];ReturnValue;taintjakarta.json;JsonPatchBuilder;false;add;;;Argument[-1];ReturnValue;valuejakarta.json;JsonPatchBuilder;false;add;;;Argument[0..1];ReturnValue;taintjakarta.json;JsonPatchBuilder;false;build;;;Argument[-1];ReturnValue;taintjakarta.json;JsonPatchBuilder;false;copy;;;Argument[-1];ReturnValue;valuejakarta.json;JsonPatchBuilder;false;copy;;;Argument[0..1];ReturnValue;taintjakarta.json;JsonPatchBuilder;false;move;;;Argument[-1];ReturnValue;valuejakarta.json;JsonPatchBuilder;false;move;;;Argument[0..1];ReturnValue;taintjakarta.json;JsonPatchBuilder;false;remove;;;Argument[-1];ReturnValue;valuejakarta.json;JsonPatchBuilder;false;remove;;;Argument[0];ReturnValue;taintjakarta.json;JsonPatchBuilder;false;replace;;;Argument[-1];ReturnValue;valuejakarta.json;JsonPatchBuilder;false;replace;;;Argument[0..1];ReturnValue;taintjakarta.json;JsonPatchBuilder;false;test;;;Argument[-1];ReturnValue;valuejakarta.json;JsonPatchBuilder;false;test;;;Argument[0..1];ReturnValue;taintjakarta.json;JsonPointer;false;add;;;Argument[-1];ReturnValue;taintjakarta.json;JsonPointer;false;add;;;Argument[0..1];ReturnValue;taintjakarta.json;JsonPointer;false;getValue;;;Argument[0];ReturnValue;taintjakarta.json;JsonPointer;false;remove;;;Argument[0];ReturnValue;taintjakarta.json;JsonPointer;false;replace;;;Argument[0..1];ReturnValue;taintjakarta.json;JsonPointer;false;toString;;;Argument[-1];ReturnValue;taintjakarta.json;JsonReader;false;read;;;Argument[-1];ReturnValue;taintjakarta.json;JsonReader;false;readArray;;;Argument[-1];ReturnValue;taintjakarta.json;JsonReader;false;readObject;;;Argument[-1];ReturnValue;taintjakarta.json;JsonReader;false;readValue;;;Argument[-1];ReturnValue;taintjakarta.json;JsonReaderFactory;false;createReader;;;Argument[0];ReturnValue;taintjakarta.json;JsonString;false;getChars;;;Argument[-1];ReturnValue;taintjakarta.json;JsonString;false;getString;;;Argument[-1];ReturnValue;taintjakarta.json;JsonStructure;true;getValue;;;Argument[-1];ReturnValue;taintjakarta.json;JsonValue;true;asJsonArray;;;Argument[-1];ReturnValue;taintjakarta.json;JsonValue;true;asJsonObject;;;Argument[-1];ReturnValue;taintjakarta.json;JsonValue;true;toString;;;Argument[-1];ReturnValue;taintjakarta.json;JsonWriter;false;write;;;Argument[0];Argument[-1];taintjakarta.json;JsonWriter;false;writeArray;;;Argument[0];Argument[-1];taintjakarta.json;JsonWriter;false;writeObject;;;Argument[0];Argument[-1];taintjakarta.json;JsonWriterFactory;false;createWriter;;;Argument[-1];Argument[0];taintratpack.http;Headers;true;asMultiValueMap;;;Argument[-1];ReturnValue;taintratpack.http;Headers;true;get;;;Argument[-1];ReturnValue;taintratpack.http;Headers;true;getAll;;;Argument[-1];ReturnValue;taintratpack.http;Headers;true;getNames;;;Argument[-1];ReturnValue;taintratpack.http;TypedData;true;getBuffer;;;Argument[-1];ReturnValue;taintratpack.http;TypedData;true;getBytes;;;Argument[-1];ReturnValue;taintratpack.http;TypedData;true;getContentType;;;Argument[-1];ReturnValue;taintratpack.http;TypedData;true;getInputStream;;;Argument[-1];ReturnValue;taintratpack.http;TypedData;true;getText;;;Argument[-1];ReturnValue;taintratpack.http;TypedData;true;writeTo;;;Argument[-1];Argument[0];taintratpack.core.http;Headers;true;asMultiValueMap;;;Argument[-1];ReturnValue;taintratpack.core.http;Headers;true;get;;;Argument[-1];ReturnValue;taintratpack.core.http;Headers;true;getAll;;;Argument[-1];ReturnValue;taintratpack.core.http;Headers;true;getNames;;;Argument[-1];ReturnValue;taintratpack.core.http;TypedData;true;getBuffer;;;Argument[-1];ReturnValue;taintratpack.core.http;TypedData;true;getBytes;;;Argument[-1];ReturnValue;taintratpack.core.http;TypedData;true;getContentType;;;Argument[-1];ReturnValue;taintratpack.core.http;TypedData;true;getInputStream;;;Argument[-1];ReturnValue;taintratpack.core.http;TypedData;true;getText;;;Argument[-1];ReturnValue;taintratpack.core.http;TypedData;true;writeTo;;;Argument[-1];Argument[0];taintjavax.ws.rs.core;UriBuilder;false;fromLink;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;false;fromPath;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;false;fromUri;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;build;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;build;;;ArrayElement of Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;buildFromEncoded;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;buildFromEncoded;;;ArrayElement of Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;buildFromEncodedMap;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;buildFromEncodedMap;;;MapKey of Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;buildFromEncodedMap;;;MapValue of Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;buildFromMap;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;buildFromMap;;;MapKey of Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;buildFromMap;;;MapValue of Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;clone;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;fragment;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;fragment;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;host;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;host;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;matrixParam;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;matrixParam;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;matrixParam;;;ArrayElement of Argument[1];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;path;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;path;;;Argument[0..1];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;queryParam;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;queryParam;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;queryParam;;;ArrayElement of Argument[1];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;replaceMatrix;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;replaceMatrix;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;replaceMatrixParam;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;replaceMatrixParam;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;replaceMatrixParam;;;ArrayElement of Argument[1];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;replacePath;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;replacePath;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;replaceQuery;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;replaceQuery;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;replaceQueryParam;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;replaceQueryParam;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;replaceQueryParam;;;ArrayElement of Argument[1];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;resolveTemplate;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;resolveTemplate;;;Argument[0..2];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;resolveTemplateFromEncoded;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;resolveTemplateFromEncoded;;;Argument[0..1];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;resolveTemplates;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;resolveTemplates;;;MapKey of Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;resolveTemplates;;;MapValue of Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;resolveTemplatesFromEncoded;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;resolveTemplatesFromEncoded;;;MapKey of Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;resolveTemplatesFromEncoded;;;MapValue of Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;scheme;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;scheme;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;schemeSpecificPart;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;schemeSpecificPart;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;segment;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;segment;;;ArrayElement of Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;toTemplate;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;uri;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;uri;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriBuilder;true;userInfo;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;UriBuilder;true;userInfo;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;false;fromLink;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;false;fromPath;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;false;fromUri;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;build;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;build;;;ArrayElement of Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;buildFromEncoded;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;buildFromEncoded;;;ArrayElement of Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;buildFromEncodedMap;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;buildFromEncodedMap;;;MapKey of Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;buildFromEncodedMap;;;MapValue of Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;buildFromMap;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;buildFromMap;;;MapKey of Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;buildFromMap;;;MapValue of Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;clone;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;fragment;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;fragment;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;host;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;host;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;matrixParam;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;matrixParam;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;matrixParam;;;ArrayElement of Argument[1];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;path;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;path;;;Argument[0..1];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;queryParam;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;queryParam;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;queryParam;;;ArrayElement of Argument[1];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;replaceMatrix;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;replaceMatrix;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;replaceMatrixParam;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;replaceMatrixParam;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;replaceMatrixParam;;;ArrayElement of Argument[1];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;replacePath;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;replacePath;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;replaceQuery;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;replaceQuery;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;replaceQueryParam;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;replaceQueryParam;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;replaceQueryParam;;;ArrayElement of Argument[1];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;resolveTemplate;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;resolveTemplate;;;Argument[0..2];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;resolveTemplateFromEncoded;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;resolveTemplateFromEncoded;;;Argument[0..1];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;resolveTemplates;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;resolveTemplates;;;MapKey of Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;resolveTemplates;;;MapValue of Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;resolveTemplatesFromEncoded;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;resolveTemplatesFromEncoded;;;MapKey of Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;resolveTemplatesFromEncoded;;;MapValue of Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;scheme;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;scheme;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;schemeSpecificPart;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;schemeSpecificPart;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;segment;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;segment;;;ArrayElement of Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;toTemplate;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;uri;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;uri;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriBuilder;true;userInfo;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;UriBuilder;true;userInfo;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriInfo;true;getAbsolutePath;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriInfo;true;getAbsolutePathBuilder;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriInfo;true;getPath;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriInfo;true;getPathParameters;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriInfo;true;getPathSegments;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriInfo;true;getQueryParameters;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriInfo;true;getRequestUri;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriInfo;true;getRequestUriBuilder;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriInfo;true;relativize;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;UriInfo;true;resolve;;;Argument[-1];ReturnValue;taintjavax.ws.rs.core;UriInfo;true;resolve;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriInfo;true;getAbsolutePath;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriInfo;true;getAbsolutePathBuilder;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriInfo;true;getPath;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriInfo;true;getPathParameters;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriInfo;true;getPathSegments;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriInfo;true;getQueryParameters;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriInfo;true;getRequestUri;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriInfo;true;getRequestUriBuilder;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriInfo;true;relativize;;;Argument[0];ReturnValue;taintjakarta.ws.rs.core;UriInfo;true;resolve;;;Argument[-1];ReturnValue;taintjakarta.ws.rs.core;UriInfo;true;resolve;;;Argument[0];ReturnValue;taintjavax.ws.rs.core;MultivaluedMap;true;add;;;Argument[0];MapKey of Argument[-1];valuejavax.ws.rs.core;MultivaluedMap;true;add;;;Argument[1];Element of MapValue of Argument[-1];valuejavax.ws.rs.core;MultivaluedMap;true;addAll;(Object,List);;Element of Argument[1];Element of MapValue of Argument[-1];valuejavax.ws.rs.core;MultivaluedMap;true;addAll;(Object,Object[]);;ArrayElement of Argument[1];Element of MapValue of Argument[-1];valuejavax.ws.rs.core;MultivaluedMap;true;addAll;;;Argument[0];MapKey of Argument[-1];valuejavax.ws.rs.core;MultivaluedMap;true;addFirst;;;Argument[0];MapKey of Argument[-1];valuejavax.ws.rs.core;MultivaluedMap;true;addFirst;;;Argument[1];Element of MapValue of Argument[-1];valuejavax.ws.rs.core;MultivaluedMap;true;getFirst;;;Element of MapValue of Argument[-1];ReturnValue;valuejavax.ws.rs.core;MultivaluedMap;true;putSingle;;;Argument[0];MapKey of Argument[-1];valuejavax.ws.rs.core;MultivaluedMap;true;putSingle;;;Argument[1];Element of MapValue of Argument[-1];valuejakarta.ws.rs.core;MultivaluedMap;true;add;;;Argument[0];MapKey of Argument[-1];valuejakarta.ws.rs.core;MultivaluedMap;true;add;;;Argument[1];Element of MapValue of Argument[-1];valuejakarta.ws.rs.core;MultivaluedMap;true;addAll;(Object,List);;Element of Argument[1];Element of MapValue of Argument[-1];valuejakarta.ws.rs.core;MultivaluedMap;true;addAll;(Object,Object[]);;ArrayElement of Argument[1];Element of MapValue of Argument[-1];valuejakarta.ws.rs.core;MultivaluedMap;true;addAll;;;Argument[0];MapKey of Argument[-1];valuejakarta.ws.rs.core;MultivaluedMap;true;addFirst;;;Argument[0];MapKey of Argument[-1];valuejakarta.ws.rs.core;MultivaluedMap;true;addFirst;;;Argument[1];Element of MapValue of Argument[-1];valuejakarta.ws.rs.core;MultivaluedMap;true;getFirst;;;Element of MapValue of Argument[-1];ReturnValue;valuejakarta.ws.rs.core;MultivaluedMap;true;putSingle;;;Argument[0];MapKey of Argument[-1];valuejakarta.ws.rs.core;MultivaluedMap;true;putSingle;;;Argument[1];Element of MapValue of Argument[-1];valueorg.apache.commons.collections.multimap;ArrayListValuedHashMap;true;ArrayListValuedHashMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.multimap;ArrayListValuedHashMap;true;ArrayListValuedHashMap;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections.multimap;ArrayListValuedHashMap;true;ArrayListValuedHashMap;(MultiValuedMap);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections.multimap;ArrayListValuedHashMap;true;ArrayListValuedHashMap;(MultiValuedMap);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.multimap;HashSetValuedHashMap;true;HashSetValuedHashMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.multimap;HashSetValuedHashMap;true;HashSetValuedHashMap;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections.multimap;HashSetValuedHashMap;true;HashSetValuedHashMap;(MultiValuedMap);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections.multimap;HashSetValuedHashMap;true;HashSetValuedHashMap;(MultiValuedMap);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.multimap;TransformedMultiValuedMap;true;transformingMap;;;Element of MapValue of Argument[0];Element of MapValue of ReturnValue;valueorg.apache.commons.collections.multimap;TransformedMultiValuedMap;true;transformingMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.multimap;UnmodifiableMultiValuedMap;true;unmodifiableMultiValuedMap;(MultiValuedMap);;Element of MapValue of Argument[0];Element of MapValue of ReturnValue;valueorg.apache.commons.collections.multimap;UnmodifiableMultiValuedMap;true;unmodifiableMultiValuedMap;(MultiValuedMap);;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.multimap;ArrayListValuedHashMap;true;ArrayListValuedHashMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.multimap;ArrayListValuedHashMap;true;ArrayListValuedHashMap;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections4.multimap;ArrayListValuedHashMap;true;ArrayListValuedHashMap;(MultiValuedMap);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections4.multimap;ArrayListValuedHashMap;true;ArrayListValuedHashMap;(MultiValuedMap);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.multimap;HashSetValuedHashMap;true;HashSetValuedHashMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.multimap;HashSetValuedHashMap;true;HashSetValuedHashMap;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections4.multimap;HashSetValuedHashMap;true;HashSetValuedHashMap;(MultiValuedMap);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections4.multimap;HashSetValuedHashMap;true;HashSetValuedHashMap;(MultiValuedMap);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.multimap;TransformedMultiValuedMap;true;transformingMap;;;Element of MapValue of Argument[0];Element of MapValue of ReturnValue;valueorg.apache.commons.collections4.multimap;TransformedMultiValuedMap;true;transformingMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.multimap;UnmodifiableMultiValuedMap;true;unmodifiableMultiValuedMap;(MultiValuedMap);;Element of MapValue of Argument[0];Element of MapValue of ReturnValue;valueorg.apache.commons.collections4.multimap;UnmodifiableMultiValuedMap;true;unmodifiableMultiValuedMap;(MultiValuedMap);;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.bag;AbstractBagDecorator;true;AbstractBagDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.bag;AbstractMapBag;true;AbstractMapBag;;;MapKey of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.bag;AbstractMapBag;true;getMap;;;Element of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections.bag;AbstractSortedBagDecorator;true;AbstractSortedBagDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.bag;CollectionBag;true;CollectionBag;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.bag;CollectionBag;true;collectionBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.bag;CollectionSortedBag;true;CollectionSortedBag;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.bag;CollectionSortedBag;true;collectionSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.bag;HashBag;true;HashBag;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.bag;PredicatedBag;true;predicatedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.bag;PredicatedSortedBag;true;predicatedSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.bag;SynchronizedBag;true;synchronizedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.bag;SynchronizedSortedBag;true;synchronizedSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.bag;TransformedBag;true;transformedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.bag;TransformedSortedBag;true;transformedSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.bag;TreeBag;true;TreeBag;(Collection);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.bag;UnmodifiableBag;true;unmodifiableBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.bag;UnmodifiableSortedBag;true;unmodifiableSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.bag;AbstractBagDecorator;true;AbstractBagDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.bag;AbstractMapBag;true;AbstractMapBag;;;MapKey of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.bag;AbstractMapBag;true;getMap;;;Element of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections4.bag;AbstractSortedBagDecorator;true;AbstractSortedBagDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.bag;CollectionBag;true;CollectionBag;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.bag;CollectionBag;true;collectionBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.bag;CollectionSortedBag;true;CollectionSortedBag;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.bag;CollectionSortedBag;true;collectionSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.bag;HashBag;true;HashBag;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.bag;PredicatedBag;true;predicatedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.bag;PredicatedSortedBag;true;predicatedSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.bag;SynchronizedBag;true;synchronizedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.bag;SynchronizedSortedBag;true;synchronizedSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.bag;TransformedBag;true;transformedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.bag;TransformedSortedBag;true;transformedSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.bag;TreeBag;true;TreeBag;(Collection);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.bag;UnmodifiableBag;true;unmodifiableBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.bag;UnmodifiableSortedBag;true;unmodifiableSortedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.list;AbstractLinkedList;true;AbstractLinkedList;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.list;AbstractLinkedList;true;addFirst;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.list;AbstractLinkedList;true;addLast;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.list;AbstractLinkedList;true;getFirst;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections.list;AbstractLinkedList;true;getLast;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections.list;AbstractLinkedList;true;removeFirst;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections.list;AbstractLinkedList;true;removeLast;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections.list;AbstractListDecorator;true;AbstractListDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.list;AbstractSerializableListDecorator;true;AbstractSerializableListDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.list;CursorableLinkedList;true;CursorableLinkedList;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.list;CursorableLinkedList;true;cursor;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.list;FixedSizeList;true;fixedSizeList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.list;GrowthList;true;growthList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.list;LazyList;true;lazyList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.list;NodeCachingLinkedList;true;NodeCachingLinkedList;(Collection);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.list;PredicatedList;true;predicatedList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.list;SetUniqueList;true;asSet;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.list;SetUniqueList;true;setUniqueList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.list;TransformedList;true;transformingList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.list;TreeList;true;TreeList;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.list;UnmodifiableList;true;UnmodifiableList;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.list;UnmodifiableList;true;unmodifiableList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.list;AbstractLinkedList;true;AbstractLinkedList;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.list;AbstractLinkedList;true;addFirst;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.list;AbstractLinkedList;true;addLast;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.list;AbstractLinkedList;true;getFirst;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.list;AbstractLinkedList;true;getLast;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.list;AbstractLinkedList;true;removeFirst;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.list;AbstractLinkedList;true;removeLast;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.list;AbstractListDecorator;true;AbstractListDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.list;AbstractSerializableListDecorator;true;AbstractSerializableListDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.list;CursorableLinkedList;true;CursorableLinkedList;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.list;CursorableLinkedList;true;cursor;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.list;FixedSizeList;true;fixedSizeList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.list;GrowthList;true;growthList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.list;LazyList;true;lazyList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.list;NodeCachingLinkedList;true;NodeCachingLinkedList;(Collection);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.list;PredicatedList;true;predicatedList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.list;SetUniqueList;true;asSet;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.list;SetUniqueList;true;setUniqueList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.list;TransformedList;true;transformingList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.list;TreeList;true;TreeList;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.list;UnmodifiableList;true;UnmodifiableList;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.list;UnmodifiableList;true;unmodifiableList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils$SetView;true;copyInto;;;Element of Argument[-1];Element of Argument[0];valueorg.apache.commons.collections;SetUtils$SetView;true;createIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils$SetView;true;toSet;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;difference;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;disjunction;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;disjunction;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;emptyIfNull;;;Argument[0];ReturnValue;valueorg.apache.commons.collections;SetUtils;true;hashSet;;;ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;intersection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;intersection;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;orderedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;predicatedNavigableSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;predicatedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;predicatedSortedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;synchronizedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;synchronizedSortedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;transformedNavigableSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;transformedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;transformedSortedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;union;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;union;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;unmodifiableNavigableSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;unmodifiableSet;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;unmodifiableSet;(Set);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;SetUtils;true;unmodifiableSortedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils$SetView;true;copyInto;;;Element of Argument[-1];Element of Argument[0];valueorg.apache.commons.collections4;SetUtils$SetView;true;createIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils$SetView;true;toSet;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;difference;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;disjunction;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;disjunction;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;emptyIfNull;;;Argument[0];ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;hashSet;;;ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;intersection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;intersection;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;orderedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;predicatedNavigableSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;predicatedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;predicatedSortedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;synchronizedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;synchronizedSortedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;transformedNavigableSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;transformedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;transformedSortedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;union;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;union;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;unmodifiableNavigableSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;unmodifiableSet;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;unmodifiableSet;(Set);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;SetUtils;true;unmodifiableSortedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;defaultIfNull;;;Argument[0];ReturnValue;valueorg.apache.commons.collections;ListUtils;true;defaultIfNull;;;Argument[1];ReturnValue;valueorg.apache.commons.collections;ListUtils;true;emptyIfNull;;;Argument[0];ReturnValue;valueorg.apache.commons.collections;ListUtils;true;fixedSizeList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;intersection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;intersection;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;lazyList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;longestCommonSubsequence;(CharSequence,CharSequence);;Argument[0];ReturnValue;taintorg.apache.commons.collections;ListUtils;true;longestCommonSubsequence;(CharSequence,CharSequence);;Argument[1];ReturnValue;taintorg.apache.commons.collections;ListUtils;true;longestCommonSubsequence;(List,List);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;longestCommonSubsequence;(List,List);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;longestCommonSubsequence;(List,List,Equator);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;longestCommonSubsequence;(List,List,Equator);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;partition;;;Element of Argument[0];Element of Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;predicatedList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;removeAll;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;retainAll;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;select;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;selectRejected;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;subtract;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;sum;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;sum;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;synchronizedList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;transformedList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;union;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;union;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;ListUtils;true;unmodifiableList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;defaultIfNull;;;Argument[0];ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;defaultIfNull;;;Argument[1];ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;emptyIfNull;;;Argument[0];ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;fixedSizeList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;intersection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;intersection;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;lazyList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;longestCommonSubsequence;(CharSequence,CharSequence);;Argument[0];ReturnValue;taintorg.apache.commons.collections4;ListUtils;true;longestCommonSubsequence;(CharSequence,CharSequence);;Argument[1];ReturnValue;taintorg.apache.commons.collections4;ListUtils;true;longestCommonSubsequence;(List,List);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;longestCommonSubsequence;(List,List);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;longestCommonSubsequence;(List,List,Equator);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;longestCommonSubsequence;(List,List,Equator);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;partition;;;Element of Argument[0];Element of Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;predicatedList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;removeAll;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;retainAll;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;select;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;selectRejected;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;subtract;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;sum;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;sum;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;synchronizedList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;transformedList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;union;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;union;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;ListUtils;true;unmodifiableList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.set;AbstractNavigableSetDecorator;true;AbstractNavigableSetDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.set;AbstractSetDecorator;true;AbstractSetDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.set;AbstractSortedSetDecorator;true;AbstractSortedSetDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.set;CompositeSet$SetMutator;true;add;;;Argument[2];Element of Argument[0];valueorg.apache.commons.collections.set;CompositeSet$SetMutator;true;add;;;Argument[2];Element of Element of Argument[1];valueorg.apache.commons.collections.set;CompositeSet$SetMutator;true;addAll;;;Element of Argument[2];Element of Argument[0];valueorg.apache.commons.collections.set;CompositeSet$SetMutator;true;addAll;;;Element of Argument[2];Element of Element of Argument[1];valueorg.apache.commons.collections.set;CompositeSet;true;CompositeSet;(Set);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.set;CompositeSet;true;CompositeSet;(Set[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.set;CompositeSet;true;addComposited;(Set);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.set;CompositeSet;true;addComposited;(Set,Set);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.set;CompositeSet;true;addComposited;(Set,Set);;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.set;CompositeSet;true;addComposited;(Set[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.set;CompositeSet;true;getSets;;;Element of Argument[-1];Element of Element of ReturnValue;valueorg.apache.commons.collections.set;CompositeSet;true;toSet;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.set;ListOrderedSet;true;add;;;Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.set;ListOrderedSet;true;addAll;;;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.set;ListOrderedSet;true;asList;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.set;ListOrderedSet;true;get;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections.set;ListOrderedSet;true;listOrderedSet;(List);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.set;ListOrderedSet;true;listOrderedSet;(Set);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.set;MapBackedSet;true;mapBackedSet;;;MapKey of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.set;PredicatedNavigableSet;true;predicatedNavigableSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.set;PredicatedSet;true;predicatedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.set;PredicatedSortedSet;true;predicatedSortedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.set;TransformedNavigableSet;true;transformingNavigableSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.set;TransformedSet;true;transformingSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.set;TransformedSortedSet;true;transformingSortedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.set;UnmodifiableNavigableSet;true;unmodifiableNavigableSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.set;UnmodifiableSet;true;unmodifiableSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.set;UnmodifiableSortedSet;true;unmodifiableSortedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.set;AbstractNavigableSetDecorator;true;AbstractNavigableSetDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.set;AbstractSetDecorator;true;AbstractSetDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.set;AbstractSortedSetDecorator;true;AbstractSortedSetDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.set;CompositeSet$SetMutator;true;add;;;Argument[2];Element of Argument[0];valueorg.apache.commons.collections4.set;CompositeSet$SetMutator;true;add;;;Argument[2];Element of Element of Argument[1];valueorg.apache.commons.collections4.set;CompositeSet$SetMutator;true;addAll;;;Element of Argument[2];Element of Argument[0];valueorg.apache.commons.collections4.set;CompositeSet$SetMutator;true;addAll;;;Element of Argument[2];Element of Element of Argument[1];valueorg.apache.commons.collections4.set;CompositeSet;true;CompositeSet;(Set);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.set;CompositeSet;true;CompositeSet;(Set[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.set;CompositeSet;true;addComposited;(Set);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.set;CompositeSet;true;addComposited;(Set,Set);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.set;CompositeSet;true;addComposited;(Set,Set);;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.set;CompositeSet;true;addComposited;(Set[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.set;CompositeSet;true;getSets;;;Element of Argument[-1];Element of Element of ReturnValue;valueorg.apache.commons.collections4.set;CompositeSet;true;toSet;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.set;ListOrderedSet;true;add;;;Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.set;ListOrderedSet;true;addAll;;;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.set;ListOrderedSet;true;asList;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.set;ListOrderedSet;true;get;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.set;ListOrderedSet;true;listOrderedSet;(List);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.set;ListOrderedSet;true;listOrderedSet;(Set);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.set;MapBackedSet;true;mapBackedSet;;;MapKey of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.set;PredicatedNavigableSet;true;predicatedNavigableSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.set;PredicatedSet;true;predicatedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.set;PredicatedSortedSet;true;predicatedSortedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.set;TransformedNavigableSet;true;transformingNavigableSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.set;TransformedSet;true;transformingSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.set;TransformedSortedSet;true;transformingSortedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.set;UnmodifiableNavigableSet;true;unmodifiableNavigableSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.set;UnmodifiableSet;true;unmodifiableSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.set;UnmodifiableSortedSet;true;unmodifiableSortedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;boundedIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;chainedIterable;(Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;chainedIterable;(Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable);;Element of Argument[2];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[2];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[3];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;chainedIterable;(Iterable[]);;Element of ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;collatedIterable;(Comparator,Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;collatedIterable;(Comparator,Iterable,Iterable);;Element of Argument[2];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;collatedIterable;(Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;collatedIterable;(Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;emptyIfNull;;;Argument[0];ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;filteredIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;find;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;first;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;forEachButLast;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;get;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;loopingIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;partition;;;Element of Argument[0];Element of Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;reversedIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;skippingIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;toList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;toString;;;Argument[2];ReturnValue;taintorg.apache.commons.collections;IterableUtils;true;toString;;;Argument[3];ReturnValue;taintorg.apache.commons.collections;IterableUtils;true;toString;;;Argument[4];ReturnValue;taintorg.apache.commons.collections;IterableUtils;true;uniqueIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;unmodifiableIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;zippingIterable;(Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;zippingIterable;(Iterable,Iterable[]);;Element of ArrayElement of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;IterableUtils;true;zippingIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;boundedIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable);;Element of Argument[2];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[2];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable,Iterable,Iterable,Iterable);;Element of Argument[3];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;chainedIterable;(Iterable[]);;Element of ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;collatedIterable;(Comparator,Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;collatedIterable;(Comparator,Iterable,Iterable);;Element of Argument[2];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;collatedIterable;(Iterable,Iterable);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;collatedIterable;(Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;emptyIfNull;;;Argument[0];ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;filteredIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;find;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;first;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;forEachButLast;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;get;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;loopingIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;partition;;;Element of Argument[0];Element of Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;reversedIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;skippingIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;toList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;toString;;;Argument[2];ReturnValue;taintorg.apache.commons.collections4;IterableUtils;true;toString;;;Argument[3];ReturnValue;taintorg.apache.commons.collections4;IterableUtils;true;toString;;;Argument[4];ReturnValue;taintorg.apache.commons.collections4;IterableUtils;true;uniqueIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;unmodifiableIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;zippingIterable;(Iterable,Iterable);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;zippingIterable;(Iterable,Iterable[]);;Element of ArrayElement of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;IterableUtils;true;zippingIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.bidimap;AbstractBidiMapDecorator;true;AbstractBidiMapDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.bidimap;AbstractBidiMapDecorator;true;AbstractBidiMapDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapKey of Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapKey of Argument[2];MapValue of Argument[-1];valueorg.apache.commons.collections.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapValue of Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapValue of Argument[2];MapKey of Argument[-1];valueorg.apache.commons.collections.bidimap;AbstractOrderedBidiMapDecorator;true;AbstractOrderedBidiMapDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.bidimap;AbstractOrderedBidiMapDecorator;true;AbstractOrderedBidiMapDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.bidimap;AbstractSortedBidiMapDecorator;true;AbstractSortedBidiMapDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.bidimap;AbstractSortedBidiMapDecorator;true;AbstractSortedBidiMapDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.bidimap;DualHashBidiMap;true;DualHashBidiMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.bidimap;DualHashBidiMap;true;DualHashBidiMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.bidimap;DualLinkedHashBidiMap;true;DualLinkedHashBidiMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.bidimap;DualLinkedHashBidiMap;true;DualLinkedHashBidiMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.bidimap;DualTreeBidiMap;true;DualTreeBidiMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.bidimap;DualTreeBidiMap;true;DualTreeBidiMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.bidimap;DualTreeBidiMap;true;inverseOrderedBidiMap;;;MapKey of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections.bidimap;DualTreeBidiMap;true;inverseOrderedBidiMap;;;MapValue of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections.bidimap;DualTreeBidiMap;true;inverseSortedBidiMap;;;MapKey of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections.bidimap;DualTreeBidiMap;true;inverseSortedBidiMap;;;MapValue of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections.bidimap;TreeBidiMap;true;TreeBidiMap;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.bidimap;TreeBidiMap;true;TreeBidiMap;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.bidimap;UnmodifiableBidiMap;true;unmodifiableBidiMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.bidimap;UnmodifiableBidiMap;true;unmodifiableBidiMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.bidimap;UnmodifiableOrderedBidiMap;true;inverseOrderedBidiMap;;;MapKey of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections.bidimap;UnmodifiableOrderedBidiMap;true;inverseOrderedBidiMap;;;MapValue of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections.bidimap;UnmodifiableOrderedBidiMap;true;unmodifiableOrderedBidiMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.bidimap;UnmodifiableOrderedBidiMap;true;unmodifiableOrderedBidiMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.bidimap;UnmodifiableSortedBidiMap;true;unmodifiableSortedBidiMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.bidimap;UnmodifiableSortedBidiMap;true;unmodifiableSortedBidiMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.bidimap;AbstractBidiMapDecorator;true;AbstractBidiMapDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.bidimap;AbstractBidiMapDecorator;true;AbstractBidiMapDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapKey of Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections4.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapKey of Argument[2];MapValue of Argument[-1];valueorg.apache.commons.collections4.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapValue of Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections4.bidimap;AbstractDualBidiMap;true;AbstractDualBidiMap;;;MapValue of Argument[2];MapKey of Argument[-1];valueorg.apache.commons.collections4.bidimap;AbstractOrderedBidiMapDecorator;true;AbstractOrderedBidiMapDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.bidimap;AbstractOrderedBidiMapDecorator;true;AbstractOrderedBidiMapDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.bidimap;AbstractSortedBidiMapDecorator;true;AbstractSortedBidiMapDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.bidimap;AbstractSortedBidiMapDecorator;true;AbstractSortedBidiMapDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.bidimap;DualHashBidiMap;true;DualHashBidiMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.bidimap;DualHashBidiMap;true;DualHashBidiMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.bidimap;DualLinkedHashBidiMap;true;DualLinkedHashBidiMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.bidimap;DualLinkedHashBidiMap;true;DualLinkedHashBidiMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.bidimap;DualTreeBidiMap;true;DualTreeBidiMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.bidimap;DualTreeBidiMap;true;DualTreeBidiMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.bidimap;DualTreeBidiMap;true;inverseOrderedBidiMap;;;MapKey of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections4.bidimap;DualTreeBidiMap;true;inverseOrderedBidiMap;;;MapValue of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections4.bidimap;DualTreeBidiMap;true;inverseSortedBidiMap;;;MapKey of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections4.bidimap;DualTreeBidiMap;true;inverseSortedBidiMap;;;MapValue of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections4.bidimap;TreeBidiMap;true;TreeBidiMap;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.bidimap;TreeBidiMap;true;TreeBidiMap;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.bidimap;UnmodifiableBidiMap;true;unmodifiableBidiMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.bidimap;UnmodifiableBidiMap;true;unmodifiableBidiMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.bidimap;UnmodifiableOrderedBidiMap;true;inverseOrderedBidiMap;;;MapKey of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections4.bidimap;UnmodifiableOrderedBidiMap;true;inverseOrderedBidiMap;;;MapValue of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections4.bidimap;UnmodifiableOrderedBidiMap;true;unmodifiableOrderedBidiMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.bidimap;UnmodifiableOrderedBidiMap;true;unmodifiableOrderedBidiMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.bidimap;UnmodifiableSortedBidiMap;true;unmodifiableSortedBidiMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.bidimap;UnmodifiableSortedBidiMap;true;unmodifiableSortedBidiMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;addAll;(Collection,Enumeration);;Element of Argument[1];Element of Argument[0];valueorg.apache.commons.collections;CollectionUtils;true;addAll;(Collection,Iterable);;Element of Argument[1];Element of Argument[0];valueorg.apache.commons.collections;CollectionUtils;true;addAll;(Collection,Iterator);;Element of Argument[1];Element of Argument[0];valueorg.apache.commons.collections;CollectionUtils;true;addAll;(Collection,Object[]);;ArrayElement of Argument[1];Element of Argument[0];valueorg.apache.commons.collections;CollectionUtils;true;addIgnoreNull;;;Argument[1];Element of Argument[0];valueorg.apache.commons.collections;CollectionUtils;true;collate;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;collate;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;disjunction;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;disjunction;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;emptyIfNull;;;Argument[0];ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;extractSingleton;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;find;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;get;(Iterable,int);;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;get;(Iterator,int);;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;get;(Map,int);;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;get;(Map,int);;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;get;(Object,int);;ArrayElement of Argument[0];ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;get;(Object,int);;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;get;(Object,int);;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;get;(Object,int);;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;getCardinalityMap;;;Element of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;intersection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;intersection;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;permutations;;;Element of Argument[0];Element of Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;predicatedCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;removeAll;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;retainAll;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;select;(Iterable,Predicate);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;select;(Iterable,Predicate,Collection);;Argument[2];ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;select;(Iterable,Predicate,Collection);;Element of Argument[0];Element of Argument[2];valueorg.apache.commons.collections;CollectionUtils;true;select;(Iterable,Predicate,Collection,Collection);;Argument[2];ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;select;(Iterable,Predicate,Collection,Collection);;Element of Argument[0];Element of Argument[2];valueorg.apache.commons.collections;CollectionUtils;true;select;(Iterable,Predicate,Collection,Collection);;Element of Argument[0];Element of Argument[3];valueorg.apache.commons.collections;CollectionUtils;true;selectRejected;(Iterable,Predicate);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;selectRejected;(Iterable,Predicate,Collection);;Argument[2];ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;selectRejected;(Iterable,Predicate,Collection);;Element of Argument[0];Element of Argument[2];valueorg.apache.commons.collections;CollectionUtils;true;subtract;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;synchronizedCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;transformingCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;union;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;union;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;CollectionUtils;true;unmodifiableCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;addAll;(Collection,Enumeration);;Element of Argument[1];Element of Argument[0];valueorg.apache.commons.collections4;CollectionUtils;true;addAll;(Collection,Iterable);;Element of Argument[1];Element of Argument[0];valueorg.apache.commons.collections4;CollectionUtils;true;addAll;(Collection,Iterator);;Element of Argument[1];Element of Argument[0];valueorg.apache.commons.collections4;CollectionUtils;true;addAll;(Collection,Object[]);;ArrayElement of Argument[1];Element of Argument[0];valueorg.apache.commons.collections4;CollectionUtils;true;addIgnoreNull;;;Argument[1];Element of Argument[0];valueorg.apache.commons.collections4;CollectionUtils;true;collate;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;collate;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;disjunction;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;disjunction;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;emptyIfNull;;;Argument[0];ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;extractSingleton;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;find;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;get;(Iterable,int);;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;get;(Iterator,int);;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;get;(Map,int);;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;get;(Map,int);;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;get;(Object,int);;ArrayElement of Argument[0];ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;get;(Object,int);;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;get;(Object,int);;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;get;(Object,int);;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;getCardinalityMap;;;Element of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;intersection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;intersection;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;permutations;;;Element of Argument[0];Element of Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;predicatedCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;removeAll;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;retainAll;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;select;(Iterable,Predicate);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;select;(Iterable,Predicate,Collection);;Argument[2];ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;select;(Iterable,Predicate,Collection);;Element of Argument[0];Element of Argument[2];valueorg.apache.commons.collections4;CollectionUtils;true;select;(Iterable,Predicate,Collection,Collection);;Argument[2];ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;select;(Iterable,Predicate,Collection,Collection);;Element of Argument[0];Element of Argument[2];valueorg.apache.commons.collections4;CollectionUtils;true;select;(Iterable,Predicate,Collection,Collection);;Element of Argument[0];Element of Argument[3];valueorg.apache.commons.collections4;CollectionUtils;true;selectRejected;(Iterable,Predicate);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;selectRejected;(Iterable,Predicate,Collection);;Argument[2];ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;selectRejected;(Iterable,Predicate,Collection);;Element of Argument[0];Element of Argument[2];valueorg.apache.commons.collections4;CollectionUtils;true;subtract;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;synchronizedCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;transformingCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;union;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;union;;;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;CollectionUtils;true;unmodifiableCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;arrayIterator;;;ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;arrayListIterator;;;ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;asEnumeration;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;asIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;asIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;asMultipleUseIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;boundedIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;chainedIterator;(Collection);;Element of Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;chainedIterator;(Iterator,Iterator);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;chainedIterator;(Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;chainedIterator;(Iterator[]);;Element of ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;collatedIterator;(Comparator,Collection);;Element of Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;collatedIterator;(Comparator,Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;collatedIterator;(Comparator,Iterator,Iterator);;Element of Argument[2];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;collatedIterator;(Comparator,Iterator[]);;Element of ArrayElement of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;filteredIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;filteredListIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;find;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;first;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;forEachButLast;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;get;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;getIterator;;;Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;getIterator;;;ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;getIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;getIterator;;;MapValue of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;loopingIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;loopingListIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;peekingIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;pushbackIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;singletonIterator;;;Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;singletonListIterator;;;Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;skippingIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;toArray;;;Element of Argument[0];ArrayElement of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;toList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;toListIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;toString;;;Argument[2];ReturnValue;taintorg.apache.commons.collections;IteratorUtils;true;toString;;;Argument[3];ReturnValue;taintorg.apache.commons.collections;IteratorUtils;true;toString;;;Argument[4];ReturnValue;taintorg.apache.commons.collections;IteratorUtils;true;unmodifiableIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;unmodifiableListIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;unmodifiableMapIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;unmodifiableMapIterator;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;zippingIterator;(Iterator,Iterator);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;zippingIterator;(Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;zippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;zippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;zippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[2];Element of ReturnValue;valueorg.apache.commons.collections;IteratorUtils;true;zippingIterator;(Iterator[]);;Element of ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;arrayIterator;;;ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;arrayListIterator;;;ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;asEnumeration;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;asIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;asIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;asMultipleUseIterable;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;boundedIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;chainedIterator;(Collection);;Element of Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;chainedIterator;(Iterator,Iterator);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;chainedIterator;(Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;chainedIterator;(Iterator[]);;Element of ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;collatedIterator;(Comparator,Collection);;Element of Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;collatedIterator;(Comparator,Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;collatedIterator;(Comparator,Iterator,Iterator);;Element of Argument[2];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;collatedIterator;(Comparator,Iterator[]);;Element of ArrayElement of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;filteredIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;filteredListIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;find;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;first;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;forEachButLast;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;get;;;Element of Argument[0];ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;getIterator;;;Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;getIterator;;;ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;getIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;getIterator;;;MapValue of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;loopingIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;loopingListIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;peekingIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;pushbackIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;singletonIterator;;;Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;singletonListIterator;;;Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;skippingIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;toArray;;;Element of Argument[0];ArrayElement of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;toList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;toListIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;toString;;;Argument[2];ReturnValue;taintorg.apache.commons.collections4;IteratorUtils;true;toString;;;Argument[3];ReturnValue;taintorg.apache.commons.collections4;IteratorUtils;true;toString;;;Argument[4];ReturnValue;taintorg.apache.commons.collections4;IteratorUtils;true;unmodifiableIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;unmodifiableListIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;unmodifiableMapIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;unmodifiableMapIterator;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;zippingIterator;(Iterator,Iterator);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;zippingIterator;(Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;zippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;zippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[1];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;zippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[2];Element of ReturnValue;valueorg.apache.commons.collections4;IteratorUtils;true;zippingIterator;(Iterator[]);;Element of ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.collection;AbstractCollectionDecorator;true;AbstractCollectionDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.collection;AbstractCollectionDecorator;true;decorated;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.collection;AbstractCollectionDecorator;true;setCollection;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.collection;CompositeCollection$CollectionMutator;true;add;;;Argument[2];Element of Argument[0];valueorg.apache.commons.collections.collection;CompositeCollection$CollectionMutator;true;add;;;Argument[2];Element of Element of Argument[1];valueorg.apache.commons.collections.collection;CompositeCollection$CollectionMutator;true;addAll;;;Element of Argument[2];Element of Argument[0];valueorg.apache.commons.collections.collection;CompositeCollection$CollectionMutator;true;addAll;;;Element of Argument[2];Element of Element of Argument[1];valueorg.apache.commons.collections.collection;CompositeCollection;true;CompositeCollection;(Collection);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.collection;CompositeCollection;true;CompositeCollection;(Collection,Collection);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.collection;CompositeCollection;true;CompositeCollection;(Collection,Collection);;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.collection;CompositeCollection;true;CompositeCollection;(Collection[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.collection;CompositeCollection;true;addComposited;(Collection);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.collection;CompositeCollection;true;addComposited;(Collection,Collection);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.collection;CompositeCollection;true;addComposited;(Collection,Collection);;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.collection;CompositeCollection;true;addComposited;(Collection[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.collection;CompositeCollection;true;getCollections;;;Element of Argument[-1];Element of Element of ReturnValue;valueorg.apache.commons.collections.collection;CompositeCollection;true;toCollection;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.collection;IndexedCollection;true;IndexedCollection;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.collection;IndexedCollection;true;get;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections.collection;IndexedCollection;true;nonUniqueIndexedCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.collection;IndexedCollection;true;uniqueIndexedCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.collection;IndexedCollection;true;values;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.collection;PredicatedCollection$Builder;true;add;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.collection;PredicatedCollection$Builder;true;addAll;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.collection;PredicatedCollection$Builder;true;createPredicatedBag;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.collection;PredicatedCollection$Builder;true;createPredicatedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.collection;PredicatedCollection$Builder;true;createPredicatedList;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.collection;PredicatedCollection$Builder;true;createPredicatedList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.collection;PredicatedCollection$Builder;true;createPredicatedMultiSet;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.collection;PredicatedCollection$Builder;true;createPredicatedMultiSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.collection;PredicatedCollection$Builder;true;createPredicatedQueue;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.collection;PredicatedCollection$Builder;true;createPredicatedQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.collection;PredicatedCollection$Builder;true;createPredicatedSet;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.collection;PredicatedCollection$Builder;true;createPredicatedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.collection;PredicatedCollection$Builder;true;rejectedElements;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.collection;PredicatedCollection;true;predicatedCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.collection;SynchronizedCollection;true;synchronizedCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.collection;TransformedCollection;true;transformingCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.collection;UnmodifiableBoundedCollection;true;unmodifiableBoundedCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.collection;UnmodifiableCollection;true;unmodifiableCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.collection;AbstractCollectionDecorator;true;AbstractCollectionDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.collection;AbstractCollectionDecorator;true;decorated;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.collection;AbstractCollectionDecorator;true;setCollection;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.collection;CompositeCollection$CollectionMutator;true;add;;;Argument[2];Element of Argument[0];valueorg.apache.commons.collections4.collection;CompositeCollection$CollectionMutator;true;add;;;Argument[2];Element of Element of Argument[1];valueorg.apache.commons.collections4.collection;CompositeCollection$CollectionMutator;true;addAll;;;Element of Argument[2];Element of Argument[0];valueorg.apache.commons.collections4.collection;CompositeCollection$CollectionMutator;true;addAll;;;Element of Argument[2];Element of Element of Argument[1];valueorg.apache.commons.collections4.collection;CompositeCollection;true;CompositeCollection;(Collection);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.collection;CompositeCollection;true;CompositeCollection;(Collection,Collection);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.collection;CompositeCollection;true;CompositeCollection;(Collection,Collection);;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.collection;CompositeCollection;true;CompositeCollection;(Collection[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.collection;CompositeCollection;true;addComposited;(Collection);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.collection;CompositeCollection;true;addComposited;(Collection,Collection);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.collection;CompositeCollection;true;addComposited;(Collection,Collection);;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.collection;CompositeCollection;true;addComposited;(Collection[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.collection;CompositeCollection;true;getCollections;;;Element of Argument[-1];Element of Element of ReturnValue;valueorg.apache.commons.collections4.collection;CompositeCollection;true;toCollection;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.collection;IndexedCollection;true;IndexedCollection;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.collection;IndexedCollection;true;get;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.collection;IndexedCollection;true;nonUniqueIndexedCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.collection;IndexedCollection;true;uniqueIndexedCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.collection;IndexedCollection;true;values;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.collection;PredicatedCollection$Builder;true;add;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.collection;PredicatedCollection$Builder;true;addAll;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.collection;PredicatedCollection$Builder;true;createPredicatedBag;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.collection;PredicatedCollection$Builder;true;createPredicatedBag;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.collection;PredicatedCollection$Builder;true;createPredicatedList;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.collection;PredicatedCollection$Builder;true;createPredicatedList;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.collection;PredicatedCollection$Builder;true;createPredicatedMultiSet;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.collection;PredicatedCollection$Builder;true;createPredicatedMultiSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.collection;PredicatedCollection$Builder;true;createPredicatedQueue;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.collection;PredicatedCollection$Builder;true;createPredicatedQueue;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.collection;PredicatedCollection$Builder;true;createPredicatedSet;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.collection;PredicatedCollection$Builder;true;createPredicatedSet;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.collection;PredicatedCollection$Builder;true;rejectedElements;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.collection;PredicatedCollection;true;predicatedCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.collection;SynchronizedCollection;true;synchronizedCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.collection;TransformedCollection;true;transformingCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.collection;UnmodifiableBoundedCollection;true;unmodifiableBoundedCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.collection;UnmodifiableCollection;true;unmodifiableCollection;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;emptyIfNull;;;Argument[0];ReturnValue;valueorg.apache.commons.collections;MapUtils;true;fixedSizeMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;fixedSizeMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;fixedSizeSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;fixedSizeSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;getMap;;;Argument[2];ReturnValue;valueorg.apache.commons.collections;MapUtils;true;getMap;;;MapValue of Argument[0];ReturnValue;valueorg.apache.commons.collections;MapUtils;true;getObject;;;Argument[2];ReturnValue;valueorg.apache.commons.collections;MapUtils;true;getObject;;;MapValue of Argument[0];ReturnValue;valueorg.apache.commons.collections;MapUtils;true;getString;;;Argument[2];ReturnValue;valueorg.apache.commons.collections;MapUtils;true;getString;;;MapValue of Argument[0];ReturnValue;valueorg.apache.commons.collections;MapUtils;true;invertMap;;;MapKey of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;invertMap;;;MapValue of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;iterableMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;iterableMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;iterableSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;iterableSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;lazyMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;lazyMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;lazySortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;lazySortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;multiValueMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;multiValueMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;orderedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;orderedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;populateMap;(Map,Iterable,Transformer);;Element of Argument[1];MapValue of Argument[0];valueorg.apache.commons.collections;MapUtils;true;populateMap;(MultiMap,Iterable,Transformer);;Element of Argument[1];Element of MapValue of Argument[0];valueorg.apache.commons.collections;MapUtils;true;predicatedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;predicatedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;predicatedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;predicatedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapKey of Argument[0];valueorg.apache.commons.collections;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapValue of Argument[0];valueorg.apache.commons.collections;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapKey of Argument[0];valueorg.apache.commons.collections;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapValue of Argument[0];valueorg.apache.commons.collections;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;putAll;;;MapKey of ArrayElement of Argument[1];MapKey of Argument[0];valueorg.apache.commons.collections;MapUtils;true;putAll;;;MapKey of ArrayElement of Argument[1];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;putAll;;;MapValue of ArrayElement of Argument[1];MapValue of Argument[0];valueorg.apache.commons.collections;MapUtils;true;putAll;;;MapValue of ArrayElement of Argument[1];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;safeAddToMap;;;Argument[1];MapKey of Argument[0];valueorg.apache.commons.collections;MapUtils;true;safeAddToMap;;;Argument[2];MapValue of Argument[0];valueorg.apache.commons.collections;MapUtils;true;synchronizedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;synchronizedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;synchronizedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;synchronizedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;toMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;toMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;transformedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;transformedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;transformedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;transformedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;unmodifiableMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;unmodifiableMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;unmodifiableSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections;MapUtils;true;unmodifiableSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;emptyIfNull;;;Argument[0];ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;fixedSizeMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;fixedSizeMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;fixedSizeSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;fixedSizeSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;getMap;;;Argument[2];ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;getMap;;;MapValue of Argument[0];ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;getObject;;;Argument[2];ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;getObject;;;MapValue of Argument[0];ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;getString;;;Argument[2];ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;getString;;;MapValue of Argument[0];ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;invertMap;;;MapKey of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;invertMap;;;MapValue of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;iterableMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;iterableMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;iterableSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;iterableSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;lazyMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;lazyMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;lazySortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;lazySortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;multiValueMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;multiValueMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;orderedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;orderedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;populateMap;(Map,Iterable,Transformer);;Element of Argument[1];MapValue of Argument[0];valueorg.apache.commons.collections4;MapUtils;true;populateMap;(MultiMap,Iterable,Transformer);;Element of Argument[1];Element of MapValue of Argument[0];valueorg.apache.commons.collections4;MapUtils;true;predicatedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;predicatedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;predicatedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;predicatedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapKey of Argument[0];valueorg.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapValue of Argument[0];valueorg.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of Argument[1];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapKey of Argument[0];valueorg.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapValue of Argument[0];valueorg.apache.commons.collections4;MapUtils;true;putAll;;;ArrayElement of ArrayElement of Argument[1];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;putAll;;;MapKey of ArrayElement of Argument[1];MapKey of Argument[0];valueorg.apache.commons.collections4;MapUtils;true;putAll;;;MapKey of ArrayElement of Argument[1];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;putAll;;;MapValue of ArrayElement of Argument[1];MapValue of Argument[0];valueorg.apache.commons.collections4;MapUtils;true;putAll;;;MapValue of ArrayElement of Argument[1];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;safeAddToMap;;;Argument[1];MapKey of Argument[0];valueorg.apache.commons.collections4;MapUtils;true;safeAddToMap;;;Argument[2];MapValue of Argument[0];valueorg.apache.commons.collections4;MapUtils;true;synchronizedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;synchronizedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;synchronizedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;synchronizedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;toMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;toMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;transformedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;transformedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;transformedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;transformedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;unmodifiableMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;unmodifiableMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;unmodifiableSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4;MapUtils;true;unmodifiableSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.keyvalue;AbstractKeyValue;true;AbstractKeyValue;;;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.keyvalue;AbstractKeyValue;true;AbstractKeyValue;;;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections.keyvalue;AbstractKeyValue;true;setKey;;;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.keyvalue;AbstractKeyValue;true;setKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections.keyvalue;AbstractKeyValue;true;setValue;;;Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.keyvalue;AbstractKeyValue;true;setValue;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections.keyvalue;AbstractMapEntry;true;AbstractMapEntry;;;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.keyvalue;AbstractMapEntry;true;AbstractMapEntry;;;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections.keyvalue;AbstractMapEntryDecorator;true;AbstractMapEntryDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.keyvalue;AbstractMapEntryDecorator;true;AbstractMapEntryDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.keyvalue;AbstractMapEntryDecorator;true;getMapEntry;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections.keyvalue;AbstractMapEntryDecorator;true;getMapEntry;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Object,Object);;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Object,Object);;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections.keyvalue;DefaultKeyValue;true;toMapEntry;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections.keyvalue;DefaultKeyValue;true;toMapEntry;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Object,Object);;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Object,Object);;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object,Object);;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object,Object);;Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object);;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object);;Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object);;Argument[2];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object);;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object);;Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object);;Argument[2];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object);;Argument[3];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[2];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[3];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[4];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object[]);;ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;MultiKey;(Object[],boolean);;ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.keyvalue;MultiKey;true;getKey;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections.keyvalue;MultiKey;true;getKeys;;;Element of Argument[-1];ArrayElement of ReturnValue;valueorg.apache.commons.collections.keyvalue;TiedMapEntry;true;TiedMapEntry;;;Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections.keyvalue;TiedMapEntry;true;TiedMapEntry;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Object,Object);;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Object,Object);;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections4.keyvalue;AbstractKeyValue;true;AbstractKeyValue;;;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.keyvalue;AbstractKeyValue;true;AbstractKeyValue;;;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setKey;;;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setValue;;;Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.keyvalue;AbstractKeyValue;true;setValue;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.keyvalue;AbstractMapEntry;true;AbstractMapEntry;;;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.keyvalue;AbstractMapEntry;true;AbstractMapEntry;;;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections4.keyvalue;AbstractMapEntryDecorator;true;AbstractMapEntryDecorator;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.keyvalue;AbstractMapEntryDecorator;true;AbstractMapEntryDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.keyvalue;AbstractMapEntryDecorator;true;getMapEntry;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections4.keyvalue;AbstractMapEntryDecorator;true;getMapEntry;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections4.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Object,Object);;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.keyvalue;DefaultKeyValue;true;DefaultKeyValue;(Object,Object);;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections4.keyvalue;DefaultKeyValue;true;toMapEntry;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections4.keyvalue;DefaultKeyValue;true;toMapEntry;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections4.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Object,Object);;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.keyvalue;DefaultMapEntry;true;DefaultMapEntry;(Object,Object);;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object,Object);;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object,Object);;Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object);;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object);;Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object);;Argument[2];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object);;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object);;Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object);;Argument[2];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object);;Argument[3];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[2];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[3];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object,Object,Object,Object,Object);;Argument[4];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object[]);;ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;MultiKey;(Object[],boolean);;ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.keyvalue;MultiKey;true;getKey;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.keyvalue;MultiKey;true;getKeys;;;Element of Argument[-1];ArrayElement of ReturnValue;valueorg.apache.commons.collections4.keyvalue;TiedMapEntry;true;TiedMapEntry;;;Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections4.keyvalue;TiedMapEntry;true;TiedMapEntry;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Object,Object);;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.keyvalue;UnmodifiableMapEntry;true;UnmodifiableMapEntry;(Object,Object);;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections;ArrayStack;true;peek;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections;ArrayStack;true;pop;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections;ArrayStack;true;push;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections;ArrayStack;true;push;;;Argument[0];ReturnValue;valueorg.apache.commons.collections;Bag;true;add;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections;Bag;true;uniqueSet;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;BidiMap;true;getKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections;BidiMap;true;inverseBidiMap;;;MapKey of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections;BidiMap;true;inverseBidiMap;;;MapValue of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections;BidiMap;true;removeValue;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;append;(Iterable);;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;append;(Iterable);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;append;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;append;(Object[]);;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;asEnumeration;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;collate;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;collate;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;copyInto;;;Element of Argument[-1];Element of Argument[0];valueorg.apache.commons.collections;FluentIterable;true;eval;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;filter;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;get;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;limit;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;loop;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;of;(Iterable);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;of;(Object);;Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;of;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;reverse;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;skip;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;toArray;;;Element of Argument[-1];ArrayElement of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;toList;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;unique;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;unmodifiable;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;zip;(Iterable);;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;zip;(Iterable);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;zip;(Iterable[]);;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;FluentIterable;true;zip;(Iterable[]);;Element of ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections;Get;true;entrySet;;;MapKey of Argument[-1];MapKey of Element of ReturnValue;valueorg.apache.commons.collections;Get;true;entrySet;;;MapValue of Argument[-1];MapValue of Element of ReturnValue;valueorg.apache.commons.collections;Get;true;get;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections;Get;true;keySet;();;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;Get;true;remove;(Object);;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections;Get;true;values;();;MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;IterableGet;true;mapIterator;;;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;IterableGet;true;mapIterator;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections;KeyValue;true;getKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections;KeyValue;true;getValue;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections;MapIterator;true;getKey;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections;MapIterator;true;getValue;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections;MapIterator;true;setValue;;;Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections;MapIterator;true;setValue;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections;MultiMap;true;get;;;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;MultiMap;true;put;;;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections;MultiMap;true;put;;;Argument[1];Element of MapValue of Argument[-1];valueorg.apache.commons.collections;MultiMap;true;values;;;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;MultiSet$Entry;true;getElement;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections;MultiSet;true;add;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections;MultiSet;true;entrySet;;;Element of Argument[-1];Element of Element of ReturnValue;valueorg.apache.commons.collections;MultiSet;true;uniqueSet;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;MultiValuedMap;true;asMap;;;Element of MapValue of Argument[-1];Element of MapValue of ReturnValue;valueorg.apache.commons.collections;MultiValuedMap;true;asMap;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections;MultiValuedMap;true;entries;;;Element of MapValue of Argument[-1];MapValue of Element of ReturnValue;valueorg.apache.commons.collections;MultiValuedMap;true;entries;;;MapKey of Argument[-1];MapKey of Element of ReturnValue;valueorg.apache.commons.collections;MultiValuedMap;true;get;;;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;MultiValuedMap;true;keySet;;;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;MultiValuedMap;true;keys;;;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;MultiValuedMap;true;mapIterator;;;Element of MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections;MultiValuedMap;true;mapIterator;;;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;MultiValuedMap;true;put;;;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections;MultiValuedMap;true;put;;;Argument[1];Element of MapValue of Argument[-1];valueorg.apache.commons.collections;MultiValuedMap;true;putAll;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections;MultiValuedMap;true;putAll;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections;MultiValuedMap;true;putAll;(MultiValuedMap);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections;MultiValuedMap;true;putAll;(MultiValuedMap);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections;MultiValuedMap;true;putAll;(Object,Iterable);;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections;MultiValuedMap;true;putAll;(Object,Iterable);;Element of Argument[1];Element of MapValue of Argument[-1];valueorg.apache.commons.collections;MultiValuedMap;true;remove;;;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;MultiValuedMap;true;values;;;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections;OrderedIterator;true;previous;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections;OrderedMap;true;firstKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections;OrderedMap;true;lastKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections;OrderedMap;true;nextKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections;OrderedMap;true;previousKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections;Put;true;put;;;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections;Put;true;put;;;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections;Put;true;put;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections;Put;true;putAll;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections;Put;true;putAll;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections;SortedBag;true;first;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections;SortedBag;true;last;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections;Trie;true;prefixMap;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections;Trie;true;prefixMap;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections4;ArrayStack;true;peek;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;ArrayStack;true;pop;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;ArrayStack;true;push;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4;ArrayStack;true;push;;;Argument[0];ReturnValue;valueorg.apache.commons.collections4;Bag;true;add;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4;Bag;true;uniqueSet;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;BidiMap;true;getKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;BidiMap;true;inverseBidiMap;;;MapKey of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections4;BidiMap;true;inverseBidiMap;;;MapValue of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections4;BidiMap;true;removeValue;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;append;(Iterable);;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;append;(Iterable);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;append;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;append;(Object[]);;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;asEnumeration;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;collate;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;collate;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;copyInto;;;Element of Argument[-1];Element of Argument[0];valueorg.apache.commons.collections4;FluentIterable;true;eval;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;filter;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;get;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;limit;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;loop;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;of;(Iterable);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;of;(Object);;Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;of;(Object[]);;ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;reverse;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;skip;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;toArray;;;Element of Argument[-1];ArrayElement of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;toList;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;unique;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;unmodifiable;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;zip;(Iterable);;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;zip;(Iterable);;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;zip;(Iterable[]);;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;FluentIterable;true;zip;(Iterable[]);;Element of ArrayElement of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4;Get;true;entrySet;;;MapKey of Argument[-1];MapKey of Element of ReturnValue;valueorg.apache.commons.collections4;Get;true;entrySet;;;MapValue of Argument[-1];MapValue of Element of ReturnValue;valueorg.apache.commons.collections4;Get;true;get;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;Get;true;keySet;();;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;Get;true;remove;(Object);;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;Get;true;values;();;MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;IterableGet;true;mapIterator;;;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;IterableGet;true;mapIterator;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections4;KeyValue;true;getKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;KeyValue;true;getValue;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;MapIterator;true;getKey;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;MapIterator;true;getValue;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;MapIterator;true;setValue;;;Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4;MapIterator;true;setValue;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;MultiMap;true;get;;;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;MultiMap;true;put;;;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4;MultiMap;true;put;;;Argument[1];Element of MapValue of Argument[-1];valueorg.apache.commons.collections4;MultiMap;true;values;;;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;MultiSet$Entry;true;getElement;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;MultiSet;true;add;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4;MultiSet;true;entrySet;;;Element of Argument[-1];Element of Element of ReturnValue;valueorg.apache.commons.collections4;MultiSet;true;uniqueSet;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;MultiValuedMap;true;asMap;;;Element of MapValue of Argument[-1];Element of MapValue of ReturnValue;valueorg.apache.commons.collections4;MultiValuedMap;true;asMap;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections4;MultiValuedMap;true;entries;;;Element of MapValue of Argument[-1];MapValue of Element of ReturnValue;valueorg.apache.commons.collections4;MultiValuedMap;true;entries;;;MapKey of Argument[-1];MapKey of Element of ReturnValue;valueorg.apache.commons.collections4;MultiValuedMap;true;get;;;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;MultiValuedMap;true;keySet;;;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;MultiValuedMap;true;keys;;;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;MultiValuedMap;true;mapIterator;;;Element of MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections4;MultiValuedMap;true;mapIterator;;;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;MultiValuedMap;true;put;;;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4;MultiValuedMap;true;put;;;Argument[1];Element of MapValue of Argument[-1];valueorg.apache.commons.collections4;MultiValuedMap;true;putAll;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4;MultiValuedMap;true;putAll;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections4;MultiValuedMap;true;putAll;(MultiValuedMap);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections4;MultiValuedMap;true;putAll;(MultiValuedMap);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4;MultiValuedMap;true;putAll;(Object,Iterable);;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4;MultiValuedMap;true;putAll;(Object,Iterable);;Element of Argument[1];Element of MapValue of Argument[-1];valueorg.apache.commons.collections4;MultiValuedMap;true;remove;;;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;MultiValuedMap;true;values;;;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4;OrderedIterator;true;previous;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;OrderedMap;true;firstKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;OrderedMap;true;lastKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;OrderedMap;true;nextKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;OrderedMap;true;previousKey;;;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;Put;true;put;;;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4;Put;true;put;;;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections4;Put;true;put;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;Put;true;putAll;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4;Put;true;putAll;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4;SortedBag;true;first;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;SortedBag;true;last;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4;Trie;true;prefixMap;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections4;Trie;true;prefixMap;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections.iterators;AbstractIteratorDecorator;true;AbstractIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;AbstractListIteratorDecorator;true;AbstractListIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;AbstractListIteratorDecorator;true;getListIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.iterators;AbstractMapIteratorDecorator;true;AbstractMapIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;AbstractMapIteratorDecorator;true;AbstractMapIteratorDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.iterators;AbstractMapIteratorDecorator;true;getMapIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.iterators;AbstractMapIteratorDecorator;true;getMapIterator;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections.iterators;AbstractOrderedMapIteratorDecorator;true;AbstractOrderedMapIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;AbstractOrderedMapIteratorDecorator;true;AbstractOrderedMapIteratorDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.iterators;AbstractOrderedMapIteratorDecorator;true;getOrderedMapIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.iterators;AbstractOrderedMapIteratorDecorator;true;getOrderedMapIterator;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections.iterators;AbstractUntypedIteratorDecorator;true;AbstractUntypedIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;AbstractUntypedIteratorDecorator;true;getIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.iterators;ArrayIterator;true;ArrayIterator;;;ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;ArrayIterator;true;getArray;;;Element of Argument[-1];ArrayElement of ReturnValue;valueorg.apache.commons.collections.iterators;ArrayListIterator;true;ArrayListIterator;;;ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;BoundedIterator;true;BoundedIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;CollatingIterator;true;CollatingIterator;(Comparator,Collection);;Element of Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.iterators;CollatingIterator;true;CollatingIterator;(Comparator,Iterator,Iterator);;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.iterators;CollatingIterator;true;CollatingIterator;(Comparator,Iterator,Iterator);;Element of Argument[2];Element of Argument[-1];valueorg.apache.commons.collections.iterators;CollatingIterator;true;CollatingIterator;(Comparator,Iterator[]);;Element of ArrayElement of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.iterators;CollatingIterator;true;addIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;CollatingIterator;true;getIterators;;;Element of Argument[-1];Element of Element of ReturnValue;valueorg.apache.commons.collections.iterators;CollatingIterator;true;setIterator;;;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.iterators;EnumerationIterator;true;EnumerationIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;EnumerationIterator;true;getEnumeration;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.iterators;EnumerationIterator;true;setEnumeration;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;FilterIterator;true;FilterIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;FilterIterator;true;getIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.iterators;FilterIterator;true;setIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;FilterListIterator;true;FilterListIterator;(ListIterator);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;FilterListIterator;true;FilterListIterator;(ListIterator,Predicate);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;FilterListIterator;true;getListIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.iterators;FilterListIterator;true;setListIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;IteratorChain;true;IteratorChain;(Collection);;Element of Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;IteratorChain;true;IteratorChain;(Iterator);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;IteratorChain;true;IteratorChain;(Iterator,Iterator);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;IteratorChain;true;IteratorChain;(Iterator,Iterator);;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.iterators;IteratorChain;true;IteratorChain;(Iterator[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;IteratorChain;true;addIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;IteratorEnumeration;true;IteratorEnumeration;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;IteratorEnumeration;true;getIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.iterators;IteratorEnumeration;true;setIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;IteratorIterable;true;IteratorIterable;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;ListIteratorWrapper;true;ListIteratorWrapper;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;LoopingIterator;true;LoopingIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;LoopingListIterator;true;LoopingListIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;ObjectArrayIterator;true;ObjectArrayIterator;;;ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;ObjectArrayIterator;true;getArray;;;Element of Argument[-1];ArrayElement of ReturnValue;valueorg.apache.commons.collections.iterators;ObjectArrayListIterator;true;ObjectArrayListIterator;;;ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;PeekingIterator;true;PeekingIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;PeekingIterator;true;element;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections.iterators;PeekingIterator;true;peek;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections.iterators;PeekingIterator;true;peekingIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.iterators;PermutationIterator;true;PermutationIterator;;;Element of Argument[0];Element of Element of Argument[-1];valueorg.apache.commons.collections.iterators;PushbackIterator;true;PushbackIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;PushbackIterator;true;pushback;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;PushbackIterator;true;pushbackIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.iterators;ReverseListIterator;true;ReverseListIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;SingletonIterator;true;SingletonIterator;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;SingletonListIterator;true;SingletonListIterator;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;SkippingIterator;true;SkippingIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;UniqueFilterIterator;true;UniqueFilterIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;UnmodifiableIterator;true;unmodifiableIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.iterators;UnmodifiableListIterator;true;umodifiableListIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.iterators;UnmodifiableMapIterator;true;unmodifiableMapIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.iterators;UnmodifiableMapIterator;true;unmodifiableMapIterator;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.iterators;UnmodifiableOrderedMapIterator;true;unmodifiableOrderedMapIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections.iterators;UnmodifiableOrderedMapIterator;true;unmodifiableOrderedMapIterator;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator);;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[2];Element of Argument[-1];valueorg.apache.commons.collections.iterators;ZippingIterator;true;ZippingIterator;(Iterator[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;AbstractIteratorDecorator;true;AbstractIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;AbstractListIteratorDecorator;true;AbstractListIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;AbstractListIteratorDecorator;true;getListIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.iterators;AbstractMapIteratorDecorator;true;AbstractMapIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;AbstractMapIteratorDecorator;true;AbstractMapIteratorDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.iterators;AbstractMapIteratorDecorator;true;getMapIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.iterators;AbstractMapIteratorDecorator;true;getMapIterator;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections4.iterators;AbstractOrderedMapIteratorDecorator;true;AbstractOrderedMapIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;AbstractOrderedMapIteratorDecorator;true;AbstractOrderedMapIteratorDecorator;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.iterators;AbstractOrderedMapIteratorDecorator;true;getOrderedMapIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.iterators;AbstractOrderedMapIteratorDecorator;true;getOrderedMapIterator;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections4.iterators;AbstractUntypedIteratorDecorator;true;AbstractUntypedIteratorDecorator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;AbstractUntypedIteratorDecorator;true;getIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.iterators;ArrayIterator;true;ArrayIterator;;;ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;ArrayIterator;true;getArray;;;Element of Argument[-1];ArrayElement of ReturnValue;valueorg.apache.commons.collections4.iterators;ArrayListIterator;true;ArrayListIterator;;;ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;BoundedIterator;true;BoundedIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;CollatingIterator;true;CollatingIterator;(Comparator,Collection);;Element of Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;CollatingIterator;true;CollatingIterator;(Comparator,Iterator,Iterator);;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;CollatingIterator;true;CollatingIterator;(Comparator,Iterator,Iterator);;Element of Argument[2];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;CollatingIterator;true;CollatingIterator;(Comparator,Iterator[]);;Element of ArrayElement of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;CollatingIterator;true;addIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;CollatingIterator;true;getIterators;;;Element of Argument[-1];Element of Element of ReturnValue;valueorg.apache.commons.collections4.iterators;CollatingIterator;true;setIterator;;;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;EnumerationIterator;true;EnumerationIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;EnumerationIterator;true;getEnumeration;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.iterators;EnumerationIterator;true;setEnumeration;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;FilterIterator;true;FilterIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;FilterIterator;true;getIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.iterators;FilterIterator;true;setIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;FilterListIterator;true;FilterListIterator;(ListIterator);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;FilterListIterator;true;FilterListIterator;(ListIterator,Predicate);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;FilterListIterator;true;getListIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.iterators;FilterListIterator;true;setListIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;IteratorChain;true;IteratorChain;(Collection);;Element of Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;IteratorChain;true;IteratorChain;(Iterator);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;IteratorChain;true;IteratorChain;(Iterator,Iterator);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;IteratorChain;true;IteratorChain;(Iterator,Iterator);;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;IteratorChain;true;IteratorChain;(Iterator[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;IteratorChain;true;addIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;IteratorEnumeration;true;IteratorEnumeration;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;IteratorEnumeration;true;getIterator;;;Element of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.iterators;IteratorEnumeration;true;setIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;IteratorIterable;true;IteratorIterable;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;ListIteratorWrapper;true;ListIteratorWrapper;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;LoopingIterator;true;LoopingIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;LoopingListIterator;true;LoopingListIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;ObjectArrayIterator;true;ObjectArrayIterator;;;ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;ObjectArrayIterator;true;getArray;;;Element of Argument[-1];ArrayElement of ReturnValue;valueorg.apache.commons.collections4.iterators;ObjectArrayListIterator;true;ObjectArrayListIterator;;;ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;PeekingIterator;true;PeekingIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;PeekingIterator;true;element;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.iterators;PeekingIterator;true;peek;;;Element of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.iterators;PeekingIterator;true;peekingIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.iterators;PermutationIterator;true;PermutationIterator;;;Element of Argument[0];Element of Element of Argument[-1];valueorg.apache.commons.collections4.iterators;PushbackIterator;true;PushbackIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;PushbackIterator;true;pushback;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;PushbackIterator;true;pushbackIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.iterators;ReverseListIterator;true;ReverseListIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;SingletonIterator;true;SingletonIterator;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;SingletonListIterator;true;SingletonListIterator;;;Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;SkippingIterator;true;SkippingIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;UniqueFilterIterator;true;UniqueFilterIterator;;;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;UnmodifiableIterator;true;unmodifiableIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.iterators;UnmodifiableListIterator;true;umodifiableListIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.iterators;UnmodifiableMapIterator;true;unmodifiableMapIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.iterators;UnmodifiableMapIterator;true;unmodifiableMapIterator;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.iterators;UnmodifiableOrderedMapIterator;true;unmodifiableOrderedMapIterator;;;Element of Argument[0];Element of ReturnValue;valueorg.apache.commons.collections4.iterators;UnmodifiableOrderedMapIterator;true;unmodifiableOrderedMapIterator;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator);;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[1];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;ZippingIterator;true;ZippingIterator;(Iterator,Iterator,Iterator);;Element of Argument[2];Element of Argument[-1];valueorg.apache.commons.collections4.iterators;ZippingIterator;true;ZippingIterator;(Iterator[]);;Element of ArrayElement of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.map;AbstractHashedMap;true;AbstractHashedMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;AbstractHashedMap;true;AbstractHashedMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;AbstractLinkedMap;true;AbstractLinkedMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;AbstractLinkedMap;true;AbstractLinkedMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;AbstractMapDecorator;true;AbstractMapDecorator;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;AbstractMapDecorator;true;AbstractMapDecorator;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;AbstractMapDecorator;true;decorated;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections.map;AbstractMapDecorator;true;decorated;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections.map;AbstractOrderedMapDecorator;true;AbstractOrderedMapDecorator;(OrderedMap);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;AbstractOrderedMapDecorator;true;AbstractOrderedMapDecorator;(OrderedMap);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;AbstractSortedMapDecorator;true;AbstractSortedMapDecorator;(SortedMap);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;AbstractSortedMapDecorator;true;AbstractSortedMapDecorator;(SortedMap);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;CaseInsensitiveMap;true;CaseInsensitiveMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;CaseInsensitiveMap;true;CaseInsensitiveMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;CompositeMap;(Map,Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;CompositeMap;(Map,Map);;MapKey of Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;CompositeMap;(Map,Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;CompositeMap;(Map,Map);;MapValue of Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;CompositeMap;(Map,Map,MapMutator);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;CompositeMap;(Map,Map,MapMutator);;MapKey of Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;CompositeMap;(Map,Map,MapMutator);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;CompositeMap;(Map,Map,MapMutator);;MapValue of Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;CompositeMap;(Map[]);;MapKey of ArrayElement of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;CompositeMap;(Map[]);;MapValue of ArrayElement of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;CompositeMap;(Map[],MapMutator);;MapKey of ArrayElement of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;CompositeMap;(Map[],MapMutator);;MapValue of ArrayElement of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;addComposited;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;addComposited;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;CompositeMap;true;removeComposited;;;Argument[0];ReturnValue;valueorg.apache.commons.collections.map;CompositeMap;true;removeComposited;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections.map;CompositeMap;true;removeComposited;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections.map;DefaultedMap;true;DefaultedMap;(Object);;Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;DefaultedMap;true;defaultedMap;(Map,Object);;Argument[1];MapValue of ReturnValue;valueorg.apache.commons.collections.map;DefaultedMap;true;defaultedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.map;DefaultedMap;true;defaultedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.map;EntrySetToMapIteratorAdapter;true;EntrySetToMapIteratorAdapter;;;MapKey of Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections.map;EntrySetToMapIteratorAdapter;true;EntrySetToMapIteratorAdapter;;;MapValue of Element of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;FixedSizeMap;true;fixedSizeMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.map;FixedSizeMap;true;fixedSizeMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.map;FixedSizeSortedMap;true;fixedSizeSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.map;FixedSizeSortedMap;true;fixedSizeSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.map;Flat3Map;true;Flat3Map;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;Flat3Map;true;Flat3Map;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;HashedMap;true;HashedMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;HashedMap;true;HashedMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;LRUMap;true;LRUMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;LRUMap;true;LRUMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;LRUMap;true;LRUMap;(Map,boolean);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;LRUMap;true;LRUMap;(Map,boolean);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;LRUMap;true;get;(Object,boolean);;MapValue of Argument[0];ReturnValue;valueorg.apache.commons.collections.map;LazyMap;true;lazyMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.map;LazyMap;true;lazyMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.map;LazySortedMap;true;lazySortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.map;LazySortedMap;true;lazySortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.map;LinkedMap;true;LinkedMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;LinkedMap;true;LinkedMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;LinkedMap;true;asList;;;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.map;LinkedMap;true;get;(int);;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections.map;LinkedMap;true;getValue;(int);;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections.map;LinkedMap;true;remove;(int);;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections.map;ListOrderedMap;true;asList;;;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.map;ListOrderedMap;true;get;(int);;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections.map;ListOrderedMap;true;getValue;(int);;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections.map;ListOrderedMap;true;keyList;;;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.map;ListOrderedMap;true;listOrderedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.map;ListOrderedMap;true;listOrderedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.map;ListOrderedMap;true;put;;;Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections.map;ListOrderedMap;true;put;;;Argument[2];MapValue of Argument[-1];valueorg.apache.commons.collections.map;ListOrderedMap;true;putAll;;;MapKey of Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections.map;ListOrderedMap;true;putAll;;;MapValue of Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections.map;ListOrderedMap;true;remove;(int);;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections.map;ListOrderedMap;true;setValue;;;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections.map;ListOrderedMap;true;valueList;;;MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.map;MultiKeyMap;true;get;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections.map;MultiKeyMap;true;put;(Object,Object,Object);;Argument[0..1];Element of MapKey of Argument[-1];valueorg.apache.commons.collections.map;MultiKeyMap;true;put;(Object,Object,Object);;Argument[2];MapValue of Argument[-1];valueorg.apache.commons.collections.map;MultiKeyMap;true;put;(Object,Object,Object,Object);;Argument[0..2];Element of MapKey of Argument[-1];valueorg.apache.commons.collections.map;MultiKeyMap;true;put;(Object,Object,Object,Object);;Argument[3];MapValue of Argument[-1];valueorg.apache.commons.collections.map;MultiKeyMap;true;put;(Object,Object,Object,Object,Object);;Argument[0..3];Element of MapKey of Argument[-1];valueorg.apache.commons.collections.map;MultiKeyMap;true;put;(Object,Object,Object,Object,Object);;Argument[4];MapValue of Argument[-1];valueorg.apache.commons.collections.map;MultiKeyMap;true;put;(Object,Object,Object,Object,Object,Object);;Argument[0..4];Element of MapKey of Argument[-1];valueorg.apache.commons.collections.map;MultiKeyMap;true;put;(Object,Object,Object,Object,Object,Object);;Argument[5];MapValue of Argument[-1];valueorg.apache.commons.collections.map;MultiKeyMap;true;put;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections.map;MultiKeyMap;true;removeMultiKey;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections.map;MultiValueMap;true;getCollection;;;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.map;MultiValueMap;true;iterator;();;Element of MapValue of Argument[-1];MapValue of Element of ReturnValue;valueorg.apache.commons.collections.map;MultiValueMap;true;iterator;();;MapKey of Argument[-1];MapKey of Element of ReturnValue;valueorg.apache.commons.collections.map;MultiValueMap;true;iterator;(Object);;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.map;MultiValueMap;true;multiValueMap;;;Element of MapValue of Argument[0];Element of MapValue of ReturnValue;valueorg.apache.commons.collections.map;MultiValueMap;true;multiValueMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.map;MultiValueMap;true;putAll;(Map);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections.map;MultiValueMap;true;putAll;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections.map;MultiValueMap;true;putAll;(Object,Collection);;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;MultiValueMap;true;putAll;(Object,Collection);;Element of Argument[1];Element of MapValue of Argument[-1];valueorg.apache.commons.collections.map;MultiValueMap;true;values;;;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections.map;PassiveExpiringMap;true;PassiveExpiringMap;(ExpirationPolicy,Map);;MapKey of Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections.map;PassiveExpiringMap;true;PassiveExpiringMap;(ExpirationPolicy,Map);;MapValue of Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections.map;PassiveExpiringMap;true;PassiveExpiringMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;PassiveExpiringMap;true;PassiveExpiringMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;PassiveExpiringMap;true;PassiveExpiringMap;(long,Map);;MapKey of Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections.map;PassiveExpiringMap;true;PassiveExpiringMap;(long,Map);;MapValue of Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections.map;PassiveExpiringMap;true;PassiveExpiringMap;(long,TimeUnit,Map);;MapKey of Argument[2];MapKey of Argument[-1];valueorg.apache.commons.collections.map;PassiveExpiringMap;true;PassiveExpiringMap;(long,TimeUnit,Map);;MapValue of Argument[2];MapValue of Argument[-1];valueorg.apache.commons.collections.map;PredicatedMap;true;predicatedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.map;PredicatedMap;true;predicatedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.map;PredicatedSortedMap;true;predicatedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.map;PredicatedSortedMap;true;predicatedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.map;SingletonMap;true;SingletonMap;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;SingletonMap;true;SingletonMap;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;SingletonMap;true;SingletonMap;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;SingletonMap;true;SingletonMap;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;SingletonMap;true;SingletonMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;SingletonMap;true;SingletonMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;SingletonMap;true;SingletonMap;(Object,Object);;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections.map;SingletonMap;true;SingletonMap;(Object,Object);;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections.map;SingletonMap;true;setValue;;;Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections.map;TransformedMap;true;transformingMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.map;TransformedMap;true;transformingMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.map;TransformedSortedMap;true;transformingSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.map;TransformedSortedMap;true;transformingSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.map;UnmodifiableEntrySet;true;unmodifiableEntrySet;;;MapKey of Element of Argument[0];MapKey of Element of ReturnValue;valueorg.apache.commons.collections.map;UnmodifiableEntrySet;true;unmodifiableEntrySet;;;MapValue of Element of Argument[0];MapValue of Element of ReturnValue;valueorg.apache.commons.collections.map;UnmodifiableMap;true;unmodifiableMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.map;UnmodifiableMap;true;unmodifiableMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.map;UnmodifiableOrderedMap;true;unmodifiableOrderedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.map;UnmodifiableOrderedMap;true;unmodifiableOrderedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections.map;UnmodifiableSortedMap;true;unmodifiableSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections.map;UnmodifiableSortedMap;true;unmodifiableSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;AbstractHashedMap;true;AbstractHashedMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;AbstractHashedMap;true;AbstractHashedMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;AbstractLinkedMap;true;AbstractLinkedMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;AbstractLinkedMap;true;AbstractLinkedMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;AbstractMapDecorator;true;AbstractMapDecorator;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;AbstractMapDecorator;true;AbstractMapDecorator;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;AbstractMapDecorator;true;decorated;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;AbstractMapDecorator;true;decorated;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;AbstractOrderedMapDecorator;true;AbstractOrderedMapDecorator;(OrderedMap);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;AbstractOrderedMapDecorator;true;AbstractOrderedMapDecorator;(OrderedMap);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;AbstractSortedMapDecorator;true;AbstractSortedMapDecorator;(SortedMap);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;AbstractSortedMapDecorator;true;AbstractSortedMapDecorator;(SortedMap);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;CaseInsensitiveMap;true;CaseInsensitiveMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;CaseInsensitiveMap;true;CaseInsensitiveMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;CompositeMap;(Map,Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;CompositeMap;(Map,Map);;MapKey of Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;CompositeMap;(Map,Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;CompositeMap;(Map,Map);;MapValue of Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;CompositeMap;(Map,Map,MapMutator);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;CompositeMap;(Map,Map,MapMutator);;MapKey of Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;CompositeMap;(Map,Map,MapMutator);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;CompositeMap;(Map,Map,MapMutator);;MapValue of Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;CompositeMap;(Map[]);;MapKey of ArrayElement of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;CompositeMap;(Map[]);;MapValue of ArrayElement of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;CompositeMap;(Map[],MapMutator);;MapKey of ArrayElement of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;CompositeMap;(Map[],MapMutator);;MapValue of ArrayElement of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;addComposited;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;addComposited;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;CompositeMap;true;removeComposited;;;Argument[0];ReturnValue;valueorg.apache.commons.collections4.map;CompositeMap;true;removeComposited;;;MapKey of Argument[-1];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;CompositeMap;true;removeComposited;;;MapValue of Argument[-1];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;DefaultedMap;true;DefaultedMap;(Object);;Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;DefaultedMap;true;defaultedMap;(Map,Object);;Argument[1];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;DefaultedMap;true;defaultedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;DefaultedMap;true;defaultedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;EntrySetToMapIteratorAdapter;true;EntrySetToMapIteratorAdapter;;;MapKey of Element of Argument[0];Element of Argument[-1];valueorg.apache.commons.collections4.map;EntrySetToMapIteratorAdapter;true;EntrySetToMapIteratorAdapter;;;MapValue of Element of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;FixedSizeMap;true;fixedSizeMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;FixedSizeMap;true;fixedSizeMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;FixedSizeSortedMap;true;fixedSizeSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;FixedSizeSortedMap;true;fixedSizeSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;Flat3Map;true;Flat3Map;;;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;Flat3Map;true;Flat3Map;;;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;HashedMap;true;HashedMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;HashedMap;true;HashedMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;LRUMap;true;LRUMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;LRUMap;true;LRUMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;LRUMap;true;LRUMap;(Map,boolean);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;LRUMap;true;LRUMap;(Map,boolean);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;LRUMap;true;get;(Object,boolean);;MapValue of Argument[0];ReturnValue;valueorg.apache.commons.collections4.map;LazyMap;true;lazyMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;LazyMap;true;lazyMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;LazySortedMap;true;lazySortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;LazySortedMap;true;lazySortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;LinkedMap;true;LinkedMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;LinkedMap;true;LinkedMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;LinkedMap;true;asList;;;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.map;LinkedMap;true;get;(int);;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.map;LinkedMap;true;getValue;(int);;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.map;LinkedMap;true;remove;(int);;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.map;ListOrderedMap;true;asList;;;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.map;ListOrderedMap;true;get;(int);;MapKey of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.map;ListOrderedMap;true;getValue;(int);;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.map;ListOrderedMap;true;keyList;;;MapKey of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.map;ListOrderedMap;true;listOrderedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;ListOrderedMap;true;listOrderedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;ListOrderedMap;true;put;;;Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;ListOrderedMap;true;put;;;Argument[2];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;ListOrderedMap;true;putAll;;;MapKey of Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;ListOrderedMap;true;putAll;;;MapValue of Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;ListOrderedMap;true;remove;(int);;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.map;ListOrderedMap;true;setValue;;;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;ListOrderedMap;true;valueList;;;MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.map;MultiKeyMap;true;get;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.map;MultiKeyMap;true;put;(Object,Object,Object);;Argument[0..1];Element of MapKey of Argument[-1];valueorg.apache.commons.collections4.map;MultiKeyMap;true;put;(Object,Object,Object);;Argument[2];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;MultiKeyMap;true;put;(Object,Object,Object,Object);;Argument[0..2];Element of MapKey of Argument[-1];valueorg.apache.commons.collections4.map;MultiKeyMap;true;put;(Object,Object,Object,Object);;Argument[3];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;MultiKeyMap;true;put;(Object,Object,Object,Object,Object);;Argument[0..3];Element of MapKey of Argument[-1];valueorg.apache.commons.collections4.map;MultiKeyMap;true;put;(Object,Object,Object,Object,Object);;Argument[4];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;MultiKeyMap;true;put;(Object,Object,Object,Object,Object,Object);;Argument[0..4];Element of MapKey of Argument[-1];valueorg.apache.commons.collections4.map;MultiKeyMap;true;put;(Object,Object,Object,Object,Object,Object);;Argument[5];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;MultiKeyMap;true;put;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.map;MultiKeyMap;true;removeMultiKey;;;MapValue of Argument[-1];ReturnValue;valueorg.apache.commons.collections4.map;MultiValueMap;true;getCollection;;;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.map;MultiValueMap;true;iterator;();;Element of MapValue of Argument[-1];MapValue of Element of ReturnValue;valueorg.apache.commons.collections4.map;MultiValueMap;true;iterator;();;MapKey of Argument[-1];MapKey of Element of ReturnValue;valueorg.apache.commons.collections4.map;MultiValueMap;true;iterator;(Object);;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.map;MultiValueMap;true;multiValueMap;;;Element of MapValue of Argument[0];Element of MapValue of ReturnValue;valueorg.apache.commons.collections4.map;MultiValueMap;true;multiValueMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;MultiValueMap;true;putAll;(Map);;Element of MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections4.map;MultiValueMap;true;putAll;(Map);;MapValue of Argument[0];Element of MapValue of Argument[-1];valueorg.apache.commons.collections4.map;MultiValueMap;true;putAll;(Object,Collection);;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;MultiValueMap;true;putAll;(Object,Collection);;Element of Argument[1];Element of MapValue of Argument[-1];valueorg.apache.commons.collections4.map;MultiValueMap;true;values;;;Element of MapValue of Argument[-1];Element of ReturnValue;valueorg.apache.commons.collections4.map;PassiveExpiringMap;true;PassiveExpiringMap;(ExpirationPolicy,Map);;MapKey of Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;PassiveExpiringMap;true;PassiveExpiringMap;(ExpirationPolicy,Map);;MapValue of Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;PassiveExpiringMap;true;PassiveExpiringMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;PassiveExpiringMap;true;PassiveExpiringMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;PassiveExpiringMap;true;PassiveExpiringMap;(long,Map);;MapKey of Argument[1];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;PassiveExpiringMap;true;PassiveExpiringMap;(long,Map);;MapValue of Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;PassiveExpiringMap;true;PassiveExpiringMap;(long,TimeUnit,Map);;MapKey of Argument[2];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;PassiveExpiringMap;true;PassiveExpiringMap;(long,TimeUnit,Map);;MapValue of Argument[2];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;PredicatedMap;true;predicatedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;PredicatedMap;true;predicatedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;PredicatedSortedMap;true;predicatedSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;PredicatedSortedMap;true;predicatedSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;SingletonMap;true;SingletonMap;(Entry);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;SingletonMap;true;SingletonMap;(Entry);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;SingletonMap;true;SingletonMap;(KeyValue);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;SingletonMap;true;SingletonMap;(KeyValue);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;SingletonMap;true;SingletonMap;(Map);;MapKey of Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;SingletonMap;true;SingletonMap;(Map);;MapValue of Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;SingletonMap;true;SingletonMap;(Object,Object);;Argument[0];MapKey of Argument[-1];valueorg.apache.commons.collections4.map;SingletonMap;true;SingletonMap;(Object,Object);;Argument[1];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;SingletonMap;true;setValue;;;Argument[0];MapValue of Argument[-1];valueorg.apache.commons.collections4.map;TransformedMap;true;transformingMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;TransformedMap;true;transformingMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;TransformedSortedMap;true;transformingSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;TransformedSortedMap;true;transformingSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;UnmodifiableEntrySet;true;unmodifiableEntrySet;;;MapKey of Element of Argument[0];MapKey of Element of ReturnValue;valueorg.apache.commons.collections4.map;UnmodifiableEntrySet;true;unmodifiableEntrySet;;;MapValue of Element of Argument[0];MapValue of Element of ReturnValue;valueorg.apache.commons.collections4.map;UnmodifiableMap;true;unmodifiableMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;UnmodifiableMap;true;unmodifiableMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;UnmodifiableOrderedMap;true;unmodifiableOrderedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;UnmodifiableOrderedMap;true;unmodifiableOrderedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valueorg.apache.commons.collections4.map;UnmodifiableSortedMap;true;unmodifiableSortedMap;;;MapKey of Argument[0];MapKey of ReturnValue;valueorg.apache.commons.collections4.map;UnmodifiableSortedMap;true;unmodifiableSortedMap;;;MapValue of Argument[0];MapValue of ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;type;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;replaceAll;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;tag;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;cacheControl;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;header;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;variant;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;location;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;lastModified;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;status;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;allow;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;contentLocation;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;cookie;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;encoding;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;entity;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;expires;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;language;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;link;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;links;;;Argument[-1];ReturnValue;valuejavax.ws.rs.core;Response$ResponseBuilder;true;variants;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;type;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;replaceAll;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;tag;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;cacheControl;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;header;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;variant;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;location;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;lastModified;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;status;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;allow;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;contentLocation;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;cookie;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;encoding;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;entity;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;expires;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;language;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;link;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;links;;;Argument[-1];ReturnValue;valuejakarta.ws.rs.core;Response$ResponseBuilder;true;variants;;;Argument[-1];ReturnValue;valueandroid.os;Parcel;false;readBinderArray;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readBinderList;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readBooleanArray;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readByteArray;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readCharArray;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readDoubleArray;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readFloatArray;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readIntArray;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readList;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readLongArray;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readMap;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readParcelableList;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readStringArray;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readStringList;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readTypedArray;;;Argument[-1];Argument[0];taintandroid.os;Parcel;false;readTypedList;;;Argument[-1];Argument[0];taintandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;addEndItem;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;setContentDescription;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;setInputAction;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;setLayoutDirection;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;setMax;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;setMin;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;setPrimaryAction;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;setSubtitle;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;setThumb;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;setTitle;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;setTitleItem;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder$InputRangeBuilder;true;setValue;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;addAction;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;addGridRow;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;addInputRange;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;addRange;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;addRating;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;addRow;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;addSelection;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;setAccentColor;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;setHeader;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;setHostExtras;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;setIsError;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;setKeywords;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;setLayoutDirection;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;setSeeMoreAction;;;Argument[-1];ReturnValue;valueandroidx.slice.builders;ListBuilder;true;setSeeMoreRow;;;Argument[-1];ReturnValue;valueandroid.os;Parcel;false;readArray;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readArrayList;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readBoolean;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readBundle;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readByte;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readDouble;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readFileDescriptor;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readFloat;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readHashMap;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readInt;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readLong;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readParcelable;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readParcelableArray;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readPersistableBundle;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readSerializable;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readSize;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readSizeF;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readSparseArray;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readSparseBooleanArray;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readString;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readStrongBinder;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readTypedObject;;;Argument[-1];ReturnValue;taintandroid.os;Parcel;false;readValue;;;Argument[-1];ReturnValue;taintandroid.app;Notification$Builder;true;addAction;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;addExtras;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;addPerson;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;extend;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setActions;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setAutoCancel;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setBadgeIconType;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setBubbleMetadata;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setCategory;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setChannelId;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setChronometerCountDown;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setColor;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setColorized;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setContent;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setContentInfo;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setContentIntent;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setContentText;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setContentTitle;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setCustomBigContentView;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setCustomHeadsUpContentView;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setDefaults;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setDeleteIntent;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setExtras;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setFlag;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setForegroundServiceBehavior;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setFullScreenIntent;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setGroup;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setGroupAlertBehavior;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setGroupSummary;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setLargeIcon;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setLights;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setLocalOnly;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setLocusId;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setNumber;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setOngoing;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setOnlyAlertOnce;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setPriority;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setProgress;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setPublicVersion;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setRemoteInputHistory;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setSettingsText;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setShortcutId;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setShowWhen;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setSmallIcon;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setSortKey;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setSound;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setStyle;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setSubText;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setTicker;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setTimeoutAfter;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setUsesChronometer;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setVibrate;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setVisibility;;;Argument[-1];ReturnValue;valueandroid.app;Notification$Builder;true;setWhen;;;Argument[-1];ReturnValue;valueratpack.exec;Promise;true;apply;;;Element of Argument[-1];Element of Parameter[0] of Argument[0];valueratpack.exec;Promise;true;apply;;;Element of ReturnValue of Argument[0];Element of ReturnValue;valueratpack.exec;Promise;true;blockingMap;;;Element of Argument[-1];Parameter[0] of Argument[0];valueratpack.exec;Promise;true;blockingMap;;;ReturnValue of Argument[0];Element of ReturnValue;valueratpack.exec;Promise;true;blockingOp;;;Element of Argument[-1];Parameter[0] of Argument[0];valueratpack.exec;Promise;true;cacheIf;;;Element of Argument[-1];Parameter[0] of Argument[0];valueratpack.exec;Promise;true;flatMap;;;Element of Argument[-1];Parameter[0] of Argument[0];valueratpack.exec;Promise;true;flatMap;;;Element of ReturnValue of Argument[0];Element of ReturnValue;valueratpack.exec;Promise;true;flatMapError;;;Element of ReturnValue of Argument[1];Element of ReturnValue;valueratpack.exec;Promise;true;flatOp;;;Element of Argument[-1];Parameter[0] of Argument[0];valueratpack.exec;Promise;true;flatten;;;Element of ReturnValue of Argument[0];Element of ReturnValue;valueratpack.exec;Promise;true;map;;;Element of Argument[-1];Parameter[0] of Argument[0];valueratpack.exec;Promise;true;map;;;ReturnValue of Argument[0];Element of ReturnValue;valueratpack.exec;Promise;true;mapError;;;ReturnValue of Argument[1];Element of ReturnValue;valueratpack.exec;Promise;true;mapIf;;;Element of Argument[-1];Parameter[0] of Argument[0];valueratpack.exec;Promise;true;mapIf;;;Element of Argument[-1];Parameter[0] of Argument[1];valueratpack.exec;Promise;true;mapIf;;;Element of Argument[-1];Parameter[0] of Argument[2];valueratpack.exec;Promise;true;mapIf;;;ReturnValue of Argument[1];Element of ReturnValue;valueratpack.exec;Promise;true;mapIf;;;ReturnValue of Argument[2];Element of ReturnValue;valueratpack.exec;Promise;true;next;;;Element of Argument[-1];Parameter[0] of Argument[0];valueratpack.exec;Promise;true;nextOp;;;Element of Argument[-1];Parameter[0] of Argument[0];valueratpack.exec;Promise;true;nextOpIf;;;Element of Argument[-1];Parameter[0] of Argument[0];valueratpack.exec;Promise;true;nextOpIf;;;Element of Argument[-1];Parameter[0] of Argument[1];valueratpack.exec;Promise;true;replace;;;Element of Argument[0];Element of ReturnValue;valueratpack.exec;Promise;true;route;;;Argument[-1];ReturnValue;valueratpack.exec;Promise;true;route;;;Element of Argument[-1];Parameter[0] of Argument[0];valueratpack.exec;Promise;true;route;;;Element of Argument[-1];Parameter[0] of Argument[1];valueratpack.exec;Promise;true;sync;;;ReturnValue of Argument[0];Element of ReturnValue;valueratpack.exec;Promise;true;then;;;Element of Argument[-1];Parameter[0] of Argument[0];valueratpack.exec;Promise;true;value;;;Argument[0];Element of ReturnValue;valueratpack.exec;Promise;true;wiretap;;;Element of Argument[-1];Element of Parameter[0] of Argument[0];valueratpack.formFormtaintfilesObjectsparamratpack.core.formokflexjsonJSONDeserializeruserequireNonNullArgument[0..4]NewCookieacceptedtoCookieratpack.funcPairReturnValue of Argument[0]ratpack.utilandroid.osParcelreadParcelableListrequireNonNullElsegetExpiryPathSegmentMapKey of Argument[0]getSubtyperatpack.execElement of ReturnValueUploadedFileParameter[0] of Argument[0]Notification$BuilderfromResponserequireNonNullElseGetHttpHeadersElement of Argument[-1]GenericEntityArgument[0..9]Notification$Action$BuildergetRequestHeaderRegExUtilsrecoverBuilderandroidx.slice.buildersSliceActionsetCheckedgetValueOrThrowResponse$ResponseBuilderorg.apache.commons.lang3.textStrLookupgetMatrixParametersElement of MapValue of Argument[0]org.apache.commons.text.lookupStringLookupcom.fasterxml.jackson.coreJsonFactorycreateParserField[ratpack.func.Pair.left] of ReturnValuesetContextualgetAllMapKey of Argument[-1]MapKey of ReturnValueField[ratpack.func.Pair.right] of ReturnValueaddRemoteInputcom.fasterxml.jackson.databindObjectMappervalueToTreepairListBuilder$RangeBuilderListBuilder$RowBuilderconvertValueMultiMapUtilsemptyIfNullListBuilder$RatingBuilderObjectReadersetSemanticActionasMultimapField[ratpack.func.Pair.left] of Argument[-1]ListBuilder$HeaderBuildergetLeftArrayElement of Argument[0]Field[ratpack.func.Pair.right] of Argument[-1]setSummarygetRightEnumerationUtilsElement of Argument[0]mapLookupMapValue of Argument[0]MapValue of Argument[-1]MapValue of ReturnValuesetEndOfSectionPromisesetAllowGeneratedRepliessetAuthenticationRequiredflatLeftpushLeftflatRightpushRightorg.apache.commons.collections.queueCircularFifoQueuegetCollectionNotification$Action(int,CharSequence,PendingIntent)org.apache.commons.collections4.queueElement of MapValue of ReturnValuemapLeft(ratpack.http.TypedData,ratpack.parse.Parse)BagUtilscollectionBagpredicatedBagmapRightSplitMapUtilsreadableMapwritableMaporg.apache.commons.collections.propertiesAbstractPropertiesFactoryorg.apache.commons.collections.trieAbstractPatriciaTrieselectKeysynchronizedBagtransformingBagunmodifiableBagTrieUtilsunmodifiableTrieorg.apache.commons.collections4.propertiesorg.apache.commons.collections4.trieQueueUtilspredicatedQueueStringLookupFactorymapStringLookup(Icon,CharSequence,PendingIntent)MultivaluedHashMapselectValuepredicatedSortedBagsynchronizedQueuetransformingQueueunmodifiableQueuePatriciaTrie(StringTokenizer)Field[ratpack.func.Pair.right] of Element of ReturnValueField[ratpack.func.Pair.left] of Element of ReturnValuesynchronizedSortedBagtransformingSortedBagunmodifiableSortedBagAbstractMultivaluedMap(ratpack.core.http.TypedData,ratpack.core.parse.Parse)MultiSetUtilspredicatedMultiSetsynchronizedMultiSetunmodifiableMultiSetorg.apache.commons.collections.multisetHashMultiSetListBuilderSyntheticField[androidx.slice.Slice.action] of Argument[-1]UnmodifiableTrieorg.apache.commons.collections4.multiset(Promise)PredicatedQueuetransformedMultiValuedMapgetExtrasSyntheticField[android.content.Intent.extras] of Argument[-1]unmodifiableMultiValuedMap(MultivaluedMap)getActionTransformedQueuegetValuesAsBaggetValuesAsSetSynchronizedQueueUnmodifiableQueuegetValuesAsListorg.apache.commons.collections.splitmapTransformedSplitMaptransformingMapElement of MapValue of Argument[-1]org.apache.commons.collections4.splitmapPredicatedMultiSetnestLeftField[ratpack.func.Pair.left] of Field[ratpack.func.Pair.left] of ReturnValuenestRightField[ratpack.func.Pair.left] of Field[ratpack.func.Pair.right] of ReturnValueSynchronizedMultiSetUnmodifiableMultiSetElement of ReturnValue of Argument[0]MapKey of SyntheticField[android.content.Intent.extras] of Argument[-1](PendingIntent)MapValue of SyntheticField[android.content.Intent.extras] of Argument[-1]AbstractIterableGetMapDecoratororg.apache.commons.lang3.mutableMutableObjectSyntheticField[org.apache.commons.lang3.mutable.MutableObject.value] of Argument[-1]Field[android.app.Notification.extras] of ReturnValueListBuilder$InputRangeBuildercreateToggle(PendingIntent,CharSequence,boolean)SyntheticField[androidx.slice.Slice.action] of ReturnValue(PendingIntent,IconCompat,int,CharSequence)Field[ratpack.func.Pair.right] of Field[ratpack.func.Pair.left] of ReturnValueSyntheticField[androidx.slice.Slice.action] of Argument[0]Field[ratpack.func.Pair.right] of Field[ratpack.func.Pair.right] of ReturnValuecreateDeeplinkSyntheticField[android.content.Intent.extras] of ReturnValue(SliceAction)(SliceAction,boolean)jodd.jsonJsonParserallowAllClassesallowClasslazylooseModesetClassMetadataNamestrictTypesuseAltPathswithClassMetadatawithValueConverterObjectUtilsCONSTCONST_BYTECONST_SHORTcloneIfPossibledefaultIfNullfirstNonNullgetIfNullmedianrequireNonEmptyaddAllErrorsgetAllErrorsgetFieldErrorgetFieldErrorsgetGlobalErrorgetGlobalErrorsrejectArrayElement of Argument[1]rejectValue(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)ArrayElement of Argument[2](java.lang.String,java.lang.String,java.lang.String)org.springframework.cacheCache$ValueRetrievalExceptionValueRetrievalExceptionCache$ValueWrapper(Object,Callable)getNativeCacheMultipartHttpServletRequestgetMultipartHeadersMultipartResolverresolveMultipartifPresentOrElsecom.google.common.cachegetAllPresentgetIfPresentLoadingCacheorg.apache.commons.ioIOUtilscopyLarge(InputStream,ByteBuffer)(InputStream,byte[])(InputStream,byte[],int,int)(ReadableByteChannel,ByteBuffer)(Reader,char[])(Reader,char[],int,int)toBufferedInputStreamtoBufferedReadertoInputStreamwriteChunkedwriteLinesorg.apache.commons.lang3.builderToStringBuilder(java.lang.Object)(java.lang.Object[])(java.lang.String,boolean)(java.lang.String,java.lang.Object)(java.lang.String,java.lang.Object[])(java.lang.String,java.lang.Object[],boolean)appendAsObjectToStringappendSuperappendToStringgetStringBufferComponentName(Context,Class)(Context,String)(Parcel)flattenToShortStringflattenToStringgetPackageNamegetShortClassNameunflattenFromStringIntent(Intent)(String,Uri,Context,Class)getIntentOldparseUrisetClasssetClassNamesetPackageWordUtils(java.lang.String)(java.lang.String,char[])capitalizeFullyinitials(java.lang.String,int,java.lang.String,boolean)(java.lang.String,int,java.lang.String,boolean,java.lang.String)org.apache.commons.textMapKey of Element of Argument[-1]MapValue of Element of Argument[-1]ArrayElement of ReturnValueConcurrentModeladdAllAttributesmergeAttributesStringWriterindentstripIndentstripLeadingstripTrailingtranslateEscapesorg.apache.commons.lang3.tupleImmutablePair(java.lang.Object,java.lang.Object)Field[org.apache.commons.lang3.tuple.ImmutablePair.left] of Argument[-1]Field[org.apache.commons.lang3.tuple.ImmutablePair.right] of Argument[-1]Field[org.apache.commons.lang3.tuple.ImmutablePair.left] of ReturnValueField[org.apache.commons.lang3.tuple.ImmutablePair.right] of ReturnValueMutablePairField[org.apache.commons.lang3.tuple.MutablePair.left] of Argument[-1]Field[org.apache.commons.lang3.tuple.MutablePair.right] of Argument[-1]Field[org.apache.commons.lang3.tuple.MutablePair.left] of ReturnValueField[org.apache.commons.lang3.tuple.MutablePair.right] of ReturnValuesetLeftsetRightStrTokenizergetCSVInstancegetTSVInstancegetTokenArraygetTokenListpreviousTokenStringTokenizerArrayUtils(boolean[],boolean)(byte[],byte)(double[],double)(float[],float)(java.lang.Object[],java.lang.Object)(long[],long)(short[],short)ArrayElement of Argument[0..1](java.lang.Object[],int,java.lang.Object)ArrayElement of Argument[1..2]nullToEmpty(java.lang.Object[],java.lang.Class)(java.lang.String[])removeAllOccurencesremoveAllOccurrencesremoveElementssubarraytoMapArrayElement of ArrayElement of Argument[0]MapKey of ArrayElement of Argument[0]MapValue of ArrayElement of Argument[0]toObjecttoPrimitiveandroid.netUri$BuilderappendEncodedPathappendQueryParameterauthorityclearQueryencodedAuthorityencodedOpaquePartopaquePartUrifromFilefromPartswithAppendedPathwriteToParcelbuildUpongetEncodedAuthoritygetEncodedFragmentgetEncodedPathgetEncodedQuerygetEncodedSchemeSpecificPartgetEncodedUserInfogetLastPathSegmentgetPathSegmentsgetQueryParametergetQueryParameterNamesgetQueryParametersnormalizeSchemeImmutableTriple(java.lang.Object,java.lang.Object,java.lang.Object)Field[org.apache.commons.lang3.tuple.ImmutableTriple.left] of Argument[-1]Field[org.apache.commons.lang3.tuple.ImmutableTriple.middle] of Argument[-1]Field[org.apache.commons.lang3.tuple.ImmutableTriple.right] of Argument[-1]getMiddleField[org.apache.commons.lang3.tuple.ImmutableTriple.left] of ReturnValueField[org.apache.commons.lang3.tuple.ImmutableTriple.middle] of ReturnValueField[org.apache.commons.lang3.tuple.ImmutableTriple.right] of ReturnValueMutableTripleField[org.apache.commons.lang3.tuple.MutableTriple.left] of Argument[-1]Field[org.apache.commons.lang3.tuple.MutableTriple.middle] of Argument[-1]Field[org.apache.commons.lang3.tuple.MutableTriple.right] of Argument[-1]Field[org.apache.commons.lang3.tuple.MutableTriple.left] of ReturnValueField[org.apache.commons.lang3.tuple.MutableTriple.middle] of ReturnValueField[org.apache.commons.lang3.tuple.MutableTriple.right] of ReturnValuesetMiddleTripleappendColumns(StringBuilder,String[])appendWhereappendWhereStandalonebuildQuery(String[],String,String,String,String,String)Argument[1..5](String[],String,String[],String,String,String,String)Argument[3..6]buildQueryString(boolean,String,String[],String,String,String,String,String)Argument[3..7]buildUnionQuery(String[],String,String)buildUnionSubQuery(String,String[],Set,int,String,String,String,String)Argument[-1..0]Element of Argument[2](String,String[],Set,int,String,String,String[],String,String)Argument[4..5]Argument[7..8]setProjectionMapsetTablesappendSelectionArgsconcatenateWherecn.hutool.core.codecBase64com.esotericsoftware.kryo.ioInputcom.esotericsoftware.kryo5.ioXMLDecoderBufferedInputStreamByteArrayOutputStreamCharArrayReaderDataInputStreamreadAllBytesreadNBytesStringReadertoAsciiStringURLDecoderjava.util.zipGZIPInputStreamZipInputStreamBase64$DecoderBase64$EncoderencodeToStringjavax.xml.transform.saxSAXSource(XMLReader,InputSource)getInputSourcesourceToInputSourcejavax.xml.transform.streamStreamSourceorg.apache.commons.codecBinaryDecoderBinaryEncoderDecoderEncoderStringDecoderStringEncoderorg.apache.shiro.codecStrSubstitutor(java.lang.CharSequence)(java.lang.CharSequence,int,int)(java.lang.Object,java.util.Map)MapValue of Argument[1](java.lang.Object,java.util.Map,java.lang.String,java.lang.String)(java.lang.Object,java.util.Properties)(java.lang.String,int,int)(java.lang.StringBuffer)(java.lang.StringBuffer,int,int)(org.apache.commons.lang3.text.StrBuilder)(org.apache.commons.lang3.text.StrBuilder,int,int)replaceIn(java.lang.StringBuilder)(java.lang.StringBuilder,int,int)setVariableResolverStringSubstitutor(org.apache.commons.text.TextStringBuilder)(org.apache.commons.text.TextStringBuilder,int,int)BaseEncodingdecodingSource(CharSource)decodingStreamomitPaddingwithPadCharwithSeparatorByteArrayDataOutputByteSource(ByteSource[])openBufferedStreamByteStreams(InputStream,OutputStream)(ReadableByteChannel,WritableByteChannel)newDataInput(ByteArrayInputStream)newDataOutput(ByteArrayOutputStream)CharSource(CharSource[])readFirstLineCharStreams(Readable,Appendable)(Readable)ClosergetFileExtensiongetNameWithoutExtensionsimplifyPathLineReaderMoreFilesStrBuilderappendAllappendFixedWidthPadLeftappendFixedWidthPadRightappendNewLineappendNullappendPaddingappendSeparatorappendWithSeparatorsappendlndeleteFirstminimizeCapacitysetNewLineTextsetNullTextTextStringBuilder(Object,MultiValueMap)Element of MapValue of Argument[1]MapKey of Argument[1]Element of Argument[1]encodeBasicAuth(String,String,Charset)formatHeadersgetAccessControlAllowHeadersgetAccessControlAllowOrigingetAccessControlExposeHeadersgetAccessControlRequestHeadersgetCacheControlgetETaggetETagValuesAsListgetFieldValuesgetIfMatchgetIfNoneMatchgetOrEmptygetPragmagetUpgradegetVaryResponseEntity$BodyBuilderResponseEntity$HeadersBuilder(HttpMethod[])eTag(HttpHeaders)varyByResponseEntity(MultiValueMap,HttpStatus)(Object,HttpStatus)(Object,MultiValueMap,HttpStatus)(Object,MultiValueMap,int)Ascii(CharSequence,int,String)CaseFormat(CaseFormat,String)convertAllMapKey of Element of Argument[0]MapValue of Element of Argument[0]ArrayElement of Argument[3]Argument[-1..2]MoreObjects$ToStringHelperaddValueomitNullValuesMoreObjectstoStringHelperasSetfromJavaUtilfromNullableElement of Argument[-1..0]orNullpresentInstancesElement of Element of Argument[0]toJavaUtilSplitter$MapSplitterSplittersplitToListsplitToStreamStringsemptyToNulllenientFormatpadEndpadStartSuppliersmemoizememoizeWithExpiration(Supplier,long,TimeUnit)ofInstancesynchronizedSupplierVerifyverifyNotNullParameter[1] of Argument[1]Parameter[0..1] of Argument[2]Parameter[0] of Argument[1]Element of Argument[0..1]dropWhile(Object,Predicate,UnaryOperator)Parameter[0] of Argument[1..2]ReturnValue of Argument[2]ReturnValue of Argument[1]mapMultimapMultiToDoublemapMultiToIntmapMultiToLongParameter[0..1] of Argument[0]ReturnValue of Argument[1..2]Parameter[0..1] of Argument[1]takeWhileorg.apache.hc.core5.functionorg.apache.hc.core5.http.io.entityBasicHttpEntityBufferedHttpEntityByteArrayEntityHttpEntitiescreateGzippedcreateUrlEncodedgzipwithTrailersHttpEntityWrapperInputStreamEntityStringEntityorg.apache.hc.core5.http.messageEntityDetailsgetTrailerNamesgetTrailersgetRequestUriMessageHeadersorg.apache.hc.core5.netURIAuthorityorg.apache.hc.core5.utilArgscontainsNoBlanksnotBlanknotEmpty(Collection,String)notNullByteArrayBuffer(CharArrayBuffer,int,int)CharArrayBuffer(ByteArrayBuffer,int,int)(CharArrayBuffer)substringTrimmedBasicRequestLineEncodingUtilsgetAsciiBytesgetAsciiStringgetContentCharSetgetContentMimeType(java.lang.String,java.lang.String,int)(java.lang.String,java.lang.String,int,int)(java.lang.String,int,java.lang.String)(java.lang.String,java.lang.String)getIfBlankgetIfEmpty(java.lang.Iterable,char)(java.lang.Iterable,java.lang.String)(java.lang.Object[],char)(java.lang.Object[],char,int,int)(java.lang.Object[],java.lang.String)(java.lang.Object[],java.lang.String,int,int)(java.util.Iterator,char)(java.util.Iterator,java.lang.String)(java.util.List,char,int,int)(java.util.List,java.lang.String,int,int)(java.lang.String,java.util.Locale)(java.lang.String,char)toRootLowerCasetoRootUpperCaseAntPathMatcherdoMatchMapValue of Argument[3]extractPathWithinPatternextractUriTemplateVariablestokenizePathtokenizePatternAutoPopulatingList(java.util.List,java.lang.Class)(java.util.List,org.springframework.util.AutoPopulatingList.ElementFactory)Base64UtilsdecodeFromStringdecodeFromUrlSafeStringdecodeUrlSafeencodeToUrlSafeStringencodeUrlSafeCompositeIteratorFastByteArrayOutputStreamFileCopyUtilscopyToByteArraycopyToStringFileSystemUtilscopyRecursively(java.io.File,java.io.File)LinkedMultiValueMap(java.util.Map)deepCopy(java.lang.Object,java.util.List)(org.springframework.util.MultiValueMap)MultiValueMapAdapteraddObjectToArraytoObjectArrayunwrapOptionalPropertiesPersisterloadFromXmlstoreToXmlPropertyPlaceholderHelperparseStringValuereplacePlaceholders(java.lang.String,java.util.Properties)ResourceUtilsextractArchiveURLextractJarFileURLRouteMatchermatchAndExtractparseRouteSerializationUtilsStreamUtils(byte[],java.io.OutputStream)(java.io.InputStream,java.io.OutputStream)(java.lang.String,java.nio.charset.Charset,java.io.OutputStream)copyRangeaddStringToArrayapplyRelativePatharrayToCommaDelimitedStringarrayToDelimitedStringcleanPathcollectionToCommaDelimitedStringcollectionToDelimitedStringArgument[1..3]commaDelimitedListToSetcommaDelimitedListToStringArrayconcatenateStringArraysdeleteAnydelimitedListToStringArraygetFilenameExtensionmergeStringArraysquoteIfStringremoveDuplicateStringssortStringArraysplitArrayElementsIntoPropertiesstripFilenameExtensiontoStringArraytokenizeToStringArraytrimAllWhitespacetrimArrayElementstrimLeadingCharactertrimLeadingWhitespacetrimTrailingCharactertrimTrailingWhitespacetrimWhitespaceunqualifyuriDecodeSystemPropertyUtilsMapKey of SyntheticField[android.content.Intent.extras] of Argument[0]MapValue of SyntheticField[android.content.Intent.extras] of Argument[0](String,Uri)SyntheticField[android.content.Intent.data] of Argument[-1]createChooserMapValue of SyntheticField[android.content.Intent.extras] of ReturnValueSyntheticField[android.content.Intent.data] of ReturnValueaddCategoryaddFlagsgetBundleExtragetByteArrayExtragetCharArrayExtragetCharSequenceArrayExtragetCharSequenceArrayListExtragetCharSequenceExtragetDataStringgetParcelableArrayExtragetParcelableArrayListExtragetParcelableExtragetSerializableExtragetStringArrayExtragetStringArrayListExtragetStringExtraputCharSequenceArrayListExtraputExtraputExtras(Bundle)putIntegerArrayListExtraputParcelableArrayListExtraputStringArrayListExtrareplaceExtrassetActionsetDataAndNormalizesetDataAndTypesetDataAndTypeAndNormalizesetFlagssetIdentifiersetTypeAndNormalizeBaseBundle(PersistableBundle)putBooleanputBooleanArrayputDoubleArrayputIntArrayputLongArrayputStringputStringArraygetBindergetCharSequencegetCharSequenceArraygetCharSequenceArrayListgetParcelablegetParcelableArraygetParcelableArrayListgetSerializablegetSparseParcelableArraygetStringArrayListputBinderputBundleputByteputByteArrayputCharArrayputCharSequenceputCharSequenceArrayputCharSequenceArrayListputFloatArrayputIntegerArrayListputParcelableputParcelableArrayputParcelableArrayListputSerializableputShortArrayputSizeputSizeFputSparseParcelableArrayputStringArrayListreadFromParcelAbstractUriTemplateHandlergetBaseUrlsetBaseUrlsetDefaultUriVariablesContentCachingRequestWrappergetContentAsByteArrayContentCachingResponseWrappergetContentInputStreamDefaultUriBuilderFactorygetDefaultUriVariablesuriStringHtmlUtilshtmlEscapehtmlEscapeDecimalhtmlEscapeHexhtmlUnescapeServletContextPropertyUtilsServletRequestPathUtilsgetCachedPathgetCachedPathValuegetParsedRequestPathparseAndCachesetParsedRequestPathUriBuilderpathSegmentqueryParam(String,Collection)queryParamIfPresentqueryParamsreplacePathreplaceQueryreplaceQueryParamreplaceQueryParamsuserInfoUriBuilderFactoryUriComponents$UriTemplateVariablesUriComponentscopyToUriComponentsBuilderexpand(UriTemplateVariables)toUriStringbuildAndExpandcloneBuilderfromHttpRequestfromHttpUrlfromOriginHeaderfromPathfromUrifromUriStringparseForwardedForschemeSpecificParturiComponentsuriVariablesUriTemplategetVariableNamesUriTemplateHandlerUriUtilsencodeAuthorityencodeFragmentencodeHostencodePathencodePathSegmentencodePortencodeQueryencodeQueryParamencodeQueryParamsencodeSchemeencodeUriVariablesencodeUserInfoextractFileExtensionUrlPathHelperdecodeMatrixVariablesdecodePathVariablesdecodeRequestStringgetOriginatingContextPathgetOriginatingQueryStringgetOriginatingRequestUrigetPathWithinApplicationgetPathWithinServletMappinggetResolvedLookupPathremoveSemicolonContentresolveAndCacheLookupPathWebUtilsfindParameterValue(Map,String)(ServletRequest,String)getCookiegetNativeRequestgetNativeResponsegetParametersStartingWithgetRequiredSessionAttributegetSessionAttributeparseMatrixVariablessetSessionAttributeorg.jsonCDLrowToJSONArrayrowToJSONObjectrowToStringtoJSONArrayescapetoJSONObjectunescapeCookieListHTTPTokener(JSONArray)(JSONTokener)optoptBigDecimaloptBigIntegeroptBooleanoptDoubleoptEnumoptFloatoptIntoptJSONArrayoptJSONObjectoptLongoptNumberoptQueryoptStringJSONML(JSONObject,String[])(Object,String[])accumulatedoubleToStringincrementnumberToStringputOnceputOpt(String,Writer)stringToValuevalueToStringJSONPointer$BuilderJSONPointertoURIFragmentJSONStringJSONStringerJSONTokenernextCleannextStringnextTonextValuesyntaxErrorJSONWriterendArrayendObjecttoPropertiesXMLXMLTokenernextCDATAnextContentnextEntitynextMetaXMLXsiTypeConverter(java.nio.CharBuffer)(java.nio.CharBuffer,int,int)(java.lang.String,int)asReaderasTokenizerleftStringmidString(int,int,java.lang.String)(org.apache.commons.lang3.text.StrMatcher,java.lang.String,int,int,int)rightStringtoStringBuffertoStringBuilder(org.apache.commons.text.StrBuilder)(org.apache.commons.text.StrMatcher,java.lang.String,int,int,int)(org.apache.commons.text.matcher.StringMatcher,java.lang.String,int,int,int)BlockingDeque(Object,long,TimeUnit)putFirstputLasttakeFirsttakeLastBlockingQueuedrainTo(Collection,int)TransferQueuetransfertryTransferAbstractMap$SimpleEntrySimpleEntryAbstractMap$SimpleImmutableEntrySimpleImmutableEntryArrayDequeArrayscopyOfRange(Object[],Object)(Object[],int,int,Object)(boolean[],int,int,boolean)(byte[],int,int,byte)(char[],int,int,char)(double[],int,int,double)(float[],int,int,float)(long[],int,int,long)(short[],int,int,short)EnumMap(EnumMap)asIteratorHashSetLinkedHashSetLinkedList(Object,Object,Object,Object)(Object,Object,Object,Object,Object)(Object,Object,Object,Object,Object,Object)(Object,Object,Object,Object,Object,Object,Object)(Object,Object,Object,Object,Object,Object,Object,Object)(Object,Object,Object,Object,Object,Object,Object,Object,Object)Argument[0..8](Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)entryArgument[10]Argument[11]Argument[12]Argument[13]Argument[14]Argument[15]Argument[16]Argument[17]Argument[18]Argument[19]Argument[5]Argument[6]Argument[7]Argument[8]Argument[9]ofEntriesMapKey of Element of ReturnValueMapValue of Element of ReturnValueParameter[1] of Argument[0]PriorityQueue(PriorityQueue)ScannerTreeMapTreeSetcom.google.common.collectArrayListMultimap(Multimap)ArrayTable(Iterable,Iterable)SyntheticField[com.google.common.collect.Table.rowKey] of ReturnValueSyntheticField[com.google.common.collect.Table.columnKey] of ReturnValue(Table)SyntheticField[com.google.common.collect.Table.columnKey] of Argument[0]SyntheticField[com.google.common.collect.Table.rowKey] of Argument[0]BiMapforcePutinverseClassToInstanceMapputInstanceCollections2(Collection,Predicate)orderedPermutationsElement of Element of ReturnValue(Iterable,Comparator)permutationsConcurrentHashMultisetHashBasedTableHashBiMapHashMultimapHashMultisetImmutableBiMapImmutableClassToInstanceMapImmutableCollection$BuilderImmutableCollectionImmutableListArgument[0..11]ArrayElement of Argument[12]sortedCopyOf(Comparator,Iterable)ImmutableListMultimapImmutableMap$BuilderorderEntriesByValueImmutableMapImmutableMultimap$BuilderorderKeysByorderValuesBy(Object,Iterable)ImmutableMultimapImmutableMultiset$BuilderaddCopiessetCountImmutableMultisetArrayElement of Argument[6]ImmutableSetImmutableSetMultimapImmutableSortedMap(Map,Comparator)copyOfSortedImmutableSortedMultiset(Comparable[])(Comparator,Iterator)(SortedMultiset)ImmutableSortedSet(Comparator,Collection)ImmutableTable$BuilderSyntheticField[com.google.common.collect.Table.columnKey] of Argument[-1]SyntheticField[com.google.common.collect.Table.rowKey] of Argument[-1]orderColumnsByorderRowsBy(Cell)ImmutableTableIterables(Collection,Iterable)(Iterable,Iterable,Iterable)Element of Argument[0..2](Iterable,Iterable,Iterable,Iterable)Element of Argument[0..3](Iterable[])Element of ArrayElement of Argument[0]consumingIterablecycle(Iterable,Class)(Iterable,Predicate)(Iterable,Predicate,Object)(Iterable,int)(Iterable,int,Object)(Iterable,Object)getOnlyElementmergeSortedpaddedPartitionpartitiontryFindunmodifiableIterable(ImmutableCollection)Iterators(Collection,Iterator)asEnumeration(Iterator,Iterator)(Iterator,Iterator,Iterator)(Iterator,Iterator,Iterator,Iterator)(Iterator[])consumingIterator(Iterator,Class)(Iterator,Predicate)(Iterator,Predicate,Object)forArrayforEnumeration(Iterator,int)(Iterator,int,Object)peekingIterator(PeekingIterator)unmodifiableIterator(UnmodifiableIterator)LinkedHashMultimapLinkedHashMultisetLinkedListMultimapListscartesianProduct(List[])charactersOfnewArrayListnewCopyOnWriteArrayListnewLinkedListMapDifference$ValueDifferenceleftValueSyntheticField[com.google.common.collect.MapDifference.left] of Argument[-1]rightValueSyntheticField[com.google.common.collect.MapDifference.right] of Argument[-1]MapDifferenceentriesDifferingMapKey of SyntheticField[com.google.common.collect.MapDifference.left] of Argument[-1]MapKey of SyntheticField[com.google.common.collect.MapDifference.right] of Argument[-1]MapValue of SyntheticField[com.google.common.collect.MapDifference.left] of Argument[-1]SyntheticField[com.google.common.collect.MapDifference.left] of MapValue of ReturnValueMapValue of SyntheticField[com.google.common.collect.MapDifference.right] of Argument[-1]SyntheticField[com.google.common.collect.MapDifference.right] of MapValue of ReturnValueentriesInCommonentriesOnlyOnLeftentriesOnlyOnRightMaps(NavigableSet,Function)(Set,Function)(SortedSet,Function)(Map,Map)MapKey of SyntheticField[com.google.common.collect.MapDifference.left] of ReturnValueMapKey of SyntheticField[com.google.common.collect.MapDifference.right] of ReturnValueMapValue of SyntheticField[com.google.common.collect.MapDifference.left] of ReturnValueMapValue of SyntheticField[com.google.common.collect.MapDifference.right] of ReturnValue(Map,Map,Equivalence)(SortedMap,Map)filterEntriesfilterKeysfilterValuesfromPropertiesimmutableEntryimmutableEnumMapnewEnumMapnewTreeMap(NavigableMap,Range)synchronizedBiMap(BiMap)(Iterable,Function)(Iterator,Function)transformValues(Map,Function)(NavigableMap,Function)(SortedMap,Function)uniqueIndexunmodifiableBiMapMultimapentriesreplaceValuesMultimaps(ListMultimap)(SetMultimap)(SortedSetMultimap)(Multimap,Predicate)(SetMultimap,Predicate)forMapinvertFrom(Multimap,Multimap)newListMultimap(Map,Supplier)newMultimapnewSetMultimapnewSortedSetMultimapsynchronizedListMultimapsynchronizedMultimapsynchronizedSetMultimapsynchronizedSortedSetMultimap(ListMultimap,Function)(Multimap,Function)unmodifiableListMultimap(ImmutableListMultimap)unmodifiableMultimap(ImmutableMultimap)unmodifiableSetMultimap(ImmutableSetMultimap)unmodifiableSortedSetMultimapMultiset$EntryMultisetelementSetMultisetscopyHighestCountFirst(Multiset)(Multiset,Multiset)(Multiset,Predicate)unmodifiableMultiset(ImmutableMultiset)unmodifiableSortedMultisetMutableClassToInstanceMapObjectArrays(Object[],Object[],Class)Queues(BlockingQueue,Collection,int,Duration)(BlockingQueue,Collection,int,long,TimeUnit)newArrayDequenewConcurrentLinkedQueuenewLinkedBlockingDequenewLinkedBlockingQueuenewPriorityBlockingQueuenewPriorityQueuesynchronizedDeque(Queue)Sets$SetViewimmutableCopySets(Set[])combinations(Set,int)(Set,Set)(NavigableSet,Predicate)(Set,Predicate)(SortedSet,Predicate)newConcurrentHashSetnewCopyOnWriteArraySetnewHashSetnewLinkedHashSetnewTreeSetpowerSet(NavigableSet,Range)symmetricDifferenceTable$CellgetColumnKeygetRowKeycellSetSyntheticField[com.google.common.collect.Table.columnKey] of Element of ReturnValueSyntheticField[com.google.common.collect.Table.rowKey] of Element of ReturnValuecolumncolumnKeySetcolumnMapMapValue of MapValue of ReturnValueMapKey of MapValue of ReturnValuerowrowKeySetrowMapTablesimmutableCellnewCustomTableMapKey of MapValue of Argument[0]MapValue of MapValue of Argument[0]synchronizedTable(Table,Function)transposeunmodifiableRowSortedTable(RowSortedTable)unmodifiableTableTreeBasedTable(TreeBasedTable)TreeMultimapTreeMultisetjavax.json.streamJsonParserFactoryjavax.jsonJsoncreateArrayBuilder(JsonArray)createDiffcreateMergeDiffcreateMergePatchcreateObjectBuilder(JsonObject)createPatchcreatePatchBuildercreatePointercreateReadercreateValuecreateWriterdecodePointerencodePointerJsonArraygetJsonArraygetJsonNumbergetJsonObjectgetJsonStringgetValuesAsJsonArrayBuilder(JsonArrayBuilder)(JsonObjectBuilder)(JsonValue)(int,BigInteger)(int,JsonArrayBuilder)(int,JsonObjectBuilder)(int,JsonValue)addNullJsonMergePatchtoJsonValueJsonNumberbigDecimalValuebigIntegerValuebigIntegerValueExactnumberValueJsonObjectJsonObjectBuilderJsonPatchtoJsonArrayJsonPatchBuilderJsonPointerJsonReaderreadArrayreadValueJsonReaderFactoryJsonStringJsonStructureJsonValueasJsonArrayasJsonObjectJsonWriterwriteArrayJsonWriterFactoryjakarta.json.streamjakarta.jsonasMultiValueMapTypedDatafromLinkbuildFromEncodedbuildFromEncodedMapbuildFromMapmatrixParamreplaceMatrixreplaceMatrixParamresolveTemplateresolveTemplateFromEncodedresolveTemplatesresolveTemplatesFromEncodedsegmenttoTemplateUriInfogetAbsolutePathBuildergetPathParametersgetRequestUriBuilderMultivaluedMapputSingleorg.apache.commons.collections.multimapArrayListValuedHashMap(MultiValuedMap)HashSetValuedHashMapTransformedMultiValuedMapUnmodifiableMultiValuedMaporg.apache.commons.collections4.multimaporg.apache.commons.collections.bagAbstractBagDecoratorAbstractMapBagAbstractSortedBagDecoratorCollectionBagCollectionSortedBagcollectionSortedBagHashBagPredicatedBagPredicatedSortedBagSynchronizedBagSynchronizedSortedBagTransformedBagtransformedBagTransformedSortedBagtransformedSortedBagTreeBagUnmodifiableBagUnmodifiableSortedBagorg.apache.commons.collections4.bagorg.apache.commons.collections.listAbstractLinkedListAbstractListDecoratorAbstractSerializableListDecoratorCursorableLinkedListFixedSizeListfixedSizeListGrowthListgrowthListLazyListlazyListNodeCachingLinkedListPredicatedListpredicatedListSetUniqueListsetUniqueListTransformedListtransformingListTreeListUnmodifiableListorg.apache.commons.collections4.listSetUtils$SetViewcreateIteratorSetUtilsdisjunctionhashSetorderedSetpredicatedNavigableSetpredicatedSetpredicatedSortedSettransformedNavigableSettransformedSettransformedSortedSetListUtilslongestCommonSubsequence(List,List,Equator)selectRejectedtransformedListorg.apache.commons.collections.setAbstractNavigableSetDecoratorAbstractSetDecoratorAbstractSortedSetDecoratorCompositeSet$SetMutatorElement of Element of Argument[1]CompositeSetaddCompositedgetSetsListOrderedSetlistOrderedSetMapBackedSetmapBackedSetPredicatedNavigableSetPredicatedSetPredicatedSortedSetTransformedNavigableSettransformingNavigableSetTransformedSettransformingSetTransformedSortedSettransformingSortedSetUnmodifiableNavigableSetUnmodifiableSetUnmodifiableSortedSetorg.apache.commons.collections4.setIterableUtilsboundedIterablechainedIterableElement of Argument[3]collatedIterable(Comparator,Iterable,Iterable)filteredIterableforEachButLastloopingIterablereversedIterableskippingIterableuniqueIterablezippingIterable(Iterable,Iterable[])Element of ArrayElement of Argument[1]org.apache.commons.collections.bidimapAbstractBidiMapDecoratorAbstractDualBidiMapMapKey of Argument[2]MapValue of Argument[2]AbstractOrderedBidiMapDecoratorAbstractSortedBidiMapDecoratorDualHashBidiMapDualLinkedHashBidiMapDualTreeBidiMapinverseOrderedBidiMapinverseSortedBidiMapTreeBidiMapUnmodifiableBidiMapunmodifiableBidiMapUnmodifiableOrderedBidiMapunmodifiableOrderedBidiMapUnmodifiableSortedBidiMapunmodifiableSortedBidiMaporg.apache.commons.collections4.bidimap(Collection,Enumeration)addIgnoreNullcollateextractSingleton(Map,int)getCardinalityMappredicatedCollection(Iterable,Predicate,Collection)(Iterable,Predicate,Collection,Collection)transformingCollectionIteratorUtilsarrayIteratorarrayListIteratorasIterableasMultipleUseIterableboundedIteratorchainedIteratorcollatedIterator(Comparator,Iterator,Iterator)(Comparator,Iterator[])filteredIteratorfilteredListIteratorloopingIteratorloopingListIteratorpushbackIteratorsingletonListIteratorskippingIteratortoListIteratorunmodifiableListIteratorunmodifiableMapIteratorzippingIteratororg.apache.commons.collections.collectionAbstractCollectionDecoratordecoratedsetCollectionCompositeCollection$CollectionMutatorCompositeCollection(Collection[])getCollectionstoCollectionIndexedCollectionnonUniqueIndexedCollectionuniqueIndexedCollectionPredicatedCollection$BuildercreatePredicatedBagcreatePredicatedListcreatePredicatedMultiSetcreatePredicatedQueuecreatePredicatedSetrejectedElementsPredicatedCollectionSynchronizedCollectionTransformedCollectionUnmodifiableBoundedCollectionunmodifiableBoundedCollectionUnmodifiableCollectionorg.apache.commons.collections4.collectionMapUtilsfixedSizeMapfixedSizeSortedMapinvertMapiterableMapiterableSortedMaplazyMaplazySortedMapmultiValueMaporderedMappopulateMap(Map,Iterable,Transformer)(MultiMap,Iterable,Transformer)predicatedMappredicatedSortedMapArrayElement of ArrayElement of Argument[1]MapKey of ArrayElement of Argument[1]MapValue of ArrayElement of Argument[1]safeAddToMaptransformedMaptransformedSortedMaporg.apache.commons.collections.keyvalueAbstractKeyValuesetKeyAbstractMapEntryAbstractMapEntryDecoratorgetMapEntryDefaultKeyValue(KeyValue)toMapEntryDefaultMapEntryMultiKey(Object[],boolean)TiedMapEntryUnmodifiableMapEntryorg.apache.commons.collections4.keyvalueArrayStackBaguniqueSetBidiMapinverseBidiMapFluentIterableloopunmodifiablezipIterableGetmapIteratorKeyValueMapIteratorMultiMapMultiSet$EntryMultiSetMultiValuedMapOrderedIteratorOrderedMapnextKeypreviousKeySortedBagTrieprefixMaporg.apache.commons.collections.iteratorsAbstractIteratorDecoratorAbstractListIteratorDecoratorgetListIteratorAbstractMapIteratorDecoratorgetMapIteratorAbstractOrderedMapIteratorDecoratorgetOrderedMapIteratorAbstractUntypedIteratorDecoratorArrayIteratorArrayListIteratorBoundedIteratorCollatingIteratoraddIteratorgetIteratorssetIteratorEnumerationIteratorgetEnumerationsetEnumerationFilterIteratorFilterListIterator(ListIterator)(ListIterator,Predicate)setListIteratorIteratorChainIteratorEnumerationIteratorIterableListIteratorWrapperLoopingIteratorLoopingListIteratorObjectArrayIteratorObjectArrayListIteratorPeekingIteratorPermutationIteratorElement of Element of Argument[-1]PushbackIteratorpushbackReverseListIteratorSingletonIteratorSingletonListIteratorSkippingIteratorUniqueFilterIteratorUnmodifiableIteratorUnmodifiableListIteratorumodifiableListIteratorUnmodifiableMapIteratorUnmodifiableOrderedMapIteratorunmodifiableOrderedMapIteratorZippingIteratororg.apache.commons.collections4.iteratorsorg.apache.commons.collections.mapAbstractHashedMapAbstractLinkedMapAbstractMapDecoratorAbstractOrderedMapDecorator(OrderedMap)AbstractSortedMapDecoratorCaseInsensitiveMapCompositeMap(Map,Map,MapMutator)(Map[])(Map[],MapMutator)removeCompositedDefaultedMapdefaultedMapEntrySetToMapIteratorAdapterFixedSizeMapFixedSizeSortedMapFlat3MapHashedMapLRUMapLazyMapLazySortedMapLinkedMapListOrderedMapkeyListlistOrderedMapvalueListMultiKeyMapElement of MapKey of Argument[-1]removeMultiKeyPassiveExpiringMap(ExpirationPolicy,Map)(long,Map)(long,TimeUnit,Map)PredicatedMapPredicatedSortedMapSingletonMapTransformedMapTransformedSortedMaptransformingSortedMapUnmodifiableEntrySetunmodifiableEntrySetUnmodifiableMapUnmodifiableOrderedMapunmodifiableOrderedMapUnmodifiableSortedMaporg.apache.commons.collections4.mapreadBinderArrayreadBinderListreadBooleanArrayreadCharArrayreadDoubleArrayreadFloatArrayreadIntArrayreadListreadLongArrayreadMapreadStringArrayreadStringListreadTypedArrayreadTypedListreadArrayListreadBundlereadFileDescriptorreadHashMapreadParcelablereadParcelableArrayreadPersistableBundlereadSerializablereadSizereadSizeFreadSparseArrayreadSparseBooleanArrayreadStrongBinderreadTypedObjectElement of Parameter[0] of Argument[0]blockingMapblockingOpcacheIfflatMapErrorElement of ReturnValue of Argument[1]flatOpflattenmapErrormapIfParameter[0] of Argument[2]nextOpnextOpIfroutethenwiretapWebServiceWebServiceProviderWebServiceClient(?i).*\bAutogenerated by Thrift.*com.opensymphony.xwork2ActionSupportcom.google.inject.servletRequestParameters of MapKeyMapValueArrayElementArgument\[([^\]]*)\]0..11..2-1..2([-0-9]+)([-0-9]+)\.\.([0-9]+)Parameter\[([^\]]*)\]SyntheticField\[([.a-zA-Z0-9]+)\]^Field\[(.*)\.([^.]+)\.([^.]+)\]$                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                